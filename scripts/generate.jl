using Downloads
using Markdown

@info "Checking `openapi-generator-cli`..."
try
    run(`openapi-generator-cli --version`)
catch
    @error "`openapi-generator-cli` cannot be found."
    exit(1)
end

const SCRIPT_DIR = @__DIR__
const API_SPECIFICATION = SCRIPT_DIR * "/../api.json" |> abspath
@info "Downloading api.json to $API_SPECIFICATION"
out = Downloads.download("https://misskey.qwjyh.net/api.json", API_SPECIFICATION)
@debug "Downloaded" out

@info "Generating"
const BUILD_DIR = SCRIPT_DIR * "/../build"
const PROJ_DIR = SCRIPT_DIR * "/.." |> normpath
const DOCS_DIR = SCRIPT_DIR * "/../docs"
const SRC_DIR = SCRIPT_DIR * "/../src"
ispath(BUILD_DIR) || mkdir(BUILD_DIR)
cd(SCRIPT_DIR * "/../build") do
    run(`openapi-generator-cli generate -g julia-client -i $API_SPECIFICATION --skip-validate-spec --package-name MisskeyOpenAPI --minimal-update`)

    @info "Moving files"
    @info "Julia sources"
    for (root, _dirs, src_files) in walkdir("src")
        @debug "" root src_files
        for src_file in src_files
            ispath(joinpath(PROJ_DIR, root)) || mkdir(joinpath(PROJ_DIR, root))
            mv(joinpath(root, src_file), joinpath(PROJ_DIR, root, src_file); force = true)
        end
    end

    @info "Autogenerated documents"
    # md_meta, auto_readme = let
    #     auto_readme = Markdown.parse_file("README.md")
    #     for content in auto_readme.content
    #     end
    #     auto_readme.meta, auto_readme.content
    # end
    # open(joinpath(DOCS_DIR, "src", "auto_readme.md"), "w") do f
    #     Markdown.plain(f, Markdown.MD(md_meta, auto_readme))
    # end
    mv("README.md", joinpath(DOCS_DIR, "src", "README.md"); force = true)
    # auto_contents = Any[]
    AUTOGENED_DOCS_DIR = joinpath(DOCS_DIR, "src", "docs")
    ispath(joinpath(AUTOGENED_DOCS_DIR)) || mkdir(AUTOGENED_DOCS_DIR)
    for (root, _dirs, doc_files) in walkdir("docs")
        @debug "" root
        for doc_file in doc_files
            # md = Markdown.parse_file(joinpath(root, doc_file))
            # @assert md.content[end] isa Markdown.Paragraph
            # for child in md.content[end].content
            #     if child isa Markdown.Link
            #         @info "link" child.url
            #         child.url = replace(child.url, "../README.md" => "auto_readme.md")
            #         @info "replaced" child.url
            #     end
            # end
            # append!(auto_contents, md.content)
            # mv(joinpath(root, doc_file), joinpath(AUTOGENED_DOCS_DIR, doc_file))
            open(joinpath(AUTOGENED_DOCS_DIR, doc_file), "w") do f
                for line in eachline(joinpath(root, doc_file))
                    line = replace(line, r"\[(?<text>.+)\]\(.md\)" => s"\g<text>")
                    println(f, line)
                end
            end
        end
    end
    # open(joinpath(DOCS_DIR, "src", "auto_docs.md"), "w") do f
    #     Markdown.plain(f, Markdown.MD(md_meta, auto_contents))
    # end
end
