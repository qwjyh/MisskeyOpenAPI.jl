# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""notes___conversation_request

    NotesConversationRequest(;
        noteId=nothing,
        limit=10,
        offset=0,
    )

    - noteId::String
    - limit::Int64
    - offset::Int64
"""
Base.@kwdef mutable struct NotesConversationRequest <: OpenAPI.APIModel
    noteId::Union{Nothing, String} = nothing
    limit::Union{Nothing, Int64} = 10
    offset::Union{Nothing, Int64} = 0

    function NotesConversationRequest(noteId, limit, offset, )
        OpenAPI.validate_property(NotesConversationRequest, Symbol("noteId"), noteId)
        OpenAPI.validate_property(NotesConversationRequest, Symbol("limit"), limit)
        OpenAPI.validate_property(NotesConversationRequest, Symbol("offset"), offset)
        return new(noteId, limit, offset, )
    end
end # type NotesConversationRequest

const _property_types_NotesConversationRequest = Dict{Symbol,String}(Symbol("noteId")=>"String", Symbol("limit")=>"Int64", Symbol("offset")=>"Int64", )
OpenAPI.property_type(::Type{ NotesConversationRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_NotesConversationRequest[name]))}

function check_required(o::NotesConversationRequest)
    o.noteId === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ NotesConversationRequest }, name::Symbol, val)
    if name === Symbol("noteId")
        OpenAPI.validate_param(name, "NotesConversationRequest", :format, val, "misskey:id")
    end
    if name === Symbol("limit")
        OpenAPI.validate_param(name, "NotesConversationRequest", :maximum, val, 100, false)
        OpenAPI.validate_param(name, "NotesConversationRequest", :minimum, val, 1, false)
    end
end
