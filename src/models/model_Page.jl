# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Page

    Page(;
        id=nothing,
        createdAt=nothing,
        updatedAt=nothing,
        userId=nothing,
        user=nothing,
        content=nothing,
        variables=nothing,
        title=nothing,
        name=nothing,
        summary=nothing,
        hideTitleWhenPinned=nothing,
        alignCenter=nothing,
        font=nothing,
        script=nothing,
        eyeCatchingImageId=nothing,
        eyeCatchingImage=nothing,
        attachedFiles=nothing,
        likedCount=nothing,
        isLiked=nothing,
    )

    - id::String
    - createdAt::ZonedDateTime
    - updatedAt::ZonedDateTime
    - userId::String
    - user::UserLite
    - content::Vector{PageBlock}
    - variables::Vector{Any}
    - title::String
    - name::String
    - summary::String
    - hideTitleWhenPinned::Bool
    - alignCenter::Bool
    - font::String
    - script::String
    - eyeCatchingImageId::String
    - eyeCatchingImage::DriveFile
    - attachedFiles::Vector{DriveFile}
    - likedCount::Float64
    - isLiked::Bool
"""
Base.@kwdef mutable struct Page <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    createdAt::Union{Nothing, ZonedDateTime} = nothing
    updatedAt::Union{Nothing, ZonedDateTime} = nothing
    userId::Union{Nothing, String} = nothing
    user = nothing # spec type: Union{ Nothing, UserLite }
    content::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{PageBlock} }
    variables::Union{Nothing, Vector{Any}} = nothing
    title::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    summary::Union{Nothing, String} = nothing
    hideTitleWhenPinned::Union{Nothing, Bool} = nothing
    alignCenter::Union{Nothing, Bool} = nothing
    font::Union{Nothing, String} = nothing
    script::Union{Nothing, String} = nothing
    eyeCatchingImageId::Union{Nothing, String} = nothing
    eyeCatchingImage = nothing # spec type: Union{ Nothing, DriveFile }
    attachedFiles::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{DriveFile} }
    likedCount::Union{Nothing, Float64} = nothing
    isLiked::Union{Nothing, Bool} = nothing

    function Page(id, createdAt, updatedAt, userId, user, content, variables, title, name, summary, hideTitleWhenPinned, alignCenter, font, script, eyeCatchingImageId, eyeCatchingImage, attachedFiles, likedCount, isLiked, )
        OpenAPI.validate_property(Page, Symbol("id"), id)
        OpenAPI.validate_property(Page, Symbol("createdAt"), createdAt)
        OpenAPI.validate_property(Page, Symbol("updatedAt"), updatedAt)
        OpenAPI.validate_property(Page, Symbol("userId"), userId)
        OpenAPI.validate_property(Page, Symbol("user"), user)
        OpenAPI.validate_property(Page, Symbol("content"), content)
        OpenAPI.validate_property(Page, Symbol("variables"), variables)
        OpenAPI.validate_property(Page, Symbol("title"), title)
        OpenAPI.validate_property(Page, Symbol("name"), name)
        OpenAPI.validate_property(Page, Symbol("summary"), summary)
        OpenAPI.validate_property(Page, Symbol("hideTitleWhenPinned"), hideTitleWhenPinned)
        OpenAPI.validate_property(Page, Symbol("alignCenter"), alignCenter)
        OpenAPI.validate_property(Page, Symbol("font"), font)
        OpenAPI.validate_property(Page, Symbol("script"), script)
        OpenAPI.validate_property(Page, Symbol("eyeCatchingImageId"), eyeCatchingImageId)
        OpenAPI.validate_property(Page, Symbol("eyeCatchingImage"), eyeCatchingImage)
        OpenAPI.validate_property(Page, Symbol("attachedFiles"), attachedFiles)
        OpenAPI.validate_property(Page, Symbol("likedCount"), likedCount)
        OpenAPI.validate_property(Page, Symbol("isLiked"), isLiked)
        return new(id, createdAt, updatedAt, userId, user, content, variables, title, name, summary, hideTitleWhenPinned, alignCenter, font, script, eyeCatchingImageId, eyeCatchingImage, attachedFiles, likedCount, isLiked, )
    end
end # type Page

const _property_types_Page = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("createdAt")=>"ZonedDateTime", Symbol("updatedAt")=>"ZonedDateTime", Symbol("userId")=>"String", Symbol("user")=>"UserLite", Symbol("content")=>"Vector{PageBlock}", Symbol("variables")=>"Vector{Any}", Symbol("title")=>"String", Symbol("name")=>"String", Symbol("summary")=>"String", Symbol("hideTitleWhenPinned")=>"Bool", Symbol("alignCenter")=>"Bool", Symbol("font")=>"String", Symbol("script")=>"String", Symbol("eyeCatchingImageId")=>"String", Symbol("eyeCatchingImage")=>"DriveFile", Symbol("attachedFiles")=>"Vector{DriveFile}", Symbol("likedCount")=>"Float64", Symbol("isLiked")=>"Bool", )
OpenAPI.property_type(::Type{ Page }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Page[name]))}

function check_required(o::Page)
    o.id === nothing && (return false)
    o.createdAt === nothing && (return false)
    o.updatedAt === nothing && (return false)
    o.userId === nothing && (return false)
    o.user === nothing && (return false)
    o.content === nothing && (return false)
    o.variables === nothing && (return false)
    o.title === nothing && (return false)
    o.name === nothing && (return false)
    o.summary === nothing && (return false)
    o.hideTitleWhenPinned === nothing && (return false)
    o.alignCenter === nothing && (return false)
    o.font === nothing && (return false)
    o.script === nothing && (return false)
    o.eyeCatchingImageId === nothing && (return false)
    o.eyeCatchingImage === nothing && (return false)
    o.attachedFiles === nothing && (return false)
    o.likedCount === nothing && (return false)
    o.isLiked === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ Page }, name::Symbol, val)
    if name === Symbol("id")
        OpenAPI.validate_param(name, "Page", :format, val, "id")
    end
    if name === Symbol("createdAt")
        OpenAPI.validate_param(name, "Page", :format, val, "date-time")
    end
    if name === Symbol("updatedAt")
        OpenAPI.validate_param(name, "Page", :format, val, "date-time")
    end
    if name === Symbol("userId")
        OpenAPI.validate_param(name, "Page", :format, val, "id")
    end
end
