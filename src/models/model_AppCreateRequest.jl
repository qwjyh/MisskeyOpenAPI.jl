# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""app___create_request

    AppCreateRequest(;
        name=nothing,
        description=nothing,
        permission=nothing,
        callbackUrl=nothing,
    )

    - name::String
    - description::String
    - permission::Vector{String}
    - callbackUrl::String
"""
Base.@kwdef mutable struct AppCreateRequest <: OpenAPI.APIModel
    name::Union{Nothing, String} = nothing
    description::Union{Nothing, String} = nothing
    permission::Union{Nothing, Vector{String}} = nothing
    callbackUrl::Union{Nothing, String} = nothing

    function AppCreateRequest(name, description, permission, callbackUrl, )
        OpenAPI.validate_property(AppCreateRequest, Symbol("name"), name)
        OpenAPI.validate_property(AppCreateRequest, Symbol("description"), description)
        OpenAPI.validate_property(AppCreateRequest, Symbol("permission"), permission)
        OpenAPI.validate_property(AppCreateRequest, Symbol("callbackUrl"), callbackUrl)
        return new(name, description, permission, callbackUrl, )
    end
end # type AppCreateRequest

const _property_types_AppCreateRequest = Dict{Symbol,String}(Symbol("name")=>"String", Symbol("description")=>"String", Symbol("permission")=>"Vector{String}", Symbol("callbackUrl")=>"String", )
OpenAPI.property_type(::Type{ AppCreateRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_AppCreateRequest[name]))}

function check_required(o::AppCreateRequest)
    o.name === nothing && (return false)
    o.description === nothing && (return false)
    o.permission === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ AppCreateRequest }, name::Symbol, val)
    if name === Symbol("permission")
        OpenAPI.validate_param(name, "AppCreateRequest", :uniqueItems, val, true)
    end
end
