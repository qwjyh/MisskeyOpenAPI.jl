# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""notes___create_request_poll

    NotesCreateRequestPoll(;
        choices=nothing,
        multiple=nothing,
        expiresAt=nothing,
        expiredAfter=nothing,
    )

    - choices::Vector{String}
    - multiple::Bool
    - expiresAt::Int64
    - expiredAfter::Int64
"""
Base.@kwdef mutable struct NotesCreateRequestPoll <: OpenAPI.APIModel
    choices::Union{Nothing, Vector{String}} = nothing
    multiple::Union{Nothing, Bool} = nothing
    expiresAt::Union{Nothing, Int64} = nothing
    expiredAfter::Union{Nothing, Int64} = nothing

    function NotesCreateRequestPoll(choices, multiple, expiresAt, expiredAfter, )
        OpenAPI.validate_property(NotesCreateRequestPoll, Symbol("choices"), choices)
        OpenAPI.validate_property(NotesCreateRequestPoll, Symbol("multiple"), multiple)
        OpenAPI.validate_property(NotesCreateRequestPoll, Symbol("expiresAt"), expiresAt)
        OpenAPI.validate_property(NotesCreateRequestPoll, Symbol("expiredAfter"), expiredAfter)
        return new(choices, multiple, expiresAt, expiredAfter, )
    end
end # type NotesCreateRequestPoll

const _property_types_NotesCreateRequestPoll = Dict{Symbol,String}(Symbol("choices")=>"Vector{String}", Symbol("multiple")=>"Bool", Symbol("expiresAt")=>"Int64", Symbol("expiredAfter")=>"Int64", )
OpenAPI.property_type(::Type{ NotesCreateRequestPoll }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_NotesCreateRequestPoll[name]))}

function check_required(o::NotesCreateRequestPoll)
    o.choices === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ NotesCreateRequestPoll }, name::Symbol, val)
    if name === Symbol("choices")
        OpenAPI.validate_param(name, "NotesCreateRequestPoll", :maxItems, val, 10)
        OpenAPI.validate_param(name, "NotesCreateRequestPoll", :minItems, val, 2)
        OpenAPI.validate_param(name, "NotesCreateRequestPoll", :uniqueItems, val, true)
    end
    if name === Symbol("expiredAfter")
        OpenAPI.validate_param(name, "NotesCreateRequestPoll", :minimum, val, 1, false)
    end
end
