# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""i___authorized_apps_200_response_inner

    IAuthorizedApps200ResponseInner(;
        id=nothing,
        name=nothing,
        callbackUrl=nothing,
        permission=nothing,
        isAuthorized=nothing,
    )

    - id::String
    - name::String
    - callbackUrl::String
    - permission::Vector{String}
    - isAuthorized::Bool
"""
Base.@kwdef mutable struct IAuthorizedApps200ResponseInner <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    callbackUrl::Union{Nothing, String} = nothing
    permission::Union{Nothing, Vector{String}} = nothing
    isAuthorized::Union{Nothing, Bool} = nothing

    function IAuthorizedApps200ResponseInner(id, name, callbackUrl, permission, isAuthorized, )
        OpenAPI.validate_property(IAuthorizedApps200ResponseInner, Symbol("id"), id)
        OpenAPI.validate_property(IAuthorizedApps200ResponseInner, Symbol("name"), name)
        OpenAPI.validate_property(IAuthorizedApps200ResponseInner, Symbol("callbackUrl"), callbackUrl)
        OpenAPI.validate_property(IAuthorizedApps200ResponseInner, Symbol("permission"), permission)
        OpenAPI.validate_property(IAuthorizedApps200ResponseInner, Symbol("isAuthorized"), isAuthorized)
        return new(id, name, callbackUrl, permission, isAuthorized, )
    end
end # type IAuthorizedApps200ResponseInner

const _property_types_IAuthorizedApps200ResponseInner = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("name")=>"String", Symbol("callbackUrl")=>"String", Symbol("permission")=>"Vector{String}", Symbol("isAuthorized")=>"Bool", )
OpenAPI.property_type(::Type{ IAuthorizedApps200ResponseInner }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IAuthorizedApps200ResponseInner[name]))}

function check_required(o::IAuthorizedApps200ResponseInner)
    o.id === nothing && (return false)
    o.name === nothing && (return false)
    o.callbackUrl === nothing && (return false)
    o.permission === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ IAuthorizedApps200ResponseInner }, name::Symbol, val)
    if name === Symbol("id")
        OpenAPI.validate_param(name, "IAuthorizedApps200ResponseInner", :format, val, "misskey:id")
    end
    if name === Symbol("permission")
        OpenAPI.validate_param(name, "IAuthorizedApps200ResponseInner", :uniqueItems, val, true)
    end
end
