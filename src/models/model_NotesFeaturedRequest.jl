# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""notes___featured_request

    NotesFeaturedRequest(;
        limit=10,
        untilId=nothing,
        channelId=nothing,
    )

    - limit::Int64
    - untilId::String
    - channelId::String
"""
Base.@kwdef mutable struct NotesFeaturedRequest <: OpenAPI.APIModel
    limit::Union{Nothing, Int64} = 10
    untilId::Union{Nothing, String} = nothing
    channelId::Union{Nothing, String} = nothing

    function NotesFeaturedRequest(limit, untilId, channelId, )
        OpenAPI.validate_property(NotesFeaturedRequest, Symbol("limit"), limit)
        OpenAPI.validate_property(NotesFeaturedRequest, Symbol("untilId"), untilId)
        OpenAPI.validate_property(NotesFeaturedRequest, Symbol("channelId"), channelId)
        return new(limit, untilId, channelId, )
    end
end # type NotesFeaturedRequest

const _property_types_NotesFeaturedRequest = Dict{Symbol,String}(Symbol("limit")=>"Int64", Symbol("untilId")=>"String", Symbol("channelId")=>"String", )
OpenAPI.property_type(::Type{ NotesFeaturedRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_NotesFeaturedRequest[name]))}

function check_required(o::NotesFeaturedRequest)
    true
end

function OpenAPI.validate_property(::Type{ NotesFeaturedRequest }, name::Symbol, val)
    if name === Symbol("limit")
        OpenAPI.validate_param(name, "NotesFeaturedRequest", :maximum, val, 100, false)
        OpenAPI.validate_param(name, "NotesFeaturedRequest", :minimum, val, 1, false)
    end
    if name === Symbol("untilId")
        OpenAPI.validate_param(name, "NotesFeaturedRequest", :format, val, "misskey:id")
    end
    if name === Symbol("channelId")
        OpenAPI.validate_param(name, "NotesFeaturedRequest", :format, val, "misskey:id")
    end
end
