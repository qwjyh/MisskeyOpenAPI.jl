# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""admin___avatar_decorations___update_request

    AdminAvatarDecorationsUpdateRequest(;
        id=nothing,
        name=nothing,
        description=nothing,
        url=nothing,
        roleIdsThatCanBeUsedThisDecoration=nothing,
    )

    - id::String
    - name::String
    - description::String
    - url::String
    - roleIdsThatCanBeUsedThisDecoration::Vector{String}
"""
Base.@kwdef mutable struct AdminAvatarDecorationsUpdateRequest <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    description::Union{Nothing, String} = nothing
    url::Union{Nothing, String} = nothing
    roleIdsThatCanBeUsedThisDecoration::Union{Nothing, Vector{String}} = nothing

    function AdminAvatarDecorationsUpdateRequest(id, name, description, url, roleIdsThatCanBeUsedThisDecoration, )
        OpenAPI.validate_property(AdminAvatarDecorationsUpdateRequest, Symbol("id"), id)
        OpenAPI.validate_property(AdminAvatarDecorationsUpdateRequest, Symbol("name"), name)
        OpenAPI.validate_property(AdminAvatarDecorationsUpdateRequest, Symbol("description"), description)
        OpenAPI.validate_property(AdminAvatarDecorationsUpdateRequest, Symbol("url"), url)
        OpenAPI.validate_property(AdminAvatarDecorationsUpdateRequest, Symbol("roleIdsThatCanBeUsedThisDecoration"), roleIdsThatCanBeUsedThisDecoration)
        return new(id, name, description, url, roleIdsThatCanBeUsedThisDecoration, )
    end
end # type AdminAvatarDecorationsUpdateRequest

const _property_types_AdminAvatarDecorationsUpdateRequest = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("name")=>"String", Symbol("description")=>"String", Symbol("url")=>"String", Symbol("roleIdsThatCanBeUsedThisDecoration")=>"Vector{String}", )
OpenAPI.property_type(::Type{ AdminAvatarDecorationsUpdateRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_AdminAvatarDecorationsUpdateRequest[name]))}

function check_required(o::AdminAvatarDecorationsUpdateRequest)
    o.id === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ AdminAvatarDecorationsUpdateRequest }, name::Symbol, val)
    if name === Symbol("id")
        OpenAPI.validate_param(name, "AdminAvatarDecorationsUpdateRequest", :format, val, "misskey:id")
    end
    if name === Symbol("name")
        OpenAPI.validate_param(name, "AdminAvatarDecorationsUpdateRequest", :minLength, val, 1)
    end
    if name === Symbol("url")
        OpenAPI.validate_param(name, "AdminAvatarDecorationsUpdateRequest", :minLength, val, 1)
    end
end
