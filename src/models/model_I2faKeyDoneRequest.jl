# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""i___2fa___key_done_request

    I2faKeyDoneRequest(;
        password=nothing,
        token=nothing,
        name=nothing,
        credential=nothing,
    )

    - password::String
    - token::String
    - name::String
    - credential::Any
"""
Base.@kwdef mutable struct I2faKeyDoneRequest <: OpenAPI.APIModel
    password::Union{Nothing, String} = nothing
    token::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    credential::Union{Nothing, Any} = nothing

    function I2faKeyDoneRequest(password, token, name, credential, )
        OpenAPI.validate_property(I2faKeyDoneRequest, Symbol("password"), password)
        OpenAPI.validate_property(I2faKeyDoneRequest, Symbol("token"), token)
        OpenAPI.validate_property(I2faKeyDoneRequest, Symbol("name"), name)
        OpenAPI.validate_property(I2faKeyDoneRequest, Symbol("credential"), credential)
        return new(password, token, name, credential, )
    end
end # type I2faKeyDoneRequest

const _property_types_I2faKeyDoneRequest = Dict{Symbol,String}(Symbol("password")=>"String", Symbol("token")=>"String", Symbol("name")=>"String", Symbol("credential")=>"Any", )
OpenAPI.property_type(::Type{ I2faKeyDoneRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_I2faKeyDoneRequest[name]))}

function check_required(o::I2faKeyDoneRequest)
    o.password === nothing && (return false)
    o.name === nothing && (return false)
    o.credential === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ I2faKeyDoneRequest }, name::Symbol, val)
    if name === Symbol("name")
        OpenAPI.validate_param(name, "I2faKeyDoneRequest", :maxLength, val, 30)
        OpenAPI.validate_param(name, "I2faKeyDoneRequest", :minLength, val, 1)
    end
end
