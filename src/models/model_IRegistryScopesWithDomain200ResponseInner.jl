# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""i___registry___scopes_with_domain_200_response_inner

    IRegistryScopesWithDomain200ResponseInner(;
        scopes=nothing,
        domain=nothing,
    )

    - scopes::Vector{Vector{String}}
    - domain::String
"""
Base.@kwdef mutable struct IRegistryScopesWithDomain200ResponseInner <: OpenAPI.APIModel
    scopes::Union{Nothing, Vector{Vector{String}}} = nothing
    domain::Union{Nothing, String} = nothing

    function IRegistryScopesWithDomain200ResponseInner(scopes, domain, )
        OpenAPI.validate_property(IRegistryScopesWithDomain200ResponseInner, Symbol("scopes"), scopes)
        OpenAPI.validate_property(IRegistryScopesWithDomain200ResponseInner, Symbol("domain"), domain)
        return new(scopes, domain, )
    end
end # type IRegistryScopesWithDomain200ResponseInner

const _property_types_IRegistryScopesWithDomain200ResponseInner = Dict{Symbol,String}(Symbol("scopes")=>"Vector{Vector{String}}", Symbol("domain")=>"String", )
OpenAPI.property_type(::Type{ IRegistryScopesWithDomain200ResponseInner }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IRegistryScopesWithDomain200ResponseInner[name]))}

function check_required(o::IRegistryScopesWithDomain200ResponseInner)
    o.scopes === nothing && (return false)
    o.domain === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ IRegistryScopesWithDomain200ResponseInner }, name::Symbol, val)
end
