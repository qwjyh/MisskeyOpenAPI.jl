# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Antenna

    Antenna(;
        id=nothing,
        createdAt=nothing,
        name=nothing,
        keywords=nothing,
        excludeKeywords=nothing,
        src=nothing,
        userListId=nothing,
        users=nothing,
        caseSensitive=false,
        localOnly=false,
        excludeBots=false,
        withReplies=false,
        withFile=nothing,
        isActive=nothing,
        hasUnreadNote=false,
        notify=false,
    )

    - id::String
    - createdAt::ZonedDateTime
    - name::String
    - keywords::Vector{Vector{String}}
    - excludeKeywords::Vector{Vector{String}}
    - src::String
    - userListId::String
    - users::Vector{String}
    - caseSensitive::Bool
    - localOnly::Bool
    - excludeBots::Bool
    - withReplies::Bool
    - withFile::Bool
    - isActive::Bool
    - hasUnreadNote::Bool
    - notify::Bool
"""
Base.@kwdef mutable struct Antenna <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    createdAt::Union{Nothing, ZonedDateTime} = nothing
    name::Union{Nothing, String} = nothing
    keywords::Union{Nothing, Vector{Vector{String}}} = nothing
    excludeKeywords::Union{Nothing, Vector{Vector{String}}} = nothing
    src::Union{Nothing, String} = nothing
    userListId::Union{Nothing, String} = nothing
    users::Union{Nothing, Vector{String}} = nothing
    caseSensitive::Union{Nothing, Bool} = false
    localOnly::Union{Nothing, Bool} = false
    excludeBots::Union{Nothing, Bool} = false
    withReplies::Union{Nothing, Bool} = false
    withFile::Union{Nothing, Bool} = nothing
    isActive::Union{Nothing, Bool} = nothing
    hasUnreadNote::Union{Nothing, Bool} = false
    notify::Union{Nothing, Bool} = false

    function Antenna(id, createdAt, name, keywords, excludeKeywords, src, userListId, users, caseSensitive, localOnly, excludeBots, withReplies, withFile, isActive, hasUnreadNote, notify, )
        OpenAPI.validate_property(Antenna, Symbol("id"), id)
        OpenAPI.validate_property(Antenna, Symbol("createdAt"), createdAt)
        OpenAPI.validate_property(Antenna, Symbol("name"), name)
        OpenAPI.validate_property(Antenna, Symbol("keywords"), keywords)
        OpenAPI.validate_property(Antenna, Symbol("excludeKeywords"), excludeKeywords)
        OpenAPI.validate_property(Antenna, Symbol("src"), src)
        OpenAPI.validate_property(Antenna, Symbol("userListId"), userListId)
        OpenAPI.validate_property(Antenna, Symbol("users"), users)
        OpenAPI.validate_property(Antenna, Symbol("caseSensitive"), caseSensitive)
        OpenAPI.validate_property(Antenna, Symbol("localOnly"), localOnly)
        OpenAPI.validate_property(Antenna, Symbol("excludeBots"), excludeBots)
        OpenAPI.validate_property(Antenna, Symbol("withReplies"), withReplies)
        OpenAPI.validate_property(Antenna, Symbol("withFile"), withFile)
        OpenAPI.validate_property(Antenna, Symbol("isActive"), isActive)
        OpenAPI.validate_property(Antenna, Symbol("hasUnreadNote"), hasUnreadNote)
        OpenAPI.validate_property(Antenna, Symbol("notify"), notify)
        return new(id, createdAt, name, keywords, excludeKeywords, src, userListId, users, caseSensitive, localOnly, excludeBots, withReplies, withFile, isActive, hasUnreadNote, notify, )
    end
end # type Antenna

const _property_types_Antenna = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("createdAt")=>"ZonedDateTime", Symbol("name")=>"String", Symbol("keywords")=>"Vector{Vector{String}}", Symbol("excludeKeywords")=>"Vector{Vector{String}}", Symbol("src")=>"String", Symbol("userListId")=>"String", Symbol("users")=>"Vector{String}", Symbol("caseSensitive")=>"Bool", Symbol("localOnly")=>"Bool", Symbol("excludeBots")=>"Bool", Symbol("withReplies")=>"Bool", Symbol("withFile")=>"Bool", Symbol("isActive")=>"Bool", Symbol("hasUnreadNote")=>"Bool", Symbol("notify")=>"Bool", )
OpenAPI.property_type(::Type{ Antenna }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Antenna[name]))}

function check_required(o::Antenna)
    o.id === nothing && (return false)
    o.createdAt === nothing && (return false)
    o.name === nothing && (return false)
    o.keywords === nothing && (return false)
    o.excludeKeywords === nothing && (return false)
    o.src === nothing && (return false)
    o.userListId === nothing && (return false)
    o.users === nothing && (return false)
    o.caseSensitive === nothing && (return false)
    o.localOnly === nothing && (return false)
    o.excludeBots === nothing && (return false)
    o.withReplies === nothing && (return false)
    o.withFile === nothing && (return false)
    o.isActive === nothing && (return false)
    o.hasUnreadNote === nothing && (return false)
    o.notify === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ Antenna }, name::Symbol, val)
    if name === Symbol("id")
        OpenAPI.validate_param(name, "Antenna", :format, val, "id")
    end
    if name === Symbol("createdAt")
        OpenAPI.validate_param(name, "Antenna", :format, val, "date-time")
    end
    if name === Symbol("src")
        OpenAPI.validate_param(name, "Antenna", :enum, val, ["home", "all", "users", "list", "users_blacklist"])
    end
    if name === Symbol("userListId")
        OpenAPI.validate_param(name, "Antenna", :format, val, "id")
    end
end
