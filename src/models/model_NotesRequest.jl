# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""notes_request

    NotesRequest(;
        var"local"=false,
        reply=nothing,
        renote=nothing,
        withFiles=nothing,
        poll=nothing,
        limit=10,
        sinceId=nothing,
        untilId=nothing,
    )

    - var"local"::Bool
    - reply::Bool
    - renote::Bool
    - withFiles::Bool
    - poll::Bool
    - limit::Int64
    - sinceId::String
    - untilId::String
"""
Base.@kwdef mutable struct NotesRequest <: OpenAPI.APIModel
    var"local"::Union{Nothing, Bool} = false
    reply::Union{Nothing, Bool} = nothing
    renote::Union{Nothing, Bool} = nothing
    withFiles::Union{Nothing, Bool} = nothing
    poll::Union{Nothing, Bool} = nothing
    limit::Union{Nothing, Int64} = 10
    sinceId::Union{Nothing, String} = nothing
    untilId::Union{Nothing, String} = nothing

    function NotesRequest(var"local", reply, renote, withFiles, poll, limit, sinceId, untilId, )
        OpenAPI.validate_property(NotesRequest, Symbol("local"), var"local")
        OpenAPI.validate_property(NotesRequest, Symbol("reply"), reply)
        OpenAPI.validate_property(NotesRequest, Symbol("renote"), renote)
        OpenAPI.validate_property(NotesRequest, Symbol("withFiles"), withFiles)
        OpenAPI.validate_property(NotesRequest, Symbol("poll"), poll)
        OpenAPI.validate_property(NotesRequest, Symbol("limit"), limit)
        OpenAPI.validate_property(NotesRequest, Symbol("sinceId"), sinceId)
        OpenAPI.validate_property(NotesRequest, Symbol("untilId"), untilId)
        return new(var"local", reply, renote, withFiles, poll, limit, sinceId, untilId, )
    end
end # type NotesRequest

const _property_types_NotesRequest = Dict{Symbol,String}(Symbol("local")=>"Bool", Symbol("reply")=>"Bool", Symbol("renote")=>"Bool", Symbol("withFiles")=>"Bool", Symbol("poll")=>"Bool", Symbol("limit")=>"Int64", Symbol("sinceId")=>"String", Symbol("untilId")=>"String", )
OpenAPI.property_type(::Type{ NotesRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_NotesRequest[name]))}

function check_required(o::NotesRequest)
    true
end

function OpenAPI.validate_property(::Type{ NotesRequest }, name::Symbol, val)
    if name === Symbol("limit")
        OpenAPI.validate_param(name, "NotesRequest", :maximum, val, 100, false)
        OpenAPI.validate_param(name, "NotesRequest", :minimum, val, 1, false)
    end
    if name === Symbol("sinceId")
        OpenAPI.validate_param(name, "NotesRequest", :format, val, "misskey:id")
    end
    if name === Symbol("untilId")
        OpenAPI.validate_param(name, "NotesRequest", :format, val, "misskey:id")
    end
end
