# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""channels___update_request

    ChannelsUpdateRequest(;
        channelId=nothing,
        name=nothing,
        description=nothing,
        bannerId=nothing,
        isArchived=nothing,
        pinnedNoteIds=nothing,
        color=nothing,
        isSensitive=nothing,
        allowRenoteToExternal=nothing,
    )

    - channelId::String
    - name::String
    - description::String
    - bannerId::String
    - isArchived::Bool
    - pinnedNoteIds::Vector{String}
    - color::String
    - isSensitive::Bool
    - allowRenoteToExternal::Bool
"""
Base.@kwdef mutable struct ChannelsUpdateRequest <: OpenAPI.APIModel
    channelId::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    description::Union{Nothing, String} = nothing
    bannerId::Union{Nothing, String} = nothing
    isArchived::Union{Nothing, Bool} = nothing
    pinnedNoteIds::Union{Nothing, Vector{String}} = nothing
    color::Union{Nothing, String} = nothing
    isSensitive::Union{Nothing, Bool} = nothing
    allowRenoteToExternal::Union{Nothing, Bool} = nothing

    function ChannelsUpdateRequest(channelId, name, description, bannerId, isArchived, pinnedNoteIds, color, isSensitive, allowRenoteToExternal, )
        OpenAPI.validate_property(ChannelsUpdateRequest, Symbol("channelId"), channelId)
        OpenAPI.validate_property(ChannelsUpdateRequest, Symbol("name"), name)
        OpenAPI.validate_property(ChannelsUpdateRequest, Symbol("description"), description)
        OpenAPI.validate_property(ChannelsUpdateRequest, Symbol("bannerId"), bannerId)
        OpenAPI.validate_property(ChannelsUpdateRequest, Symbol("isArchived"), isArchived)
        OpenAPI.validate_property(ChannelsUpdateRequest, Symbol("pinnedNoteIds"), pinnedNoteIds)
        OpenAPI.validate_property(ChannelsUpdateRequest, Symbol("color"), color)
        OpenAPI.validate_property(ChannelsUpdateRequest, Symbol("isSensitive"), isSensitive)
        OpenAPI.validate_property(ChannelsUpdateRequest, Symbol("allowRenoteToExternal"), allowRenoteToExternal)
        return new(channelId, name, description, bannerId, isArchived, pinnedNoteIds, color, isSensitive, allowRenoteToExternal, )
    end
end # type ChannelsUpdateRequest

const _property_types_ChannelsUpdateRequest = Dict{Symbol,String}(Symbol("channelId")=>"String", Symbol("name")=>"String", Symbol("description")=>"String", Symbol("bannerId")=>"String", Symbol("isArchived")=>"Bool", Symbol("pinnedNoteIds")=>"Vector{String}", Symbol("color")=>"String", Symbol("isSensitive")=>"Bool", Symbol("allowRenoteToExternal")=>"Bool", )
OpenAPI.property_type(::Type{ ChannelsUpdateRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ChannelsUpdateRequest[name]))}

function check_required(o::ChannelsUpdateRequest)
    o.channelId === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ ChannelsUpdateRequest }, name::Symbol, val)
    if name === Symbol("channelId")
        OpenAPI.validate_param(name, "ChannelsUpdateRequest", :format, val, "misskey:id")
    end
    if name === Symbol("name")
        OpenAPI.validate_param(name, "ChannelsUpdateRequest", :maxLength, val, 128)
        OpenAPI.validate_param(name, "ChannelsUpdateRequest", :minLength, val, 1)
    end
    if name === Symbol("description")
        OpenAPI.validate_param(name, "ChannelsUpdateRequest", :maxLength, val, 2048)
        OpenAPI.validate_param(name, "ChannelsUpdateRequest", :minLength, val, 1)
    end
    if name === Symbol("bannerId")
        OpenAPI.validate_param(name, "ChannelsUpdateRequest", :format, val, "misskey:id")
    end
    if name === Symbol("color")
        OpenAPI.validate_param(name, "ChannelsUpdateRequest", :maxLength, val, 16)
        OpenAPI.validate_param(name, "ChannelsUpdateRequest", :minLength, val, 1)
    end
end
