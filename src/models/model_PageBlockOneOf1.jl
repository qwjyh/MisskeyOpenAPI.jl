# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""PageBlock_oneOf_1

    PageBlockOneOf1(;
        id=nothing,
        type=nothing,
        title=nothing,
        children=nothing,
    )

    - id::String
    - type::String
    - title::String
    - children::Vector{Any}
"""
Base.@kwdef mutable struct PageBlockOneOf1 <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    type::Union{Nothing, String} = nothing
    title::Union{Nothing, String} = nothing
    children::Union{Nothing, Vector{Any}} = nothing

    function PageBlockOneOf1(id, type, title, children, )
        OpenAPI.validate_property(PageBlockOneOf1, Symbol("id"), id)
        OpenAPI.validate_property(PageBlockOneOf1, Symbol("type"), type)
        OpenAPI.validate_property(PageBlockOneOf1, Symbol("title"), title)
        OpenAPI.validate_property(PageBlockOneOf1, Symbol("children"), children)
        return new(id, type, title, children, )
    end
end # type PageBlockOneOf1

const _property_types_PageBlockOneOf1 = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("type")=>"String", Symbol("title")=>"String", Symbol("children")=>"Vector{Any}", )
OpenAPI.property_type(::Type{ PageBlockOneOf1 }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_PageBlockOneOf1[name]))}

function check_required(o::PageBlockOneOf1)
    o.id === nothing && (return false)
    o.type === nothing && (return false)
    o.title === nothing && (return false)
    o.children === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ PageBlockOneOf1 }, name::Symbol, val)
    if name === Symbol("type")
        OpenAPI.validate_param(name, "PageBlockOneOf1", :enum, val, ["section"])
    end
end
