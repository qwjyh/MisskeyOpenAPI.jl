# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""i___2fa___register_key_200_response_excludeCredentials_inner

    I2faRegisterKey200ResponseExcludeCredentialsInner(;
        id=nothing,
        type=nothing,
        transports=nothing,
    )

    - id::String
    - type::String
    - transports::Vector{String}
"""
Base.@kwdef mutable struct I2faRegisterKey200ResponseExcludeCredentialsInner <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    type::Union{Nothing, String} = nothing
    transports::Union{Nothing, Vector{String}} = nothing

    function I2faRegisterKey200ResponseExcludeCredentialsInner(id, type, transports, )
        OpenAPI.validate_property(I2faRegisterKey200ResponseExcludeCredentialsInner, Symbol("id"), id)
        OpenAPI.validate_property(I2faRegisterKey200ResponseExcludeCredentialsInner, Symbol("type"), type)
        OpenAPI.validate_property(I2faRegisterKey200ResponseExcludeCredentialsInner, Symbol("transports"), transports)
        return new(id, type, transports, )
    end
end # type I2faRegisterKey200ResponseExcludeCredentialsInner

const _property_types_I2faRegisterKey200ResponseExcludeCredentialsInner = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("type")=>"String", Symbol("transports")=>"Vector{String}", )
OpenAPI.property_type(::Type{ I2faRegisterKey200ResponseExcludeCredentialsInner }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_I2faRegisterKey200ResponseExcludeCredentialsInner[name]))}

function check_required(o::I2faRegisterKey200ResponseExcludeCredentialsInner)
    o.id === nothing && (return false)
    o.type === nothing && (return false)
    o.transports === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ I2faRegisterKey200ResponseExcludeCredentialsInner }, name::Symbol, val)
    if name === Symbol("transports")
        OpenAPI.validate_param(name, "I2faRegisterKey200ResponseExcludeCredentialsInner", :enum, val, [])
    end
end
