# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""users___lists___get_memberships_request

    UsersListsGetMembershipsRequest(;
        listId=nothing,
        forPublic=false,
        limit=30,
        sinceId=nothing,
        untilId=nothing,
    )

    - listId::String
    - forPublic::Bool
    - limit::Int64
    - sinceId::String
    - untilId::String
"""
Base.@kwdef mutable struct UsersListsGetMembershipsRequest <: OpenAPI.APIModel
    listId::Union{Nothing, String} = nothing
    forPublic::Union{Nothing, Bool} = false
    limit::Union{Nothing, Int64} = 30
    sinceId::Union{Nothing, String} = nothing
    untilId::Union{Nothing, String} = nothing

    function UsersListsGetMembershipsRequest(listId, forPublic, limit, sinceId, untilId, )
        OpenAPI.validate_property(UsersListsGetMembershipsRequest, Symbol("listId"), listId)
        OpenAPI.validate_property(UsersListsGetMembershipsRequest, Symbol("forPublic"), forPublic)
        OpenAPI.validate_property(UsersListsGetMembershipsRequest, Symbol("limit"), limit)
        OpenAPI.validate_property(UsersListsGetMembershipsRequest, Symbol("sinceId"), sinceId)
        OpenAPI.validate_property(UsersListsGetMembershipsRequest, Symbol("untilId"), untilId)
        return new(listId, forPublic, limit, sinceId, untilId, )
    end
end # type UsersListsGetMembershipsRequest

const _property_types_UsersListsGetMembershipsRequest = Dict{Symbol,String}(Symbol("listId")=>"String", Symbol("forPublic")=>"Bool", Symbol("limit")=>"Int64", Symbol("sinceId")=>"String", Symbol("untilId")=>"String", )
OpenAPI.property_type(::Type{ UsersListsGetMembershipsRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_UsersListsGetMembershipsRequest[name]))}

function check_required(o::UsersListsGetMembershipsRequest)
    o.listId === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ UsersListsGetMembershipsRequest }, name::Symbol, val)
    if name === Symbol("listId")
        OpenAPI.validate_param(name, "UsersListsGetMembershipsRequest", :format, val, "misskey:id")
    end
    if name === Symbol("limit")
        OpenAPI.validate_param(name, "UsersListsGetMembershipsRequest", :maximum, val, 100, false)
        OpenAPI.validate_param(name, "UsersListsGetMembershipsRequest", :minimum, val, 1, false)
    end
    if name === Symbol("sinceId")
        OpenAPI.validate_param(name, "UsersListsGetMembershipsRequest", :format, val, "misskey:id")
    end
    if name === Symbol("untilId")
        OpenAPI.validate_param(name, "UsersListsGetMembershipsRequest", :format, val, "misskey:id")
    end
end
