# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""RenoteMuting

    RenoteMuting(;
        id=nothing,
        createdAt=nothing,
        muteeId=nothing,
        mutee=nothing,
    )

    - id::String
    - createdAt::ZonedDateTime
    - muteeId::String
    - mutee::UserDetailedNotMe
"""
Base.@kwdef mutable struct RenoteMuting <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    createdAt::Union{Nothing, ZonedDateTime} = nothing
    muteeId::Union{Nothing, String} = nothing
    mutee = nothing # spec type: Union{ Nothing, UserDetailedNotMe }

    function RenoteMuting(id, createdAt, muteeId, mutee, )
        OpenAPI.validate_property(RenoteMuting, Symbol("id"), id)
        OpenAPI.validate_property(RenoteMuting, Symbol("createdAt"), createdAt)
        OpenAPI.validate_property(RenoteMuting, Symbol("muteeId"), muteeId)
        OpenAPI.validate_property(RenoteMuting, Symbol("mutee"), mutee)
        return new(id, createdAt, muteeId, mutee, )
    end
end # type RenoteMuting

const _property_types_RenoteMuting = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("createdAt")=>"ZonedDateTime", Symbol("muteeId")=>"String", Symbol("mutee")=>"UserDetailedNotMe", )
OpenAPI.property_type(::Type{ RenoteMuting }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_RenoteMuting[name]))}

function check_required(o::RenoteMuting)
    o.id === nothing && (return false)
    o.createdAt === nothing && (return false)
    o.muteeId === nothing && (return false)
    o.mutee === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ RenoteMuting }, name::Symbol, val)
    if name === Symbol("id")
        OpenAPI.validate_param(name, "RenoteMuting", :format, val, "id")
    end
    if name === Symbol("createdAt")
        OpenAPI.validate_param(name, "RenoteMuting", :format, val, "date-time")
    end
    if name === Symbol("muteeId")
        OpenAPI.validate_param(name, "RenoteMuting", :format, val, "id")
    end
end
