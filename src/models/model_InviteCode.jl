# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""InviteCode

    InviteCode(;
        id=nothing,
        code=nothing,
        expiresAt=nothing,
        createdAt=nothing,
        createdBy=nothing,
        usedBy=nothing,
        usedAt=nothing,
        used=nothing,
    )

    - id::String
    - code::String
    - expiresAt::ZonedDateTime
    - createdAt::ZonedDateTime
    - createdBy::UserLite
    - usedBy::UserLite
    - usedAt::ZonedDateTime
    - used::Bool
"""
Base.@kwdef mutable struct InviteCode <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    code::Union{Nothing, String} = nothing
    expiresAt::Union{Nothing, ZonedDateTime} = nothing
    createdAt::Union{Nothing, ZonedDateTime} = nothing
    createdBy = nothing # spec type: Union{ Nothing, UserLite }
    usedBy = nothing # spec type: Union{ Nothing, UserLite }
    usedAt::Union{Nothing, ZonedDateTime} = nothing
    used::Union{Nothing, Bool} = nothing

    function InviteCode(id, code, expiresAt, createdAt, createdBy, usedBy, usedAt, used, )
        OpenAPI.validate_property(InviteCode, Symbol("id"), id)
        OpenAPI.validate_property(InviteCode, Symbol("code"), code)
        OpenAPI.validate_property(InviteCode, Symbol("expiresAt"), expiresAt)
        OpenAPI.validate_property(InviteCode, Symbol("createdAt"), createdAt)
        OpenAPI.validate_property(InviteCode, Symbol("createdBy"), createdBy)
        OpenAPI.validate_property(InviteCode, Symbol("usedBy"), usedBy)
        OpenAPI.validate_property(InviteCode, Symbol("usedAt"), usedAt)
        OpenAPI.validate_property(InviteCode, Symbol("used"), used)
        return new(id, code, expiresAt, createdAt, createdBy, usedBy, usedAt, used, )
    end
end # type InviteCode

const _property_types_InviteCode = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("code")=>"String", Symbol("expiresAt")=>"ZonedDateTime", Symbol("createdAt")=>"ZonedDateTime", Symbol("createdBy")=>"UserLite", Symbol("usedBy")=>"UserLite", Symbol("usedAt")=>"ZonedDateTime", Symbol("used")=>"Bool", )
OpenAPI.property_type(::Type{ InviteCode }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_InviteCode[name]))}

function check_required(o::InviteCode)
    o.id === nothing && (return false)
    o.code === nothing && (return false)
    o.expiresAt === nothing && (return false)
    o.createdAt === nothing && (return false)
    o.createdBy === nothing && (return false)
    o.usedBy === nothing && (return false)
    o.usedAt === nothing && (return false)
    o.used === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ InviteCode }, name::Symbol, val)
    if name === Symbol("id")
        OpenAPI.validate_param(name, "InviteCode", :format, val, "id")
    end
    if name === Symbol("expiresAt")
        OpenAPI.validate_param(name, "InviteCode", :format, val, "date-time")
    end
    if name === Symbol("createdAt")
        OpenAPI.validate_param(name, "InviteCode", :format, val, "date-time")
    end
    if name === Symbol("usedAt")
        OpenAPI.validate_param(name, "InviteCode", :format, val, "date-time")
    end
end
