# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""NoteReaction

    NoteReaction(;
        id=nothing,
        createdAt=nothing,
        user=nothing,
        type=nothing,
    )

    - id::String
    - createdAt::ZonedDateTime
    - user::UserLite
    - type::String
"""
Base.@kwdef mutable struct NoteReaction <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    createdAt::Union{Nothing, ZonedDateTime} = nothing
    user = nothing # spec type: Union{ Nothing, UserLite }
    type::Union{Nothing, String} = nothing

    function NoteReaction(id, createdAt, user, type, )
        OpenAPI.validate_property(NoteReaction, Symbol("id"), id)
        OpenAPI.validate_property(NoteReaction, Symbol("createdAt"), createdAt)
        OpenAPI.validate_property(NoteReaction, Symbol("user"), user)
        OpenAPI.validate_property(NoteReaction, Symbol("type"), type)
        return new(id, createdAt, user, type, )
    end
end # type NoteReaction

const _property_types_NoteReaction = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("createdAt")=>"ZonedDateTime", Symbol("user")=>"UserLite", Symbol("type")=>"String", )
OpenAPI.property_type(::Type{ NoteReaction }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_NoteReaction[name]))}

function check_required(o::NoteReaction)
    o.id === nothing && (return false)
    o.createdAt === nothing && (return false)
    o.user === nothing && (return false)
    o.type === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ NoteReaction }, name::Symbol, val)
    if name === Symbol("id")
        OpenAPI.validate_param(name, "NoteReaction", :format, val, "id")
    end
    if name === Symbol("createdAt")
        OpenAPI.validate_param(name, "NoteReaction", :format, val, "date-time")
    end
end
