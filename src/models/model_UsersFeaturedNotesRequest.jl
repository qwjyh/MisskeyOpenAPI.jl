# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""users___featured_notes_request

    UsersFeaturedNotesRequest(;
        limit=10,
        untilId=nothing,
        userId=nothing,
    )

    - limit::Int64
    - untilId::String
    - userId::String
"""
Base.@kwdef mutable struct UsersFeaturedNotesRequest <: OpenAPI.APIModel
    limit::Union{Nothing, Int64} = 10
    untilId::Union{Nothing, String} = nothing
    userId::Union{Nothing, String} = nothing

    function UsersFeaturedNotesRequest(limit, untilId, userId, )
        OpenAPI.validate_property(UsersFeaturedNotesRequest, Symbol("limit"), limit)
        OpenAPI.validate_property(UsersFeaturedNotesRequest, Symbol("untilId"), untilId)
        OpenAPI.validate_property(UsersFeaturedNotesRequest, Symbol("userId"), userId)
        return new(limit, untilId, userId, )
    end
end # type UsersFeaturedNotesRequest

const _property_types_UsersFeaturedNotesRequest = Dict{Symbol,String}(Symbol("limit")=>"Int64", Symbol("untilId")=>"String", Symbol("userId")=>"String", )
OpenAPI.property_type(::Type{ UsersFeaturedNotesRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_UsersFeaturedNotesRequest[name]))}

function check_required(o::UsersFeaturedNotesRequest)
    o.userId === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ UsersFeaturedNotesRequest }, name::Symbol, val)
    if name === Symbol("limit")
        OpenAPI.validate_param(name, "UsersFeaturedNotesRequest", :maximum, val, 100, false)
        OpenAPI.validate_param(name, "UsersFeaturedNotesRequest", :minimum, val, 1, false)
    end
    if name === Symbol("untilId")
        OpenAPI.validate_param(name, "UsersFeaturedNotesRequest", :format, val, "misskey:id")
    end
    if name === Symbol("userId")
        OpenAPI.validate_param(name, "UsersFeaturedNotesRequest", :format, val, "misskey:id")
    end
end
