# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""i___registry___set_request

    IRegistrySetRequest(;
        key=nothing,
        value=nothing,
        scope=nothing,
        domain=nothing,
    )

    - key::String
    - value::Any
    - scope::Vector{String}
    - domain::String
"""
Base.@kwdef mutable struct IRegistrySetRequest <: OpenAPI.APIModel
    key::Union{Nothing, String} = nothing
    value::Union{Nothing, Any} = nothing
    scope::Union{Nothing, Vector{String}} = nothing
    domain::Union{Nothing, String} = nothing

    function IRegistrySetRequest(key, value, scope, domain, )
        OpenAPI.validate_property(IRegistrySetRequest, Symbol("key"), key)
        OpenAPI.validate_property(IRegistrySetRequest, Symbol("value"), value)
        OpenAPI.validate_property(IRegistrySetRequest, Symbol("scope"), scope)
        OpenAPI.validate_property(IRegistrySetRequest, Symbol("domain"), domain)
        return new(key, value, scope, domain, )
    end
end # type IRegistrySetRequest

const _property_types_IRegistrySetRequest = Dict{Symbol,String}(Symbol("key")=>"String", Symbol("value")=>"Any", Symbol("scope")=>"Vector{String}", Symbol("domain")=>"String", )
OpenAPI.property_type(::Type{ IRegistrySetRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IRegistrySetRequest[name]))}

function check_required(o::IRegistrySetRequest)
    o.key === nothing && (return false)
    o.value === nothing && (return false)
    o.scope === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ IRegistrySetRequest }, name::Symbol, val)
    if name === Symbol("key")
        OpenAPI.validate_param(name, "IRegistrySetRequest", :minLength, val, 1)
    end
end
