# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""users_request

    UsersRequest(;
        limit=10,
        offset=0,
        sort=nothing,
        state="all",
        origin="local",
        hostname=nothing,
    )

    - limit::Int64
    - offset::Int64
    - sort::String
    - state::String
    - origin::String
    - hostname::String : The local host is represented with &#x60;null&#x60;.
"""
Base.@kwdef mutable struct UsersRequest <: OpenAPI.APIModel
    limit::Union{Nothing, Int64} = 10
    offset::Union{Nothing, Int64} = 0
    sort::Union{Nothing, String} = nothing
    state::Union{Nothing, String} = "all"
    origin::Union{Nothing, String} = "local"
    hostname::Union{Nothing, String} = nothing

    function UsersRequest(limit, offset, sort, state, origin, hostname, )
        OpenAPI.validate_property(UsersRequest, Symbol("limit"), limit)
        OpenAPI.validate_property(UsersRequest, Symbol("offset"), offset)
        OpenAPI.validate_property(UsersRequest, Symbol("sort"), sort)
        OpenAPI.validate_property(UsersRequest, Symbol("state"), state)
        OpenAPI.validate_property(UsersRequest, Symbol("origin"), origin)
        OpenAPI.validate_property(UsersRequest, Symbol("hostname"), hostname)
        return new(limit, offset, sort, state, origin, hostname, )
    end
end # type UsersRequest

const _property_types_UsersRequest = Dict{Symbol,String}(Symbol("limit")=>"Int64", Symbol("offset")=>"Int64", Symbol("sort")=>"String", Symbol("state")=>"String", Symbol("origin")=>"String", Symbol("hostname")=>"String", )
OpenAPI.property_type(::Type{ UsersRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_UsersRequest[name]))}

function check_required(o::UsersRequest)
    true
end

function OpenAPI.validate_property(::Type{ UsersRequest }, name::Symbol, val)
    if name === Symbol("limit")
        OpenAPI.validate_param(name, "UsersRequest", :maximum, val, 100, false)
        OpenAPI.validate_param(name, "UsersRequest", :minimum, val, 1, false)
    end
    if name === Symbol("sort")
        OpenAPI.validate_param(name, "UsersRequest", :enum, val, ["+follower", "-follower", "+createdAt", "-createdAt", "+updatedAt", "-updatedAt"])
    end
    if name === Symbol("state")
        OpenAPI.validate_param(name, "UsersRequest", :enum, val, ["all", "alive"])
    end
    if name === Symbol("origin")
        OpenAPI.validate_param(name, "UsersRequest", :enum, val, ["combined", "local", "remote"])
    end
end
