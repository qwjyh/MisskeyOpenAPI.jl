# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""i___2fa___register_200_response

    I2faRegister200Response(;
        qr=nothing,
        url=nothing,
        secret=nothing,
        label=nothing,
        issuer=nothing,
    )

    - qr::String
    - url::String
    - secret::String
    - label::String
    - issuer::String
"""
Base.@kwdef mutable struct I2faRegister200Response <: OpenAPI.APIModel
    qr::Union{Nothing, String} = nothing
    url::Union{Nothing, String} = nothing
    secret::Union{Nothing, String} = nothing
    label::Union{Nothing, String} = nothing
    issuer::Union{Nothing, String} = nothing

    function I2faRegister200Response(qr, url, secret, label, issuer, )
        OpenAPI.validate_property(I2faRegister200Response, Symbol("qr"), qr)
        OpenAPI.validate_property(I2faRegister200Response, Symbol("url"), url)
        OpenAPI.validate_property(I2faRegister200Response, Symbol("secret"), secret)
        OpenAPI.validate_property(I2faRegister200Response, Symbol("label"), label)
        OpenAPI.validate_property(I2faRegister200Response, Symbol("issuer"), issuer)
        return new(qr, url, secret, label, issuer, )
    end
end # type I2faRegister200Response

const _property_types_I2faRegister200Response = Dict{Symbol,String}(Symbol("qr")=>"String", Symbol("url")=>"String", Symbol("secret")=>"String", Symbol("label")=>"String", Symbol("issuer")=>"String", )
OpenAPI.property_type(::Type{ I2faRegister200Response }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_I2faRegister200Response[name]))}

function check_required(o::I2faRegister200Response)
    o.qr === nothing && (return false)
    o.url === nothing && (return false)
    o.secret === nothing && (return false)
    o.label === nothing && (return false)
    o.issuer === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ I2faRegister200Response }, name::Symbol, val)
end
