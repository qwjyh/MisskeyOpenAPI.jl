# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""clips___create_request

    ClipsCreateRequest(;
        name=nothing,
        isPublic=false,
        description=nothing,
    )

    - name::String
    - isPublic::Bool
    - description::String
"""
Base.@kwdef mutable struct ClipsCreateRequest <: OpenAPI.APIModel
    name::Union{Nothing, String} = nothing
    isPublic::Union{Nothing, Bool} = false
    description::Union{Nothing, String} = nothing

    function ClipsCreateRequest(name, isPublic, description, )
        OpenAPI.validate_property(ClipsCreateRequest, Symbol("name"), name)
        OpenAPI.validate_property(ClipsCreateRequest, Symbol("isPublic"), isPublic)
        OpenAPI.validate_property(ClipsCreateRequest, Symbol("description"), description)
        return new(name, isPublic, description, )
    end
end # type ClipsCreateRequest

const _property_types_ClipsCreateRequest = Dict{Symbol,String}(Symbol("name")=>"String", Symbol("isPublic")=>"Bool", Symbol("description")=>"String", )
OpenAPI.property_type(::Type{ ClipsCreateRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ClipsCreateRequest[name]))}

function check_required(o::ClipsCreateRequest)
    o.name === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ ClipsCreateRequest }, name::Symbol, val)
    if name === Symbol("name")
        OpenAPI.validate_param(name, "ClipsCreateRequest", :maxLength, val, 100)
        OpenAPI.validate_param(name, "ClipsCreateRequest", :minLength, val, 1)
    end
    if name === Symbol("description")
        OpenAPI.validate_param(name, "ClipsCreateRequest", :maxLength, val, 2048)
        OpenAPI.validate_param(name, "ClipsCreateRequest", :minLength, val, 1)
    end
end
