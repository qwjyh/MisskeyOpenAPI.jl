# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""charts___user___drive_request

    ChartsUserDriveRequest(;
        span=nothing,
        limit=30,
        offset=nothing,
        userId=nothing,
    )

    - span::String
    - limit::Int64
    - offset::Int64
    - userId::String
"""
Base.@kwdef mutable struct ChartsUserDriveRequest <: OpenAPI.APIModel
    span::Union{Nothing, String} = nothing
    limit::Union{Nothing, Int64} = 30
    offset::Union{Nothing, Int64} = nothing
    userId::Union{Nothing, String} = nothing

    function ChartsUserDriveRequest(span, limit, offset, userId, )
        OpenAPI.validate_property(ChartsUserDriveRequest, Symbol("span"), span)
        OpenAPI.validate_property(ChartsUserDriveRequest, Symbol("limit"), limit)
        OpenAPI.validate_property(ChartsUserDriveRequest, Symbol("offset"), offset)
        OpenAPI.validate_property(ChartsUserDriveRequest, Symbol("userId"), userId)
        return new(span, limit, offset, userId, )
    end
end # type ChartsUserDriveRequest

const _property_types_ChartsUserDriveRequest = Dict{Symbol,String}(Symbol("span")=>"String", Symbol("limit")=>"Int64", Symbol("offset")=>"Int64", Symbol("userId")=>"String", )
OpenAPI.property_type(::Type{ ChartsUserDriveRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ChartsUserDriveRequest[name]))}

function check_required(o::ChartsUserDriveRequest)
    o.span === nothing && (return false)
    o.userId === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ ChartsUserDriveRequest }, name::Symbol, val)
    if name === Symbol("span")
        OpenAPI.validate_param(name, "ChartsUserDriveRequest", :enum, val, ["day", "hour"])
    end
    if name === Symbol("limit")
        OpenAPI.validate_param(name, "ChartsUserDriveRequest", :maximum, val, 500, false)
        OpenAPI.validate_param(name, "ChartsUserDriveRequest", :minimum, val, 1, false)
    end
    if name === Symbol("userId")
        OpenAPI.validate_param(name, "ChartsUserDriveRequest", :format, val, "misskey:id")
    end
end
