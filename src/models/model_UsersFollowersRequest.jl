# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""users___followers_request

    UsersFollowersRequest(;
        sinceId=nothing,
        untilId=nothing,
        limit=10,
        userId=nothing,
        username=nothing,
        host=nothing,
    )

    - sinceId::String
    - untilId::String
    - limit::Int64
    - userId::String
    - username::String
    - host::String : The local host is represented with &#x60;null&#x60;.
"""
Base.@kwdef mutable struct UsersFollowersRequest <: OpenAPI.APIModel
    sinceId::Union{Nothing, String} = nothing
    untilId::Union{Nothing, String} = nothing
    limit::Union{Nothing, Int64} = 10
    userId::Union{Nothing, String} = nothing
    username::Union{Nothing, String} = nothing
    host::Union{Nothing, String} = nothing

    function UsersFollowersRequest(sinceId, untilId, limit, userId, username, host, )
        OpenAPI.validate_property(UsersFollowersRequest, Symbol("sinceId"), sinceId)
        OpenAPI.validate_property(UsersFollowersRequest, Symbol("untilId"), untilId)
        OpenAPI.validate_property(UsersFollowersRequest, Symbol("limit"), limit)
        OpenAPI.validate_property(UsersFollowersRequest, Symbol("userId"), userId)
        OpenAPI.validate_property(UsersFollowersRequest, Symbol("username"), username)
        OpenAPI.validate_property(UsersFollowersRequest, Symbol("host"), host)
        return new(sinceId, untilId, limit, userId, username, host, )
    end
end # type UsersFollowersRequest

const _property_types_UsersFollowersRequest = Dict{Symbol,String}(Symbol("sinceId")=>"String", Symbol("untilId")=>"String", Symbol("limit")=>"Int64", Symbol("userId")=>"String", Symbol("username")=>"String", Symbol("host")=>"String", )
OpenAPI.property_type(::Type{ UsersFollowersRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_UsersFollowersRequest[name]))}

function check_required(o::UsersFollowersRequest)
    true
end

function OpenAPI.validate_property(::Type{ UsersFollowersRequest }, name::Symbol, val)
    if name === Symbol("sinceId")
        OpenAPI.validate_param(name, "UsersFollowersRequest", :format, val, "misskey:id")
    end
    if name === Symbol("untilId")
        OpenAPI.validate_param(name, "UsersFollowersRequest", :format, val, "misskey:id")
    end
    if name === Symbol("limit")
        OpenAPI.validate_param(name, "UsersFollowersRequest", :maximum, val, 100, false)
        OpenAPI.validate_param(name, "UsersFollowersRequest", :minimum, val, 1, false)
    end
    if name === Symbol("userId")
        OpenAPI.validate_param(name, "UsersFollowersRequest", :format, val, "misskey:id")
    end
end
