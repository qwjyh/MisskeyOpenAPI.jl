# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""charts___active_users_request

    ChartsActiveUsersRequest(;
        span=nothing,
        limit=30,
        offset=null,
    )

    - span::String
    - limit::Int64
    - offset::Int64
"""
Base.@kwdef mutable struct ChartsActiveUsersRequest <: OpenAPI.APIModel
    span::Union{Nothing, String} = nothing
    limit::Union{Nothing, Int64} = 30
    offset::Union{Nothing, Int64} = null

    function ChartsActiveUsersRequest(span, limit, offset, )
        OpenAPI.validate_property(ChartsActiveUsersRequest, Symbol("span"), span)
        OpenAPI.validate_property(ChartsActiveUsersRequest, Symbol("limit"), limit)
        OpenAPI.validate_property(ChartsActiveUsersRequest, Symbol("offset"), offset)
        return new(span, limit, offset, )
    end
end # type ChartsActiveUsersRequest

const _property_types_ChartsActiveUsersRequest = Dict{Symbol,String}(Symbol("span")=>"String", Symbol("limit")=>"Int64", Symbol("offset")=>"Int64", )
OpenAPI.property_type(::Type{ ChartsActiveUsersRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ChartsActiveUsersRequest[name]))}

function check_required(o::ChartsActiveUsersRequest)
    o.span === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ ChartsActiveUsersRequest }, name::Symbol, val)
    if name === Symbol("span")
        OpenAPI.validate_param(name, "ChartsActiveUsersRequest", :enum, val, ["day", "hour"])
    end
    if name === Symbol("limit")
        OpenAPI.validate_param(name, "ChartsActiveUsersRequest", :maximum, val, 500, false)
        OpenAPI.validate_param(name, "ChartsActiveUsersRequest", :minimum, val, 1, false)
    end
end
