# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Note_poll_choices_inner

    NotePollChoicesInner(;
        isVoted=nothing,
        text=nothing,
        votes=nothing,
    )

    - isVoted::Bool
    - text::String
    - votes::Float64
"""
Base.@kwdef mutable struct NotePollChoicesInner <: OpenAPI.APIModel
    isVoted::Union{Nothing, Bool} = nothing
    text::Union{Nothing, String} = nothing
    votes::Union{Nothing, Float64} = nothing

    function NotePollChoicesInner(isVoted, text, votes, )
        OpenAPI.validate_property(NotePollChoicesInner, Symbol("isVoted"), isVoted)
        OpenAPI.validate_property(NotePollChoicesInner, Symbol("text"), text)
        OpenAPI.validate_property(NotePollChoicesInner, Symbol("votes"), votes)
        return new(isVoted, text, votes, )
    end
end # type NotePollChoicesInner

const _property_types_NotePollChoicesInner = Dict{Symbol,String}(Symbol("isVoted")=>"Bool", Symbol("text")=>"String", Symbol("votes")=>"Float64", )
OpenAPI.property_type(::Type{ NotePollChoicesInner }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_NotePollChoicesInner[name]))}

function check_required(o::NotePollChoicesInner)
    o.isVoted === nothing && (return false)
    o.text === nothing && (return false)
    o.votes === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ NotePollChoicesInner }, name::Symbol, val)
end
