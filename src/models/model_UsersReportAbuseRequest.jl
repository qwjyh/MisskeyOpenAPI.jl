# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""users___report_abuse_request

    UsersReportAbuseRequest(;
        userId=nothing,
        comment=nothing,
    )

    - userId::String
    - comment::String
"""
Base.@kwdef mutable struct UsersReportAbuseRequest <: OpenAPI.APIModel
    userId::Union{Nothing, String} = nothing
    comment::Union{Nothing, String} = nothing

    function UsersReportAbuseRequest(userId, comment, )
        OpenAPI.validate_property(UsersReportAbuseRequest, Symbol("userId"), userId)
        OpenAPI.validate_property(UsersReportAbuseRequest, Symbol("comment"), comment)
        return new(userId, comment, )
    end
end # type UsersReportAbuseRequest

const _property_types_UsersReportAbuseRequest = Dict{Symbol,String}(Symbol("userId")=>"String", Symbol("comment")=>"String", )
OpenAPI.property_type(::Type{ UsersReportAbuseRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_UsersReportAbuseRequest[name]))}

function check_required(o::UsersReportAbuseRequest)
    o.userId === nothing && (return false)
    o.comment === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ UsersReportAbuseRequest }, name::Symbol, val)
    if name === Symbol("userId")
        OpenAPI.validate_param(name, "UsersReportAbuseRequest", :format, val, "misskey:id")
    end
    if name === Symbol("comment")
        OpenAPI.validate_param(name, "UsersReportAbuseRequest", :maxLength, val, 2048)
        OpenAPI.validate_param(name, "UsersReportAbuseRequest", :minLength, val, 1)
    end
end
