# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""EmojiSimple

    EmojiSimple(;
        aliases=nothing,
        name=nothing,
        category=nothing,
        url=nothing,
        localOnly=nothing,
        isSensitive=nothing,
        roleIdsThatCanBeUsedThisEmojiAsReaction=nothing,
    )

    - aliases::Vector{String}
    - name::String
    - category::String
    - url::String
    - localOnly::Bool
    - isSensitive::Bool
    - roleIdsThatCanBeUsedThisEmojiAsReaction::Vector{String}
"""
Base.@kwdef mutable struct EmojiSimple <: OpenAPI.APIModel
    aliases::Union{Nothing, Vector{String}} = nothing
    name::Union{Nothing, String} = nothing
    category::Union{Nothing, String} = nothing
    url::Union{Nothing, String} = nothing
    localOnly::Union{Nothing, Bool} = nothing
    isSensitive::Union{Nothing, Bool} = nothing
    roleIdsThatCanBeUsedThisEmojiAsReaction::Union{Nothing, Vector{String}} = nothing

    function EmojiSimple(aliases, name, category, url, localOnly, isSensitive, roleIdsThatCanBeUsedThisEmojiAsReaction, )
        OpenAPI.validate_property(EmojiSimple, Symbol("aliases"), aliases)
        OpenAPI.validate_property(EmojiSimple, Symbol("name"), name)
        OpenAPI.validate_property(EmojiSimple, Symbol("category"), category)
        OpenAPI.validate_property(EmojiSimple, Symbol("url"), url)
        OpenAPI.validate_property(EmojiSimple, Symbol("localOnly"), localOnly)
        OpenAPI.validate_property(EmojiSimple, Symbol("isSensitive"), isSensitive)
        OpenAPI.validate_property(EmojiSimple, Symbol("roleIdsThatCanBeUsedThisEmojiAsReaction"), roleIdsThatCanBeUsedThisEmojiAsReaction)
        return new(aliases, name, category, url, localOnly, isSensitive, roleIdsThatCanBeUsedThisEmojiAsReaction, )
    end
end # type EmojiSimple

const _property_types_EmojiSimple = Dict{Symbol,String}(Symbol("aliases")=>"Vector{String}", Symbol("name")=>"String", Symbol("category")=>"String", Symbol("url")=>"String", Symbol("localOnly")=>"Bool", Symbol("isSensitive")=>"Bool", Symbol("roleIdsThatCanBeUsedThisEmojiAsReaction")=>"Vector{String}", )
OpenAPI.property_type(::Type{ EmojiSimple }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_EmojiSimple[name]))}

function check_required(o::EmojiSimple)
    o.aliases === nothing && (return false)
    o.name === nothing && (return false)
    o.category === nothing && (return false)
    o.url === nothing && (return false)
    o.localOnly === nothing && (return false)
    o.isSensitive === nothing && (return false)
    o.roleIdsThatCanBeUsedThisEmojiAsReaction === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ EmojiSimple }, name::Symbol, val)
end
