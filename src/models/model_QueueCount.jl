# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""QueueCount

    QueueCount(;
        waiting=nothing,
        active=nothing,
        completed=nothing,
        failed=nothing,
        delayed=nothing,
    )

    - waiting::Float64
    - active::Float64
    - completed::Float64
    - failed::Float64
    - delayed::Float64
"""
Base.@kwdef mutable struct QueueCount <: OpenAPI.APIModel
    waiting::Union{Nothing, Float64} = nothing
    active::Union{Nothing, Float64} = nothing
    completed::Union{Nothing, Float64} = nothing
    failed::Union{Nothing, Float64} = nothing
    delayed::Union{Nothing, Float64} = nothing

    function QueueCount(waiting, active, completed, failed, delayed, )
        OpenAPI.validate_property(QueueCount, Symbol("waiting"), waiting)
        OpenAPI.validate_property(QueueCount, Symbol("active"), active)
        OpenAPI.validate_property(QueueCount, Symbol("completed"), completed)
        OpenAPI.validate_property(QueueCount, Symbol("failed"), failed)
        OpenAPI.validate_property(QueueCount, Symbol("delayed"), delayed)
        return new(waiting, active, completed, failed, delayed, )
    end
end # type QueueCount

const _property_types_QueueCount = Dict{Symbol,String}(Symbol("waiting")=>"Float64", Symbol("active")=>"Float64", Symbol("completed")=>"Float64", Symbol("failed")=>"Float64", Symbol("delayed")=>"Float64", )
OpenAPI.property_type(::Type{ QueueCount }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_QueueCount[name]))}

function check_required(o::QueueCount)
    o.waiting === nothing && (return false)
    o.active === nothing && (return false)
    o.completed === nothing && (return false)
    o.failed === nothing && (return false)
    o.delayed === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ QueueCount }, name::Symbol, val)
end
