# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""auth___session___generate_200_response

    AuthSessionGenerate200Response(;
        token=nothing,
        url=nothing,
    )

    - token::String
    - url::String
"""
Base.@kwdef mutable struct AuthSessionGenerate200Response <: OpenAPI.APIModel
    token::Union{Nothing, String} = nothing
    url::Union{Nothing, String} = nothing

    function AuthSessionGenerate200Response(token, url, )
        OpenAPI.validate_property(AuthSessionGenerate200Response, Symbol("token"), token)
        OpenAPI.validate_property(AuthSessionGenerate200Response, Symbol("url"), url)
        return new(token, url, )
    end
end # type AuthSessionGenerate200Response

const _property_types_AuthSessionGenerate200Response = Dict{Symbol,String}(Symbol("token")=>"String", Symbol("url")=>"String", )
OpenAPI.property_type(::Type{ AuthSessionGenerate200Response }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_AuthSessionGenerate200Response[name]))}

function check_required(o::AuthSessionGenerate200Response)
    o.token === nothing && (return false)
    o.url === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ AuthSessionGenerate200Response }, name::Symbol, val)
    if name === Symbol("url")
        OpenAPI.validate_param(name, "AuthSessionGenerate200Response", :format, val, "url")
    end
end
