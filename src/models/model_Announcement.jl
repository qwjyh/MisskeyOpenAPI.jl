# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Announcement

    Announcement(;
        id=nothing,
        createdAt=nothing,
        updatedAt=nothing,
        text=nothing,
        title=nothing,
        imageUrl=nothing,
        icon=nothing,
        display=nothing,
        needConfirmationToRead=nothing,
        silence=nothing,
        forYou=nothing,
        isRead=nothing,
    )

    - id::String
    - createdAt::ZonedDateTime
    - updatedAt::ZonedDateTime
    - text::String
    - title::String
    - imageUrl::String
    - icon::String
    - display::String
    - needConfirmationToRead::Bool
    - silence::Bool
    - forYou::Bool
    - isRead::Bool
"""
Base.@kwdef mutable struct Announcement <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    createdAt::Union{Nothing, ZonedDateTime} = nothing
    updatedAt::Union{Nothing, ZonedDateTime} = nothing
    text::Union{Nothing, String} = nothing
    title::Union{Nothing, String} = nothing
    imageUrl::Union{Nothing, String} = nothing
    icon::Union{Nothing, String} = nothing
    display::Union{Nothing, String} = nothing
    needConfirmationToRead::Union{Nothing, Bool} = nothing
    silence::Union{Nothing, Bool} = nothing
    forYou::Union{Nothing, Bool} = nothing
    isRead::Union{Nothing, Bool} = nothing

    function Announcement(id, createdAt, updatedAt, text, title, imageUrl, icon, display, needConfirmationToRead, silence, forYou, isRead, )
        OpenAPI.validate_property(Announcement, Symbol("id"), id)
        OpenAPI.validate_property(Announcement, Symbol("createdAt"), createdAt)
        OpenAPI.validate_property(Announcement, Symbol("updatedAt"), updatedAt)
        OpenAPI.validate_property(Announcement, Symbol("text"), text)
        OpenAPI.validate_property(Announcement, Symbol("title"), title)
        OpenAPI.validate_property(Announcement, Symbol("imageUrl"), imageUrl)
        OpenAPI.validate_property(Announcement, Symbol("icon"), icon)
        OpenAPI.validate_property(Announcement, Symbol("display"), display)
        OpenAPI.validate_property(Announcement, Symbol("needConfirmationToRead"), needConfirmationToRead)
        OpenAPI.validate_property(Announcement, Symbol("silence"), silence)
        OpenAPI.validate_property(Announcement, Symbol("forYou"), forYou)
        OpenAPI.validate_property(Announcement, Symbol("isRead"), isRead)
        return new(id, createdAt, updatedAt, text, title, imageUrl, icon, display, needConfirmationToRead, silence, forYou, isRead, )
    end
end # type Announcement

const _property_types_Announcement = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("createdAt")=>"ZonedDateTime", Symbol("updatedAt")=>"ZonedDateTime", Symbol("text")=>"String", Symbol("title")=>"String", Symbol("imageUrl")=>"String", Symbol("icon")=>"String", Symbol("display")=>"String", Symbol("needConfirmationToRead")=>"Bool", Symbol("silence")=>"Bool", Symbol("forYou")=>"Bool", Symbol("isRead")=>"Bool", )
OpenAPI.property_type(::Type{ Announcement }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Announcement[name]))}

function check_required(o::Announcement)
    o.id === nothing && (return false)
    o.createdAt === nothing && (return false)
    o.updatedAt === nothing && (return false)
    o.text === nothing && (return false)
    o.title === nothing && (return false)
    o.imageUrl === nothing && (return false)
    o.icon === nothing && (return false)
    o.display === nothing && (return false)
    o.needConfirmationToRead === nothing && (return false)
    o.silence === nothing && (return false)
    o.forYou === nothing && (return false)
    o.isRead === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ Announcement }, name::Symbol, val)
    if name === Symbol("id")
        OpenAPI.validate_param(name, "Announcement", :format, val, "id")
    end
    if name === Symbol("createdAt")
        OpenAPI.validate_param(name, "Announcement", :format, val, "date-time")
    end
    if name === Symbol("updatedAt")
        OpenAPI.validate_param(name, "Announcement", :format, val, "date-time")
    end
    if name === Symbol("icon")
        OpenAPI.validate_param(name, "Announcement", :enum, val, ["info", "warning", "error", "success"])
    end
    if name === Symbol("display")
        OpenAPI.validate_param(name, "Announcement", :enum, val, ["dialog", "normal", "banner"])
    end
end
