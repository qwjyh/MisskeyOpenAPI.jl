# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""admin___resolve_abuse_user_report_request

    AdminResolveAbuseUserReportRequest(;
        reportId=nothing,
        forward=false,
    )

    - reportId::String
    - forward::Bool
"""
Base.@kwdef mutable struct AdminResolveAbuseUserReportRequest <: OpenAPI.APIModel
    reportId::Union{Nothing, String} = nothing
    forward::Union{Nothing, Bool} = false

    function AdminResolveAbuseUserReportRequest(reportId, forward, )
        OpenAPI.validate_property(AdminResolveAbuseUserReportRequest, Symbol("reportId"), reportId)
        OpenAPI.validate_property(AdminResolveAbuseUserReportRequest, Symbol("forward"), forward)
        return new(reportId, forward, )
    end
end # type AdminResolveAbuseUserReportRequest

const _property_types_AdminResolveAbuseUserReportRequest = Dict{Symbol,String}(Symbol("reportId")=>"String", Symbol("forward")=>"Bool", )
OpenAPI.property_type(::Type{ AdminResolveAbuseUserReportRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_AdminResolveAbuseUserReportRequest[name]))}

function check_required(o::AdminResolveAbuseUserReportRequest)
    o.reportId === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ AdminResolveAbuseUserReportRequest }, name::Symbol, val)
    if name === Symbol("reportId")
        OpenAPI.validate_param(name, "AdminResolveAbuseUserReportRequest", :format, val, "misskey:id")
    end
end
