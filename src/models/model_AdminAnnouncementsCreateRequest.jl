# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""admin___announcements___create_request

    AdminAnnouncementsCreateRequest(;
        title=nothing,
        text=nothing,
        imageUrl=nothing,
        icon="info",
        display="normal",
        forExistingUsers=false,
        silence=false,
        needConfirmationToRead=false,
        userId="null",
    )

    - title::String
    - text::String
    - imageUrl::String
    - icon::String
    - display::String
    - forExistingUsers::Bool
    - silence::Bool
    - needConfirmationToRead::Bool
    - userId::String
"""
Base.@kwdef mutable struct AdminAnnouncementsCreateRequest <: OpenAPI.APIModel
    title::Union{Nothing, String} = nothing
    text::Union{Nothing, String} = nothing
    imageUrl::Union{Nothing, String} = nothing
    icon::Union{Nothing, String} = "info"
    display::Union{Nothing, String} = "normal"
    forExistingUsers::Union{Nothing, Bool} = false
    silence::Union{Nothing, Bool} = false
    needConfirmationToRead::Union{Nothing, Bool} = false
    userId::Union{Nothing, String} = "null"

    function AdminAnnouncementsCreateRequest(title, text, imageUrl, icon, display, forExistingUsers, silence, needConfirmationToRead, userId, )
        OpenAPI.validate_property(AdminAnnouncementsCreateRequest, Symbol("title"), title)
        OpenAPI.validate_property(AdminAnnouncementsCreateRequest, Symbol("text"), text)
        OpenAPI.validate_property(AdminAnnouncementsCreateRequest, Symbol("imageUrl"), imageUrl)
        OpenAPI.validate_property(AdminAnnouncementsCreateRequest, Symbol("icon"), icon)
        OpenAPI.validate_property(AdminAnnouncementsCreateRequest, Symbol("display"), display)
        OpenAPI.validate_property(AdminAnnouncementsCreateRequest, Symbol("forExistingUsers"), forExistingUsers)
        OpenAPI.validate_property(AdminAnnouncementsCreateRequest, Symbol("silence"), silence)
        OpenAPI.validate_property(AdminAnnouncementsCreateRequest, Symbol("needConfirmationToRead"), needConfirmationToRead)
        OpenAPI.validate_property(AdminAnnouncementsCreateRequest, Symbol("userId"), userId)
        return new(title, text, imageUrl, icon, display, forExistingUsers, silence, needConfirmationToRead, userId, )
    end
end # type AdminAnnouncementsCreateRequest

const _property_types_AdminAnnouncementsCreateRequest = Dict{Symbol,String}(Symbol("title")=>"String", Symbol("text")=>"String", Symbol("imageUrl")=>"String", Symbol("icon")=>"String", Symbol("display")=>"String", Symbol("forExistingUsers")=>"Bool", Symbol("silence")=>"Bool", Symbol("needConfirmationToRead")=>"Bool", Symbol("userId")=>"String", )
OpenAPI.property_type(::Type{ AdminAnnouncementsCreateRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_AdminAnnouncementsCreateRequest[name]))}

function check_required(o::AdminAnnouncementsCreateRequest)
    o.title === nothing && (return false)
    o.text === nothing && (return false)
    o.imageUrl === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ AdminAnnouncementsCreateRequest }, name::Symbol, val)
    if name === Symbol("title")
        OpenAPI.validate_param(name, "AdminAnnouncementsCreateRequest", :minLength, val, 1)
    end
    if name === Symbol("text")
        OpenAPI.validate_param(name, "AdminAnnouncementsCreateRequest", :minLength, val, 1)
    end
    if name === Symbol("imageUrl")
        OpenAPI.validate_param(name, "AdminAnnouncementsCreateRequest", :minLength, val, 1)
    end
    if name === Symbol("icon")
        OpenAPI.validate_param(name, "AdminAnnouncementsCreateRequest", :enum, val, ["info", "warning", "error", "success"])
    end
    if name === Symbol("display")
        OpenAPI.validate_param(name, "AdminAnnouncementsCreateRequest", :enum, val, ["normal", "banner", "dialog"])
    end
    if name === Symbol("userId")
        OpenAPI.validate_param(name, "AdminAnnouncementsCreateRequest", :format, val, "misskey:id")
    end
end
