# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""admin___drive___files_request

    AdminDriveFilesRequest(;
        limit=10,
        sinceId=nothing,
        untilId=nothing,
        userId=nothing,
        type=nothing,
        origin="local",
        hostname="null",
    )

    - limit::Int64
    - sinceId::String
    - untilId::String
    - userId::String
    - type::String
    - origin::String
    - hostname::String : The local host is represented with &#x60;null&#x60;.
"""
Base.@kwdef mutable struct AdminDriveFilesRequest <: OpenAPI.APIModel
    limit::Union{Nothing, Int64} = 10
    sinceId::Union{Nothing, String} = nothing
    untilId::Union{Nothing, String} = nothing
    userId::Union{Nothing, String} = nothing
    type::Union{Nothing, String} = nothing
    origin::Union{Nothing, String} = "local"
    hostname::Union{Nothing, String} = "null"

    function AdminDriveFilesRequest(limit, sinceId, untilId, userId, type, origin, hostname, )
        OpenAPI.validate_property(AdminDriveFilesRequest, Symbol("limit"), limit)
        OpenAPI.validate_property(AdminDriveFilesRequest, Symbol("sinceId"), sinceId)
        OpenAPI.validate_property(AdminDriveFilesRequest, Symbol("untilId"), untilId)
        OpenAPI.validate_property(AdminDriveFilesRequest, Symbol("userId"), userId)
        OpenAPI.validate_property(AdminDriveFilesRequest, Symbol("type"), type)
        OpenAPI.validate_property(AdminDriveFilesRequest, Symbol("origin"), origin)
        OpenAPI.validate_property(AdminDriveFilesRequest, Symbol("hostname"), hostname)
        return new(limit, sinceId, untilId, userId, type, origin, hostname, )
    end
end # type AdminDriveFilesRequest

const _property_types_AdminDriveFilesRequest = Dict{Symbol,String}(Symbol("limit")=>"Int64", Symbol("sinceId")=>"String", Symbol("untilId")=>"String", Symbol("userId")=>"String", Symbol("type")=>"String", Symbol("origin")=>"String", Symbol("hostname")=>"String", )
OpenAPI.property_type(::Type{ AdminDriveFilesRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_AdminDriveFilesRequest[name]))}

function check_required(o::AdminDriveFilesRequest)
    true
end

function OpenAPI.validate_property(::Type{ AdminDriveFilesRequest }, name::Symbol, val)
    if name === Symbol("limit")
        OpenAPI.validate_param(name, "AdminDriveFilesRequest", :maximum, val, 100, false)
        OpenAPI.validate_param(name, "AdminDriveFilesRequest", :minimum, val, 1, false)
    end
    if name === Symbol("sinceId")
        OpenAPI.validate_param(name, "AdminDriveFilesRequest", :format, val, "misskey:id")
    end
    if name === Symbol("untilId")
        OpenAPI.validate_param(name, "AdminDriveFilesRequest", :format, val, "misskey:id")
    end
    if name === Symbol("userId")
        OpenAPI.validate_param(name, "AdminDriveFilesRequest", :format, val, "misskey:id")
    end
    if name === Symbol("type")
        OpenAPI.validate_param(name, "AdminDriveFilesRequest", :pattern, val, r"^[a-zA-Z0-9\/\-*]+$")
    end
    if name === Symbol("origin")
        OpenAPI.validate_param(name, "AdminDriveFilesRequest", :enum, val, ["combined", "local", "remote"])
    end
end
