# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""i___webhooks___create_200_response

    IWebhooksCreate200Response(;
        id=nothing,
        userId=nothing,
        name=nothing,
        on=nothing,
        url=nothing,
        secret=nothing,
        active=nothing,
        latestSentAt=nothing,
        latestStatus=nothing,
    )

    - id::String
    - userId::String
    - name::String
    - on::Vector{String}
    - url::String
    - secret::String
    - active::Bool
    - latestSentAt::ZonedDateTime
    - latestStatus::Int64
"""
Base.@kwdef mutable struct IWebhooksCreate200Response <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    userId::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    on::Union{Nothing, Vector{String}} = nothing
    url::Union{Nothing, String} = nothing
    secret::Union{Nothing, String} = nothing
    active::Union{Nothing, Bool} = nothing
    latestSentAt::Union{Nothing, ZonedDateTime} = nothing
    latestStatus::Union{Nothing, Int64} = nothing

    function IWebhooksCreate200Response(id, userId, name, on, url, secret, active, latestSentAt, latestStatus, )
        OpenAPI.validate_property(IWebhooksCreate200Response, Symbol("id"), id)
        OpenAPI.validate_property(IWebhooksCreate200Response, Symbol("userId"), userId)
        OpenAPI.validate_property(IWebhooksCreate200Response, Symbol("name"), name)
        OpenAPI.validate_property(IWebhooksCreate200Response, Symbol("on"), on)
        OpenAPI.validate_property(IWebhooksCreate200Response, Symbol("url"), url)
        OpenAPI.validate_property(IWebhooksCreate200Response, Symbol("secret"), secret)
        OpenAPI.validate_property(IWebhooksCreate200Response, Symbol("active"), active)
        OpenAPI.validate_property(IWebhooksCreate200Response, Symbol("latestSentAt"), latestSentAt)
        OpenAPI.validate_property(IWebhooksCreate200Response, Symbol("latestStatus"), latestStatus)
        return new(id, userId, name, on, url, secret, active, latestSentAt, latestStatus, )
    end
end # type IWebhooksCreate200Response

const _property_types_IWebhooksCreate200Response = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("userId")=>"String", Symbol("name")=>"String", Symbol("on")=>"Vector{String}", Symbol("url")=>"String", Symbol("secret")=>"String", Symbol("active")=>"Bool", Symbol("latestSentAt")=>"ZonedDateTime", Symbol("latestStatus")=>"Int64", )
OpenAPI.property_type(::Type{ IWebhooksCreate200Response }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IWebhooksCreate200Response[name]))}

function check_required(o::IWebhooksCreate200Response)
    o.id === nothing && (return false)
    o.userId === nothing && (return false)
    o.name === nothing && (return false)
    o.on === nothing && (return false)
    o.url === nothing && (return false)
    o.secret === nothing && (return false)
    o.active === nothing && (return false)
    o.latestSentAt === nothing && (return false)
    o.latestStatus === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ IWebhooksCreate200Response }, name::Symbol, val)
    if name === Symbol("id")
        OpenAPI.validate_param(name, "IWebhooksCreate200Response", :format, val, "misskey:id")
    end
    if name === Symbol("userId")
        OpenAPI.validate_param(name, "IWebhooksCreate200Response", :format, val, "misskey:id")
    end
    if name === Symbol("on")
        OpenAPI.validate_param(name, "IWebhooksCreate200Response", :enum, val, [])
    end
    if name === Symbol("latestSentAt")
        OpenAPI.validate_param(name, "IWebhooksCreate200Response", :format, val, "date-time")
    end
end
