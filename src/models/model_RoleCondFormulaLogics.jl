# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""RoleCondFormulaLogics

    RoleCondFormulaLogics(;
        id=nothing,
        type=nothing,
        values=nothing,
    )

    - id::String
    - type::String
    - values::Vector{RoleCondFormulaValue}
"""
Base.@kwdef mutable struct RoleCondFormulaLogics <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    type::Union{Nothing, String} = nothing
    values::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{RoleCondFormulaValue} }

    function RoleCondFormulaLogics(id, type, values, )
        OpenAPI.validate_property(RoleCondFormulaLogics, Symbol("id"), id)
        OpenAPI.validate_property(RoleCondFormulaLogics, Symbol("type"), type)
        OpenAPI.validate_property(RoleCondFormulaLogics, Symbol("values"), values)
        return new(id, type, values, )
    end
end # type RoleCondFormulaLogics

const _property_types_RoleCondFormulaLogics = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("type")=>"String", Symbol("values")=>"Vector{RoleCondFormulaValue}", )
OpenAPI.property_type(::Type{ RoleCondFormulaLogics }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_RoleCondFormulaLogics[name]))}

function check_required(o::RoleCondFormulaLogics)
    o.id === nothing && (return false)
    o.type === nothing && (return false)
    o.values === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ RoleCondFormulaLogics }, name::Symbol, val)
    if name === Symbol("type")
        OpenAPI.validate_param(name, "RoleCondFormulaLogics", :enum, val, ["and", "or"])
    end
end
