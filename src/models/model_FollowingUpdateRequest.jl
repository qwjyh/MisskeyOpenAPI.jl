# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""following___update_request

    FollowingUpdateRequest(;
        userId=nothing,
        notify=nothing,
        withReplies=nothing,
    )

    - userId::String
    - notify::String
    - withReplies::Bool
"""
Base.@kwdef mutable struct FollowingUpdateRequest <: OpenAPI.APIModel
    userId::Union{Nothing, String} = nothing
    notify::Union{Nothing, String} = nothing
    withReplies::Union{Nothing, Bool} = nothing

    function FollowingUpdateRequest(userId, notify, withReplies, )
        OpenAPI.validate_property(FollowingUpdateRequest, Symbol("userId"), userId)
        OpenAPI.validate_property(FollowingUpdateRequest, Symbol("notify"), notify)
        OpenAPI.validate_property(FollowingUpdateRequest, Symbol("withReplies"), withReplies)
        return new(userId, notify, withReplies, )
    end
end # type FollowingUpdateRequest

const _property_types_FollowingUpdateRequest = Dict{Symbol,String}(Symbol("userId")=>"String", Symbol("notify")=>"String", Symbol("withReplies")=>"Bool", )
OpenAPI.property_type(::Type{ FollowingUpdateRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_FollowingUpdateRequest[name]))}

function check_required(o::FollowingUpdateRequest)
    o.userId === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ FollowingUpdateRequest }, name::Symbol, val)
    if name === Symbol("userId")
        OpenAPI.validate_param(name, "FollowingUpdateRequest", :format, val, "misskey:id")
    end
    if name === Symbol("notify")
        OpenAPI.validate_param(name, "FollowingUpdateRequest", :enum, val, ["normal", "none"])
    end
end
