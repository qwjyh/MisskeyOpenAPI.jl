# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""i___change_password_request

    IChangePasswordRequest(;
        currentPassword=nothing,
        newPassword=nothing,
        token=nothing,
    )

    - currentPassword::String
    - newPassword::String
    - token::String
"""
Base.@kwdef mutable struct IChangePasswordRequest <: OpenAPI.APIModel
    currentPassword::Union{Nothing, String} = nothing
    newPassword::Union{Nothing, String} = nothing
    token::Union{Nothing, String} = nothing

    function IChangePasswordRequest(currentPassword, newPassword, token, )
        OpenAPI.validate_property(IChangePasswordRequest, Symbol("currentPassword"), currentPassword)
        OpenAPI.validate_property(IChangePasswordRequest, Symbol("newPassword"), newPassword)
        OpenAPI.validate_property(IChangePasswordRequest, Symbol("token"), token)
        return new(currentPassword, newPassword, token, )
    end
end # type IChangePasswordRequest

const _property_types_IChangePasswordRequest = Dict{Symbol,String}(Symbol("currentPassword")=>"String", Symbol("newPassword")=>"String", Symbol("token")=>"String", )
OpenAPI.property_type(::Type{ IChangePasswordRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IChangePasswordRequest[name]))}

function check_required(o::IChangePasswordRequest)
    o.currentPassword === nothing && (return false)
    o.newPassword === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ IChangePasswordRequest }, name::Symbol, val)
    if name === Symbol("newPassword")
        OpenAPI.validate_param(name, "IChangePasswordRequest", :minLength, val, 1)
    end
end
