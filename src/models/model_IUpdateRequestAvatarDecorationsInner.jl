# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""i___update_request_avatarDecorations_inner

    IUpdateRequestAvatarDecorationsInner(;
        id=nothing,
        angle=nothing,
        flipH=nothing,
        offsetX=nothing,
        offsetY=nothing,
    )

    - id::String
    - angle::Float64
    - flipH::Bool
    - offsetX::Float64
    - offsetY::Float64
"""
Base.@kwdef mutable struct IUpdateRequestAvatarDecorationsInner <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    angle::Union{Nothing, Float64} = nothing
    flipH::Union{Nothing, Bool} = nothing
    offsetX::Union{Nothing, Float64} = nothing
    offsetY::Union{Nothing, Float64} = nothing

    function IUpdateRequestAvatarDecorationsInner(id, angle, flipH, offsetX, offsetY, )
        OpenAPI.validate_property(IUpdateRequestAvatarDecorationsInner, Symbol("id"), id)
        OpenAPI.validate_property(IUpdateRequestAvatarDecorationsInner, Symbol("angle"), angle)
        OpenAPI.validate_property(IUpdateRequestAvatarDecorationsInner, Symbol("flipH"), flipH)
        OpenAPI.validate_property(IUpdateRequestAvatarDecorationsInner, Symbol("offsetX"), offsetX)
        OpenAPI.validate_property(IUpdateRequestAvatarDecorationsInner, Symbol("offsetY"), offsetY)
        return new(id, angle, flipH, offsetX, offsetY, )
    end
end # type IUpdateRequestAvatarDecorationsInner

const _property_types_IUpdateRequestAvatarDecorationsInner = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("angle")=>"Float64", Symbol("flipH")=>"Bool", Symbol("offsetX")=>"Float64", Symbol("offsetY")=>"Float64", )
OpenAPI.property_type(::Type{ IUpdateRequestAvatarDecorationsInner }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IUpdateRequestAvatarDecorationsInner[name]))}

function check_required(o::IUpdateRequestAvatarDecorationsInner)
    o.id === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ IUpdateRequestAvatarDecorationsInner }, name::Symbol, val)
    if name === Symbol("id")
        OpenAPI.validate_param(name, "IUpdateRequestAvatarDecorationsInner", :format, val, "misskey:id")
    end
    if name === Symbol("angle")
        OpenAPI.validate_param(name, "IUpdateRequestAvatarDecorationsInner", :maximum, val, 0.5, false)
        OpenAPI.validate_param(name, "IUpdateRequestAvatarDecorationsInner", :minimum, val, -0.5, false)
    end
    if name === Symbol("offsetX")
        OpenAPI.validate_param(name, "IUpdateRequestAvatarDecorationsInner", :maximum, val, 0.25, false)
        OpenAPI.validate_param(name, "IUpdateRequestAvatarDecorationsInner", :minimum, val, -0.25, false)
    end
    if name === Symbol("offsetY")
        OpenAPI.validate_param(name, "IUpdateRequestAvatarDecorationsInner", :maximum, val, 0.25, false)
        OpenAPI.validate_param(name, "IUpdateRequestAvatarDecorationsInner", :minimum, val, -0.25, false)
    end
end
