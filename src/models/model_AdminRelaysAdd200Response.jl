# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""admin___relays___add_200_response

    AdminRelaysAdd200Response(;
        id=nothing,
        inbox=nothing,
        status="requesting",
    )

    - id::String
    - inbox::String
    - status::String
"""
Base.@kwdef mutable struct AdminRelaysAdd200Response <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    inbox::Union{Nothing, String} = nothing
    status::Union{Nothing, String} = "requesting"

    function AdminRelaysAdd200Response(id, inbox, status, )
        OpenAPI.validate_property(AdminRelaysAdd200Response, Symbol("id"), id)
        OpenAPI.validate_property(AdminRelaysAdd200Response, Symbol("inbox"), inbox)
        OpenAPI.validate_property(AdminRelaysAdd200Response, Symbol("status"), status)
        return new(id, inbox, status, )
    end
end # type AdminRelaysAdd200Response

const _property_types_AdminRelaysAdd200Response = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("inbox")=>"String", Symbol("status")=>"String", )
OpenAPI.property_type(::Type{ AdminRelaysAdd200Response }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_AdminRelaysAdd200Response[name]))}

function check_required(o::AdminRelaysAdd200Response)
    o.id === nothing && (return false)
    o.inbox === nothing && (return false)
    o.status === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ AdminRelaysAdd200Response }, name::Symbol, val)
    if name === Symbol("id")
        OpenAPI.validate_param(name, "AdminRelaysAdd200Response", :format, val, "id")
    end
    if name === Symbol("inbox")
        OpenAPI.validate_param(name, "AdminRelaysAdd200Response", :format, val, "url")
    end
    if name === Symbol("status")
        OpenAPI.validate_param(name, "AdminRelaysAdd200Response", :enum, val, ["requesting", "accepted", "rejected"])
    end
end
