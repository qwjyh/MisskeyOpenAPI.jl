# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""charts___user___pv_200_response_upv

    ChartsUserPv200ResponseUpv(;
        user=nothing,
        visitor=nothing,
    )

    - user::Vector{Float64}
    - visitor::Vector{Float64}
"""
Base.@kwdef mutable struct ChartsUserPv200ResponseUpv <: OpenAPI.APIModel
    user::Union{Nothing, Vector{Float64}} = nothing
    visitor::Union{Nothing, Vector{Float64}} = nothing

    function ChartsUserPv200ResponseUpv(user, visitor, )
        OpenAPI.validate_property(ChartsUserPv200ResponseUpv, Symbol("user"), user)
        OpenAPI.validate_property(ChartsUserPv200ResponseUpv, Symbol("visitor"), visitor)
        return new(user, visitor, )
    end
end # type ChartsUserPv200ResponseUpv

const _property_types_ChartsUserPv200ResponseUpv = Dict{Symbol,String}(Symbol("user")=>"Vector{Float64}", Symbol("visitor")=>"Vector{Float64}", )
OpenAPI.property_type(::Type{ ChartsUserPv200ResponseUpv }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ChartsUserPv200ResponseUpv[name]))}

function check_required(o::ChartsUserPv200ResponseUpv)
    o.user === nothing && (return false)
    o.visitor === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ ChartsUserPv200ResponseUpv }, name::Symbol, val)
end
