# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""admin___avatar_decorations___create_request

    AdminAvatarDecorationsCreateRequest(;
        name=nothing,
        description=nothing,
        url=nothing,
        roleIdsThatCanBeUsedThisDecoration=nothing,
    )

    - name::String
    - description::String
    - url::String
    - roleIdsThatCanBeUsedThisDecoration::Vector{String}
"""
Base.@kwdef mutable struct AdminAvatarDecorationsCreateRequest <: OpenAPI.APIModel
    name::Union{Nothing, String} = nothing
    description::Union{Nothing, String} = nothing
    url::Union{Nothing, String} = nothing
    roleIdsThatCanBeUsedThisDecoration::Union{Nothing, Vector{String}} = nothing

    function AdminAvatarDecorationsCreateRequest(name, description, url, roleIdsThatCanBeUsedThisDecoration, )
        OpenAPI.validate_property(AdminAvatarDecorationsCreateRequest, Symbol("name"), name)
        OpenAPI.validate_property(AdminAvatarDecorationsCreateRequest, Symbol("description"), description)
        OpenAPI.validate_property(AdminAvatarDecorationsCreateRequest, Symbol("url"), url)
        OpenAPI.validate_property(AdminAvatarDecorationsCreateRequest, Symbol("roleIdsThatCanBeUsedThisDecoration"), roleIdsThatCanBeUsedThisDecoration)
        return new(name, description, url, roleIdsThatCanBeUsedThisDecoration, )
    end
end # type AdminAvatarDecorationsCreateRequest

const _property_types_AdminAvatarDecorationsCreateRequest = Dict{Symbol,String}(Symbol("name")=>"String", Symbol("description")=>"String", Symbol("url")=>"String", Symbol("roleIdsThatCanBeUsedThisDecoration")=>"Vector{String}", )
OpenAPI.property_type(::Type{ AdminAvatarDecorationsCreateRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_AdminAvatarDecorationsCreateRequest[name]))}

function check_required(o::AdminAvatarDecorationsCreateRequest)
    o.name === nothing && (return false)
    o.description === nothing && (return false)
    o.url === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ AdminAvatarDecorationsCreateRequest }, name::Symbol, val)
    if name === Symbol("name")
        OpenAPI.validate_param(name, "AdminAvatarDecorationsCreateRequest", :minLength, val, 1)
    end
    if name === Symbol("url")
        OpenAPI.validate_param(name, "AdminAvatarDecorationsCreateRequest", :minLength, val, 1)
    end
end
