# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""charts___user___drive_200_response

    ChartsUserDrive200Response(;
        totalCount=nothing,
        totalSize=nothing,
        incCount=nothing,
        incSize=nothing,
        decCount=nothing,
        decSize=nothing,
    )

    - totalCount::Vector{Float64}
    - totalSize::Vector{Float64}
    - incCount::Vector{Float64}
    - incSize::Vector{Float64}
    - decCount::Vector{Float64}
    - decSize::Vector{Float64}
"""
Base.@kwdef mutable struct ChartsUserDrive200Response <: OpenAPI.APIModel
    totalCount::Union{Nothing, Vector{Float64}} = nothing
    totalSize::Union{Nothing, Vector{Float64}} = nothing
    incCount::Union{Nothing, Vector{Float64}} = nothing
    incSize::Union{Nothing, Vector{Float64}} = nothing
    decCount::Union{Nothing, Vector{Float64}} = nothing
    decSize::Union{Nothing, Vector{Float64}} = nothing

    function ChartsUserDrive200Response(totalCount, totalSize, incCount, incSize, decCount, decSize, )
        OpenAPI.validate_property(ChartsUserDrive200Response, Symbol("totalCount"), totalCount)
        OpenAPI.validate_property(ChartsUserDrive200Response, Symbol("totalSize"), totalSize)
        OpenAPI.validate_property(ChartsUserDrive200Response, Symbol("incCount"), incCount)
        OpenAPI.validate_property(ChartsUserDrive200Response, Symbol("incSize"), incSize)
        OpenAPI.validate_property(ChartsUserDrive200Response, Symbol("decCount"), decCount)
        OpenAPI.validate_property(ChartsUserDrive200Response, Symbol("decSize"), decSize)
        return new(totalCount, totalSize, incCount, incSize, decCount, decSize, )
    end
end # type ChartsUserDrive200Response

const _property_types_ChartsUserDrive200Response = Dict{Symbol,String}(Symbol("totalCount")=>"Vector{Float64}", Symbol("totalSize")=>"Vector{Float64}", Symbol("incCount")=>"Vector{Float64}", Symbol("incSize")=>"Vector{Float64}", Symbol("decCount")=>"Vector{Float64}", Symbol("decSize")=>"Vector{Float64}", )
OpenAPI.property_type(::Type{ ChartsUserDrive200Response }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ChartsUserDrive200Response[name]))}

function check_required(o::ChartsUserDrive200Response)
    o.totalCount === nothing && (return false)
    o.totalSize === nothing && (return false)
    o.incCount === nothing && (return false)
    o.incSize === nothing && (return false)
    o.decCount === nothing && (return false)
    o.decSize === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ ChartsUserDrive200Response }, name::Symbol, val)
end
