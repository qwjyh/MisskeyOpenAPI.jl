# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""drive___folders___update_request

    DriveFoldersUpdateRequest(;
        folderId=nothing,
        name=nothing,
        parentId=nothing,
    )

    - folderId::String
    - name::String
    - parentId::String
"""
Base.@kwdef mutable struct DriveFoldersUpdateRequest <: OpenAPI.APIModel
    folderId::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    parentId::Union{Nothing, String} = nothing

    function DriveFoldersUpdateRequest(folderId, name, parentId, )
        OpenAPI.validate_property(DriveFoldersUpdateRequest, Symbol("folderId"), folderId)
        OpenAPI.validate_property(DriveFoldersUpdateRequest, Symbol("name"), name)
        OpenAPI.validate_property(DriveFoldersUpdateRequest, Symbol("parentId"), parentId)
        return new(folderId, name, parentId, )
    end
end # type DriveFoldersUpdateRequest

const _property_types_DriveFoldersUpdateRequest = Dict{Symbol,String}(Symbol("folderId")=>"String", Symbol("name")=>"String", Symbol("parentId")=>"String", )
OpenAPI.property_type(::Type{ DriveFoldersUpdateRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_DriveFoldersUpdateRequest[name]))}

function check_required(o::DriveFoldersUpdateRequest)
    o.folderId === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ DriveFoldersUpdateRequest }, name::Symbol, val)
    if name === Symbol("folderId")
        OpenAPI.validate_param(name, "DriveFoldersUpdateRequest", :format, val, "misskey:id")
    end
    if name === Symbol("name")
        OpenAPI.validate_param(name, "DriveFoldersUpdateRequest", :maxLength, val, 200)
    end
    if name === Symbol("parentId")
        OpenAPI.validate_param(name, "DriveFoldersUpdateRequest", :format, val, "misskey:id")
    end
end
