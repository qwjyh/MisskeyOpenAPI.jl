# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""NoteFavorite

    NoteFavorite(;
        id=nothing,
        createdAt=nothing,
        note=nothing,
        noteId=nothing,
    )

    - id::String
    - createdAt::ZonedDateTime
    - note::Note
    - noteId::String
"""
Base.@kwdef mutable struct NoteFavorite <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    createdAt::Union{Nothing, ZonedDateTime} = nothing
    note = nothing # spec type: Union{ Nothing, Note }
    noteId::Union{Nothing, String} = nothing

    function NoteFavorite(id, createdAt, note, noteId, )
        OpenAPI.validate_property(NoteFavorite, Symbol("id"), id)
        OpenAPI.validate_property(NoteFavorite, Symbol("createdAt"), createdAt)
        OpenAPI.validate_property(NoteFavorite, Symbol("note"), note)
        OpenAPI.validate_property(NoteFavorite, Symbol("noteId"), noteId)
        return new(id, createdAt, note, noteId, )
    end
end # type NoteFavorite

const _property_types_NoteFavorite = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("createdAt")=>"ZonedDateTime", Symbol("note")=>"Note", Symbol("noteId")=>"String", )
OpenAPI.property_type(::Type{ NoteFavorite }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_NoteFavorite[name]))}

function check_required(o::NoteFavorite)
    o.id === nothing && (return false)
    o.createdAt === nothing && (return false)
    o.note === nothing && (return false)
    o.noteId === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ NoteFavorite }, name::Symbol, val)
    if name === Symbol("id")
        OpenAPI.validate_param(name, "NoteFavorite", :format, val, "id")
    end
    if name === Symbol("createdAt")
        OpenAPI.validate_param(name, "NoteFavorite", :format, val, "date-time")
    end
    if name === Symbol("noteId")
        OpenAPI.validate_param(name, "NoteFavorite", :format, val, "id")
    end
end
