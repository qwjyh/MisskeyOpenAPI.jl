# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Clip

    Clip(;
        id=nothing,
        createdAt=nothing,
        lastClippedAt=nothing,
        userId=nothing,
        user=nothing,
        name=nothing,
        description=nothing,
        isPublic=nothing,
        favoritedCount=nothing,
        isFavorited=nothing,
        notesCount=nothing,
    )

    - id::String
    - createdAt::ZonedDateTime
    - lastClippedAt::ZonedDateTime
    - userId::String
    - user::UserLite
    - name::String
    - description::String
    - isPublic::Bool
    - favoritedCount::Float64
    - isFavorited::Bool
    - notesCount::Int64
"""
Base.@kwdef mutable struct Clip <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    createdAt::Union{Nothing, ZonedDateTime} = nothing
    lastClippedAt::Union{Nothing, ZonedDateTime} = nothing
    userId::Union{Nothing, String} = nothing
    user = nothing # spec type: Union{ Nothing, UserLite }
    name::Union{Nothing, String} = nothing
    description::Union{Nothing, String} = nothing
    isPublic::Union{Nothing, Bool} = nothing
    favoritedCount::Union{Nothing, Float64} = nothing
    isFavorited::Union{Nothing, Bool} = nothing
    notesCount::Union{Nothing, Int64} = nothing

    function Clip(id, createdAt, lastClippedAt, userId, user, name, description, isPublic, favoritedCount, isFavorited, notesCount, )
        OpenAPI.validate_property(Clip, Symbol("id"), id)
        OpenAPI.validate_property(Clip, Symbol("createdAt"), createdAt)
        OpenAPI.validate_property(Clip, Symbol("lastClippedAt"), lastClippedAt)
        OpenAPI.validate_property(Clip, Symbol("userId"), userId)
        OpenAPI.validate_property(Clip, Symbol("user"), user)
        OpenAPI.validate_property(Clip, Symbol("name"), name)
        OpenAPI.validate_property(Clip, Symbol("description"), description)
        OpenAPI.validate_property(Clip, Symbol("isPublic"), isPublic)
        OpenAPI.validate_property(Clip, Symbol("favoritedCount"), favoritedCount)
        OpenAPI.validate_property(Clip, Symbol("isFavorited"), isFavorited)
        OpenAPI.validate_property(Clip, Symbol("notesCount"), notesCount)
        return new(id, createdAt, lastClippedAt, userId, user, name, description, isPublic, favoritedCount, isFavorited, notesCount, )
    end
end # type Clip

const _property_types_Clip = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("createdAt")=>"ZonedDateTime", Symbol("lastClippedAt")=>"ZonedDateTime", Symbol("userId")=>"String", Symbol("user")=>"UserLite", Symbol("name")=>"String", Symbol("description")=>"String", Symbol("isPublic")=>"Bool", Symbol("favoritedCount")=>"Float64", Symbol("isFavorited")=>"Bool", Symbol("notesCount")=>"Int64", )
OpenAPI.property_type(::Type{ Clip }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Clip[name]))}

function check_required(o::Clip)
    o.id === nothing && (return false)
    o.createdAt === nothing && (return false)
    o.lastClippedAt === nothing && (return false)
    o.userId === nothing && (return false)
    o.user === nothing && (return false)
    o.name === nothing && (return false)
    o.description === nothing && (return false)
    o.isPublic === nothing && (return false)
    o.favoritedCount === nothing && (return false)
    o.isFavorited === nothing && (return false)
    o.notesCount === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ Clip }, name::Symbol, val)
    if name === Symbol("id")
        OpenAPI.validate_param(name, "Clip", :format, val, "id")
    end
    if name === Symbol("createdAt")
        OpenAPI.validate_param(name, "Clip", :format, val, "date-time")
    end
    if name === Symbol("lastClippedAt")
        OpenAPI.validate_param(name, "Clip", :format, val, "date-time")
    end
    if name === Symbol("userId")
        OpenAPI.validate_param(name, "Clip", :format, val, "id")
    end
end
