# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""i___2fa___register_key_200_response

    I2faRegisterKey200Response(;
        rp=nothing,
        user=nothing,
        challenge=nothing,
        pubKeyCredParams=nothing,
        timeout=nothing,
        excludeCredentials=nothing,
        authenticatorSelection=nothing,
        attestation=nothing,
        extensions=nothing,
    )

    - rp::I2faRegisterKey200ResponseRp
    - user::I2faRegisterKey200ResponseUser
    - challenge::String
    - pubKeyCredParams::Vector{I2faRegisterKey200ResponsePubKeyCredParamsInner}
    - timeout::Float64
    - excludeCredentials::Vector{I2faRegisterKey200ResponseExcludeCredentialsInner}
    - authenticatorSelection::I2faRegisterKey200ResponseAuthenticatorSelection
    - attestation::String
    - extensions::I2faRegisterKey200ResponseExtensions
"""
Base.@kwdef mutable struct I2faRegisterKey200Response <: OpenAPI.APIModel
    rp = nothing # spec type: Union{ Nothing, I2faRegisterKey200ResponseRp }
    user = nothing # spec type: Union{ Nothing, I2faRegisterKey200ResponseUser }
    challenge::Union{Nothing, String} = nothing
    pubKeyCredParams::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{I2faRegisterKey200ResponsePubKeyCredParamsInner} }
    timeout::Union{Nothing, Float64} = nothing
    excludeCredentials::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{I2faRegisterKey200ResponseExcludeCredentialsInner} }
    authenticatorSelection = nothing # spec type: Union{ Nothing, I2faRegisterKey200ResponseAuthenticatorSelection }
    attestation::Union{Nothing, String} = nothing
    extensions = nothing # spec type: Union{ Nothing, I2faRegisterKey200ResponseExtensions }

    function I2faRegisterKey200Response(rp, user, challenge, pubKeyCredParams, timeout, excludeCredentials, authenticatorSelection, attestation, extensions, )
        OpenAPI.validate_property(I2faRegisterKey200Response, Symbol("rp"), rp)
        OpenAPI.validate_property(I2faRegisterKey200Response, Symbol("user"), user)
        OpenAPI.validate_property(I2faRegisterKey200Response, Symbol("challenge"), challenge)
        OpenAPI.validate_property(I2faRegisterKey200Response, Symbol("pubKeyCredParams"), pubKeyCredParams)
        OpenAPI.validate_property(I2faRegisterKey200Response, Symbol("timeout"), timeout)
        OpenAPI.validate_property(I2faRegisterKey200Response, Symbol("excludeCredentials"), excludeCredentials)
        OpenAPI.validate_property(I2faRegisterKey200Response, Symbol("authenticatorSelection"), authenticatorSelection)
        OpenAPI.validate_property(I2faRegisterKey200Response, Symbol("attestation"), attestation)
        OpenAPI.validate_property(I2faRegisterKey200Response, Symbol("extensions"), extensions)
        return new(rp, user, challenge, pubKeyCredParams, timeout, excludeCredentials, authenticatorSelection, attestation, extensions, )
    end
end # type I2faRegisterKey200Response

const _property_types_I2faRegisterKey200Response = Dict{Symbol,String}(Symbol("rp")=>"I2faRegisterKey200ResponseRp", Symbol("user")=>"I2faRegisterKey200ResponseUser", Symbol("challenge")=>"String", Symbol("pubKeyCredParams")=>"Vector{I2faRegisterKey200ResponsePubKeyCredParamsInner}", Symbol("timeout")=>"Float64", Symbol("excludeCredentials")=>"Vector{I2faRegisterKey200ResponseExcludeCredentialsInner}", Symbol("authenticatorSelection")=>"I2faRegisterKey200ResponseAuthenticatorSelection", Symbol("attestation")=>"String", Symbol("extensions")=>"I2faRegisterKey200ResponseExtensions", )
OpenAPI.property_type(::Type{ I2faRegisterKey200Response }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_I2faRegisterKey200Response[name]))}

function check_required(o::I2faRegisterKey200Response)
    o.rp === nothing && (return false)
    o.user === nothing && (return false)
    o.challenge === nothing && (return false)
    o.pubKeyCredParams === nothing && (return false)
    o.timeout === nothing && (return false)
    o.excludeCredentials === nothing && (return false)
    o.authenticatorSelection === nothing && (return false)
    o.attestation === nothing && (return false)
    o.extensions === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ I2faRegisterKey200Response }, name::Symbol, val)
    if name === Symbol("attestation")
        OpenAPI.validate_param(name, "I2faRegisterKey200Response", :enum, val, ["direct", "enterprise", "indirect", "none", "null"])
    end
end
