# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Note

    Note(;
        id=nothing,
        createdAt=nothing,
        deletedAt=nothing,
        text=nothing,
        cw=nothing,
        userId=nothing,
        user=nothing,
        replyId=nothing,
        renoteId=nothing,
        reply=nothing,
        renote=nothing,
        isHidden=nothing,
        visibility=nothing,
        mentions=nothing,
        visibleUserIds=nothing,
        fileIds=nothing,
        files=nothing,
        tags=nothing,
        poll=nothing,
        emojis=nothing,
        channelId=nothing,
        channel=nothing,
        localOnly=nothing,
        reactionAcceptance=nothing,
        reactionEmojis=nothing,
        reactions=nothing,
        reactionCount=nothing,
        renoteCount=nothing,
        repliesCount=nothing,
        uri=nothing,
        url=nothing,
        reactionAndUserPairCache=nothing,
        clippedCount=nothing,
        myReaction=nothing,
    )

    - id::String
    - createdAt::ZonedDateTime
    - deletedAt::ZonedDateTime
    - text::String
    - cw::String
    - userId::String
    - user::UserLite
    - replyId::String
    - renoteId::String
    - reply::Note
    - renote::Note
    - isHidden::Bool
    - visibility::String
    - mentions::Vector{String}
    - visibleUserIds::Vector{String}
    - fileIds::Vector{String}
    - files::Vector{DriveFile}
    - tags::Vector{String}
    - poll::NotePoll
    - emojis::Any
    - channelId::String
    - channel::NoteChannel
    - localOnly::Bool
    - reactionAcceptance::String
    - reactionEmojis::Any
    - reactions::Any
    - reactionCount::Float64
    - renoteCount::Float64
    - repliesCount::Float64
    - uri::String
    - url::String
    - reactionAndUserPairCache::Vector{String}
    - clippedCount::Float64
    - myReaction::String
"""
Base.@kwdef mutable struct Note <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    createdAt::Union{Nothing, ZonedDateTime} = nothing
    deletedAt::Union{Nothing, ZonedDateTime} = nothing
    text::Union{Nothing, String} = nothing
    cw::Union{Nothing, String} = nothing
    userId::Union{Nothing, String} = nothing
    user = nothing # spec type: Union{ Nothing, UserLite }
    replyId::Union{Nothing, String} = nothing
    renoteId::Union{Nothing, String} = nothing
    reply = nothing # spec type: Union{ Nothing, Note }
    renote = nothing # spec type: Union{ Nothing, Note }
    isHidden::Union{Nothing, Bool} = nothing
    visibility::Union{Nothing, String} = nothing
    mentions::Union{Nothing, Vector{String}} = nothing
    visibleUserIds::Union{Nothing, Vector{String}} = nothing
    fileIds::Union{Nothing, Vector{String}} = nothing
    files::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{DriveFile} }
    tags::Union{Nothing, Vector{String}} = nothing
    poll = nothing # spec type: Union{ Nothing, NotePoll }
    emojis::Union{Nothing, Any} = nothing
    channelId::Union{Nothing, String} = nothing
    channel = nothing # spec type: Union{ Nothing, NoteChannel }
    localOnly::Union{Nothing, Bool} = nothing
    reactionAcceptance::Union{Nothing, String} = nothing
    reactionEmojis::Union{Nothing, Any} = nothing
    reactions::Union{Nothing, Any} = nothing
    reactionCount::Union{Nothing, Float64} = nothing
    renoteCount::Union{Nothing, Float64} = nothing
    repliesCount::Union{Nothing, Float64} = nothing
    uri::Union{Nothing, String} = nothing
    url::Union{Nothing, String} = nothing
    reactionAndUserPairCache::Union{Nothing, Vector{String}} = nothing
    clippedCount::Union{Nothing, Float64} = nothing
    myReaction::Union{Nothing, String} = nothing

    function Note(id, createdAt, deletedAt, text, cw, userId, user, replyId, renoteId, reply, renote, isHidden, visibility, mentions, visibleUserIds, fileIds, files, tags, poll, emojis, channelId, channel, localOnly, reactionAcceptance, reactionEmojis, reactions, reactionCount, renoteCount, repliesCount, uri, url, reactionAndUserPairCache, clippedCount, myReaction, )
        OpenAPI.validate_property(Note, Symbol("id"), id)
        OpenAPI.validate_property(Note, Symbol("createdAt"), createdAt)
        OpenAPI.validate_property(Note, Symbol("deletedAt"), deletedAt)
        OpenAPI.validate_property(Note, Symbol("text"), text)
        OpenAPI.validate_property(Note, Symbol("cw"), cw)
        OpenAPI.validate_property(Note, Symbol("userId"), userId)
        OpenAPI.validate_property(Note, Symbol("user"), user)
        OpenAPI.validate_property(Note, Symbol("replyId"), replyId)
        OpenAPI.validate_property(Note, Symbol("renoteId"), renoteId)
        OpenAPI.validate_property(Note, Symbol("reply"), reply)
        OpenAPI.validate_property(Note, Symbol("renote"), renote)
        OpenAPI.validate_property(Note, Symbol("isHidden"), isHidden)
        OpenAPI.validate_property(Note, Symbol("visibility"), visibility)
        OpenAPI.validate_property(Note, Symbol("mentions"), mentions)
        OpenAPI.validate_property(Note, Symbol("visibleUserIds"), visibleUserIds)
        OpenAPI.validate_property(Note, Symbol("fileIds"), fileIds)
        OpenAPI.validate_property(Note, Symbol("files"), files)
        OpenAPI.validate_property(Note, Symbol("tags"), tags)
        OpenAPI.validate_property(Note, Symbol("poll"), poll)
        OpenAPI.validate_property(Note, Symbol("emojis"), emojis)
        OpenAPI.validate_property(Note, Symbol("channelId"), channelId)
        OpenAPI.validate_property(Note, Symbol("channel"), channel)
        OpenAPI.validate_property(Note, Symbol("localOnly"), localOnly)
        OpenAPI.validate_property(Note, Symbol("reactionAcceptance"), reactionAcceptance)
        OpenAPI.validate_property(Note, Symbol("reactionEmojis"), reactionEmojis)
        OpenAPI.validate_property(Note, Symbol("reactions"), reactions)
        OpenAPI.validate_property(Note, Symbol("reactionCount"), reactionCount)
        OpenAPI.validate_property(Note, Symbol("renoteCount"), renoteCount)
        OpenAPI.validate_property(Note, Symbol("repliesCount"), repliesCount)
        OpenAPI.validate_property(Note, Symbol("uri"), uri)
        OpenAPI.validate_property(Note, Symbol("url"), url)
        OpenAPI.validate_property(Note, Symbol("reactionAndUserPairCache"), reactionAndUserPairCache)
        OpenAPI.validate_property(Note, Symbol("clippedCount"), clippedCount)
        OpenAPI.validate_property(Note, Symbol("myReaction"), myReaction)
        return new(id, createdAt, deletedAt, text, cw, userId, user, replyId, renoteId, reply, renote, isHidden, visibility, mentions, visibleUserIds, fileIds, files, tags, poll, emojis, channelId, channel, localOnly, reactionAcceptance, reactionEmojis, reactions, reactionCount, renoteCount, repliesCount, uri, url, reactionAndUserPairCache, clippedCount, myReaction, )
    end
end # type Note

const _property_types_Note = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("createdAt")=>"ZonedDateTime", Symbol("deletedAt")=>"ZonedDateTime", Symbol("text")=>"String", Symbol("cw")=>"String", Symbol("userId")=>"String", Symbol("user")=>"UserLite", Symbol("replyId")=>"String", Symbol("renoteId")=>"String", Symbol("reply")=>"Note", Symbol("renote")=>"Note", Symbol("isHidden")=>"Bool", Symbol("visibility")=>"String", Symbol("mentions")=>"Vector{String}", Symbol("visibleUserIds")=>"Vector{String}", Symbol("fileIds")=>"Vector{String}", Symbol("files")=>"Vector{DriveFile}", Symbol("tags")=>"Vector{String}", Symbol("poll")=>"NotePoll", Symbol("emojis")=>"Any", Symbol("channelId")=>"String", Symbol("channel")=>"NoteChannel", Symbol("localOnly")=>"Bool", Symbol("reactionAcceptance")=>"String", Symbol("reactionEmojis")=>"Any", Symbol("reactions")=>"Any", Symbol("reactionCount")=>"Float64", Symbol("renoteCount")=>"Float64", Symbol("repliesCount")=>"Float64", Symbol("uri")=>"String", Symbol("url")=>"String", Symbol("reactionAndUserPairCache")=>"Vector{String}", Symbol("clippedCount")=>"Float64", Symbol("myReaction")=>"String", )
OpenAPI.property_type(::Type{ Note }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Note[name]))}

function check_required(o::Note)
    o.id === nothing && (return false)
    o.createdAt === nothing && (return false)
    o.deletedAt === nothing && (return false)
    o.text === nothing && (return false)
    o.cw === nothing && (return false)
    o.userId === nothing && (return false)
    o.user === nothing && (return false)
    o.replyId === nothing && (return false)
    o.renoteId === nothing && (return false)
    o.reply === nothing && (return false)
    o.renote === nothing && (return false)
    o.isHidden === nothing && (return false)
    o.visibility === nothing && (return false)
    o.mentions === nothing && (return false)
    o.visibleUserIds === nothing && (return false)
    o.fileIds === nothing && (return false)
    o.files === nothing && (return false)
    o.tags === nothing && (return false)
    o.poll === nothing && (return false)
    o.emojis === nothing && (return false)
    o.channelId === nothing && (return false)
    o.channel === nothing && (return false)
    o.localOnly === nothing && (return false)
    o.reactionAcceptance === nothing && (return false)
    o.reactionEmojis === nothing && (return false)
    o.reactions === nothing && (return false)
    o.reactionCount === nothing && (return false)
    o.renoteCount === nothing && (return false)
    o.repliesCount === nothing && (return false)
    o.uri === nothing && (return false)
    o.url === nothing && (return false)
    o.reactionAndUserPairCache === nothing && (return false)
    o.clippedCount === nothing && (return false)
    o.myReaction === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ Note }, name::Symbol, val)
    if name === Symbol("id")
        OpenAPI.validate_param(name, "Note", :format, val, "id")
    end
    if name === Symbol("createdAt")
        OpenAPI.validate_param(name, "Note", :format, val, "date-time")
    end
    if name === Symbol("deletedAt")
        OpenAPI.validate_param(name, "Note", :format, val, "date-time")
    end
    if name === Symbol("userId")
        OpenAPI.validate_param(name, "Note", :format, val, "id")
    end
    if name === Symbol("replyId")
        OpenAPI.validate_param(name, "Note", :format, val, "id")
    end
    if name === Symbol("renoteId")
        OpenAPI.validate_param(name, "Note", :format, val, "id")
    end
    if name === Symbol("visibility")
        OpenAPI.validate_param(name, "Note", :enum, val, ["public", "home", "followers", "specified"])
    end
    if name === Symbol("channelId")
        OpenAPI.validate_param(name, "Note", :format, val, "id")
    end
end
