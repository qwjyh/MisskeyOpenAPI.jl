# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""admin___abuse_user_reports_request

    AdminAbuseUserReportsRequest(;
        limit=10,
        sinceId=nothing,
        untilId=nothing,
        state="null",
        reporterOrigin="combined",
        targetUserOrigin="combined",
        forwarded=false,
    )

    - limit::Int64
    - sinceId::String
    - untilId::String
    - state::String
    - reporterOrigin::String
    - targetUserOrigin::String
    - forwarded::Bool
"""
Base.@kwdef mutable struct AdminAbuseUserReportsRequest <: OpenAPI.APIModel
    limit::Union{Nothing, Int64} = 10
    sinceId::Union{Nothing, String} = nothing
    untilId::Union{Nothing, String} = nothing
    state::Union{Nothing, String} = "null"
    reporterOrigin::Union{Nothing, String} = "combined"
    targetUserOrigin::Union{Nothing, String} = "combined"
    forwarded::Union{Nothing, Bool} = false

    function AdminAbuseUserReportsRequest(limit, sinceId, untilId, state, reporterOrigin, targetUserOrigin, forwarded, )
        OpenAPI.validate_property(AdminAbuseUserReportsRequest, Symbol("limit"), limit)
        OpenAPI.validate_property(AdminAbuseUserReportsRequest, Symbol("sinceId"), sinceId)
        OpenAPI.validate_property(AdminAbuseUserReportsRequest, Symbol("untilId"), untilId)
        OpenAPI.validate_property(AdminAbuseUserReportsRequest, Symbol("state"), state)
        OpenAPI.validate_property(AdminAbuseUserReportsRequest, Symbol("reporterOrigin"), reporterOrigin)
        OpenAPI.validate_property(AdminAbuseUserReportsRequest, Symbol("targetUserOrigin"), targetUserOrigin)
        OpenAPI.validate_property(AdminAbuseUserReportsRequest, Symbol("forwarded"), forwarded)
        return new(limit, sinceId, untilId, state, reporterOrigin, targetUserOrigin, forwarded, )
    end
end # type AdminAbuseUserReportsRequest

const _property_types_AdminAbuseUserReportsRequest = Dict{Symbol,String}(Symbol("limit")=>"Int64", Symbol("sinceId")=>"String", Symbol("untilId")=>"String", Symbol("state")=>"String", Symbol("reporterOrigin")=>"String", Symbol("targetUserOrigin")=>"String", Symbol("forwarded")=>"Bool", )
OpenAPI.property_type(::Type{ AdminAbuseUserReportsRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_AdminAbuseUserReportsRequest[name]))}

function check_required(o::AdminAbuseUserReportsRequest)
    true
end

function OpenAPI.validate_property(::Type{ AdminAbuseUserReportsRequest }, name::Symbol, val)
    if name === Symbol("limit")
        OpenAPI.validate_param(name, "AdminAbuseUserReportsRequest", :maximum, val, 100, false)
        OpenAPI.validate_param(name, "AdminAbuseUserReportsRequest", :minimum, val, 1, false)
    end
    if name === Symbol("sinceId")
        OpenAPI.validate_param(name, "AdminAbuseUserReportsRequest", :format, val, "misskey:id")
    end
    if name === Symbol("untilId")
        OpenAPI.validate_param(name, "AdminAbuseUserReportsRequest", :format, val, "misskey:id")
    end
    if name === Symbol("reporterOrigin")
        OpenAPI.validate_param(name, "AdminAbuseUserReportsRequest", :enum, val, ["combined", "local", "remote"])
    end
    if name === Symbol("targetUserOrigin")
        OpenAPI.validate_param(name, "AdminAbuseUserReportsRequest", :enum, val, ["combined", "local", "remote"])
    end
end
