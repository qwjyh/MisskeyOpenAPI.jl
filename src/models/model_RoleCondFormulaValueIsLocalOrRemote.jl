# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""RoleCondFormulaValueIsLocalOrRemote

    RoleCondFormulaValueIsLocalOrRemote(;
        id=nothing,
        type=nothing,
    )

    - id::String
    - type::String
"""
Base.@kwdef mutable struct RoleCondFormulaValueIsLocalOrRemote <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    type::Union{Nothing, String} = nothing

    function RoleCondFormulaValueIsLocalOrRemote(id, type, )
        OpenAPI.validate_property(RoleCondFormulaValueIsLocalOrRemote, Symbol("id"), id)
        OpenAPI.validate_property(RoleCondFormulaValueIsLocalOrRemote, Symbol("type"), type)
        return new(id, type, )
    end
end # type RoleCondFormulaValueIsLocalOrRemote

const _property_types_RoleCondFormulaValueIsLocalOrRemote = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("type")=>"String", )
OpenAPI.property_type(::Type{ RoleCondFormulaValueIsLocalOrRemote }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_RoleCondFormulaValueIsLocalOrRemote[name]))}

function check_required(o::RoleCondFormulaValueIsLocalOrRemote)
    o.id === nothing && (return false)
    o.type === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ RoleCondFormulaValueIsLocalOrRemote }, name::Symbol, val)
    if name === Symbol("type")
        OpenAPI.validate_param(name, "RoleCondFormulaValueIsLocalOrRemote", :enum, val, ["isLocal", "isRemote"])
    end
end
