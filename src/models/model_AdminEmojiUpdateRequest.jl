# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""admin___emoji___update_request

    AdminEmojiUpdateRequest(;
        id=nothing,
        name=nothing,
        fileId=nothing,
        category=nothing,
        aliases=nothing,
        license=nothing,
        isSensitive=nothing,
        localOnly=nothing,
        roleIdsThatCanBeUsedThisEmojiAsReaction=nothing,
    )

    - id::String
    - name::String
    - fileId::String
    - category::String : Use &#x60;null&#x60; to reset the category.
    - aliases::Vector{String}
    - license::String
    - isSensitive::Bool
    - localOnly::Bool
    - roleIdsThatCanBeUsedThisEmojiAsReaction::Vector{String}
"""
Base.@kwdef mutable struct AdminEmojiUpdateRequest <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    fileId::Union{Nothing, String} = nothing
    category::Union{Nothing, String} = nothing
    aliases::Union{Nothing, Vector{String}} = nothing
    license::Union{Nothing, String} = nothing
    isSensitive::Union{Nothing, Bool} = nothing
    localOnly::Union{Nothing, Bool} = nothing
    roleIdsThatCanBeUsedThisEmojiAsReaction::Union{Nothing, Vector{String}} = nothing

    function AdminEmojiUpdateRequest(id, name, fileId, category, aliases, license, isSensitive, localOnly, roleIdsThatCanBeUsedThisEmojiAsReaction, )
        OpenAPI.validate_property(AdminEmojiUpdateRequest, Symbol("id"), id)
        OpenAPI.validate_property(AdminEmojiUpdateRequest, Symbol("name"), name)
        OpenAPI.validate_property(AdminEmojiUpdateRequest, Symbol("fileId"), fileId)
        OpenAPI.validate_property(AdminEmojiUpdateRequest, Symbol("category"), category)
        OpenAPI.validate_property(AdminEmojiUpdateRequest, Symbol("aliases"), aliases)
        OpenAPI.validate_property(AdminEmojiUpdateRequest, Symbol("license"), license)
        OpenAPI.validate_property(AdminEmojiUpdateRequest, Symbol("isSensitive"), isSensitive)
        OpenAPI.validate_property(AdminEmojiUpdateRequest, Symbol("localOnly"), localOnly)
        OpenAPI.validate_property(AdminEmojiUpdateRequest, Symbol("roleIdsThatCanBeUsedThisEmojiAsReaction"), roleIdsThatCanBeUsedThisEmojiAsReaction)
        return new(id, name, fileId, category, aliases, license, isSensitive, localOnly, roleIdsThatCanBeUsedThisEmojiAsReaction, )
    end
end # type AdminEmojiUpdateRequest

const _property_types_AdminEmojiUpdateRequest = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("name")=>"String", Symbol("fileId")=>"String", Symbol("category")=>"String", Symbol("aliases")=>"Vector{String}", Symbol("license")=>"String", Symbol("isSensitive")=>"Bool", Symbol("localOnly")=>"Bool", Symbol("roleIdsThatCanBeUsedThisEmojiAsReaction")=>"Vector{String}", )
OpenAPI.property_type(::Type{ AdminEmojiUpdateRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_AdminEmojiUpdateRequest[name]))}

function check_required(o::AdminEmojiUpdateRequest)
    true
end

function OpenAPI.validate_property(::Type{ AdminEmojiUpdateRequest }, name::Symbol, val)
    if name === Symbol("id")
        OpenAPI.validate_param(name, "AdminEmojiUpdateRequest", :format, val, "misskey:id")
    end
    if name === Symbol("name")
        OpenAPI.validate_param(name, "AdminEmojiUpdateRequest", :pattern, val, r"^[a-zA-Z0-9_]+$")
    end
    if name === Symbol("fileId")
        OpenAPI.validate_param(name, "AdminEmojiUpdateRequest", :format, val, "misskey:id")
    end
end
