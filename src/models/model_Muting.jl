# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Muting

    Muting(;
        id=nothing,
        createdAt=nothing,
        expiresAt=nothing,
        muteeId=nothing,
        mutee=nothing,
    )

    - id::String
    - createdAt::ZonedDateTime
    - expiresAt::ZonedDateTime
    - muteeId::String
    - mutee::UserDetailedNotMe
"""
Base.@kwdef mutable struct Muting <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    createdAt::Union{Nothing, ZonedDateTime} = nothing
    expiresAt::Union{Nothing, ZonedDateTime} = nothing
    muteeId::Union{Nothing, String} = nothing
    mutee = nothing # spec type: Union{ Nothing, UserDetailedNotMe }

    function Muting(id, createdAt, expiresAt, muteeId, mutee, )
        OpenAPI.validate_property(Muting, Symbol("id"), id)
        OpenAPI.validate_property(Muting, Symbol("createdAt"), createdAt)
        OpenAPI.validate_property(Muting, Symbol("expiresAt"), expiresAt)
        OpenAPI.validate_property(Muting, Symbol("muteeId"), muteeId)
        OpenAPI.validate_property(Muting, Symbol("mutee"), mutee)
        return new(id, createdAt, expiresAt, muteeId, mutee, )
    end
end # type Muting

const _property_types_Muting = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("createdAt")=>"ZonedDateTime", Symbol("expiresAt")=>"ZonedDateTime", Symbol("muteeId")=>"String", Symbol("mutee")=>"UserDetailedNotMe", )
OpenAPI.property_type(::Type{ Muting }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Muting[name]))}

function check_required(o::Muting)
    o.id === nothing && (return false)
    o.createdAt === nothing && (return false)
    o.expiresAt === nothing && (return false)
    o.muteeId === nothing && (return false)
    o.mutee === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ Muting }, name::Symbol, val)
    if name === Symbol("id")
        OpenAPI.validate_param(name, "Muting", :format, val, "id")
    end
    if name === Symbol("createdAt")
        OpenAPI.validate_param(name, "Muting", :format, val, "date-time")
    end
    if name === Symbol("expiresAt")
        OpenAPI.validate_param(name, "Muting", :format, val, "date-time")
    end
    if name === Symbol("muteeId")
        OpenAPI.validate_param(name, "Muting", :format, val, "id")
    end
end
