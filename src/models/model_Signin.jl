# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Signin

    Signin(;
        id=nothing,
        createdAt=nothing,
        ip=nothing,
        headers=nothing,
        success=nothing,
    )

    - id::String
    - createdAt::ZonedDateTime
    - ip::String
    - headers::Any
    - success::Bool
"""
Base.@kwdef mutable struct Signin <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    createdAt::Union{Nothing, ZonedDateTime} = nothing
    ip::Union{Nothing, String} = nothing
    headers::Union{Nothing, Any} = nothing
    success::Union{Nothing, Bool} = nothing

    function Signin(id, createdAt, ip, headers, success, )
        OpenAPI.validate_property(Signin, Symbol("id"), id)
        OpenAPI.validate_property(Signin, Symbol("createdAt"), createdAt)
        OpenAPI.validate_property(Signin, Symbol("ip"), ip)
        OpenAPI.validate_property(Signin, Symbol("headers"), headers)
        OpenAPI.validate_property(Signin, Symbol("success"), success)
        return new(id, createdAt, ip, headers, success, )
    end
end # type Signin

const _property_types_Signin = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("createdAt")=>"ZonedDateTime", Symbol("ip")=>"String", Symbol("headers")=>"Any", Symbol("success")=>"Bool", )
OpenAPI.property_type(::Type{ Signin }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Signin[name]))}

function check_required(o::Signin)
    o.id === nothing && (return false)
    o.createdAt === nothing && (return false)
    o.ip === nothing && (return false)
    o.headers === nothing && (return false)
    o.success === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ Signin }, name::Symbol, val)
    if name === Symbol("createdAt")
        OpenAPI.validate_param(name, "Signin", :format, val, "date-time")
    end
end
