# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Note_poll

    NotePoll(;
        expiresAt=nothing,
        multiple=nothing,
        choices=nothing,
    )

    - expiresAt::ZonedDateTime
    - multiple::Bool
    - choices::Vector{NotePollChoicesInner}
"""
Base.@kwdef mutable struct NotePoll <: OpenAPI.APIModel
    expiresAt::Union{Nothing, ZonedDateTime} = nothing
    multiple::Union{Nothing, Bool} = nothing
    choices::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{NotePollChoicesInner} }

    function NotePoll(expiresAt, multiple, choices, )
        OpenAPI.validate_property(NotePoll, Symbol("expiresAt"), expiresAt)
        OpenAPI.validate_property(NotePoll, Symbol("multiple"), multiple)
        OpenAPI.validate_property(NotePoll, Symbol("choices"), choices)
        return new(expiresAt, multiple, choices, )
    end
end # type NotePoll

const _property_types_NotePoll = Dict{Symbol,String}(Symbol("expiresAt")=>"ZonedDateTime", Symbol("multiple")=>"Bool", Symbol("choices")=>"Vector{NotePollChoicesInner}", )
OpenAPI.property_type(::Type{ NotePoll }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_NotePoll[name]))}

function check_required(o::NotePoll)
    o.multiple === nothing && (return false)
    o.choices === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ NotePoll }, name::Symbol, val)
    if name === Symbol("expiresAt")
        OpenAPI.validate_param(name, "NotePoll", :format, val, "date-time")
    end
end
