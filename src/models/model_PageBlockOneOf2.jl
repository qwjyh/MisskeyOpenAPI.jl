# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""PageBlock_oneOf_2

    PageBlockOneOf2(;
        id=nothing,
        type=nothing,
        fileId=nothing,
    )

    - id::String
    - type::String
    - fileId::String
"""
Base.@kwdef mutable struct PageBlockOneOf2 <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    type::Union{Nothing, String} = nothing
    fileId::Union{Nothing, String} = nothing

    function PageBlockOneOf2(id, type, fileId, )
        OpenAPI.validate_property(PageBlockOneOf2, Symbol("id"), id)
        OpenAPI.validate_property(PageBlockOneOf2, Symbol("type"), type)
        OpenAPI.validate_property(PageBlockOneOf2, Symbol("fileId"), fileId)
        return new(id, type, fileId, )
    end
end # type PageBlockOneOf2

const _property_types_PageBlockOneOf2 = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("type")=>"String", Symbol("fileId")=>"String", )
OpenAPI.property_type(::Type{ PageBlockOneOf2 }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_PageBlockOneOf2[name]))}

function check_required(o::PageBlockOneOf2)
    o.id === nothing && (return false)
    o.type === nothing && (return false)
    o.fileId === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ PageBlockOneOf2 }, name::Symbol, val)
    if name === Symbol("type")
        OpenAPI.validate_param(name, "PageBlockOneOf2", :enum, val, ["image"])
    end
end
