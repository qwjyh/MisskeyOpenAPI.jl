# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""admin___roles___unassign_request

    AdminRolesUnassignRequest(;
        roleId=nothing,
        userId=nothing,
    )

    - roleId::String
    - userId::String
"""
Base.@kwdef mutable struct AdminRolesUnassignRequest <: OpenAPI.APIModel
    roleId::Union{Nothing, String} = nothing
    userId::Union{Nothing, String} = nothing

    function AdminRolesUnassignRequest(roleId, userId, )
        OpenAPI.validate_property(AdminRolesUnassignRequest, Symbol("roleId"), roleId)
        OpenAPI.validate_property(AdminRolesUnassignRequest, Symbol("userId"), userId)
        return new(roleId, userId, )
    end
end # type AdminRolesUnassignRequest

const _property_types_AdminRolesUnassignRequest = Dict{Symbol,String}(Symbol("roleId")=>"String", Symbol("userId")=>"String", )
OpenAPI.property_type(::Type{ AdminRolesUnassignRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_AdminRolesUnassignRequest[name]))}

function check_required(o::AdminRolesUnassignRequest)
    o.roleId === nothing && (return false)
    o.userId === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ AdminRolesUnassignRequest }, name::Symbol, val)
    if name === Symbol("roleId")
        OpenAPI.validate_param(name, "AdminRolesUnassignRequest", :format, val, "misskey:id")
    end
    if name === Symbol("userId")
        OpenAPI.validate_param(name, "AdminRolesUnassignRequest", :format, val, "misskey:id")
    end
end
