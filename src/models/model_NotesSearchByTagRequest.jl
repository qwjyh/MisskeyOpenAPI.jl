# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""notes___search_by_tag_request

    NotesSearchByTagRequest(;
        reply=nothing,
        renote=nothing,
        withFiles=false,
        poll=nothing,
        sinceId=nothing,
        untilId=nothing,
        limit=10,
        tag=nothing,
        query=nothing,
    )

    - reply::Bool
    - renote::Bool
    - withFiles::Bool : Only show notes that have attached files.
    - poll::Bool
    - sinceId::String
    - untilId::String
    - limit::Int64
    - tag::String
    - query::Vector{Vector{String}} : The outer arrays are chained with OR, the inner arrays are chained with AND.
"""
Base.@kwdef mutable struct NotesSearchByTagRequest <: OpenAPI.APIModel
    reply::Union{Nothing, Bool} = nothing
    renote::Union{Nothing, Bool} = nothing
    withFiles::Union{Nothing, Bool} = false
    poll::Union{Nothing, Bool} = nothing
    sinceId::Union{Nothing, String} = nothing
    untilId::Union{Nothing, String} = nothing
    limit::Union{Nothing, Int64} = 10
    tag::Union{Nothing, String} = nothing
    query::Union{Nothing, Vector{Vector{String}}} = nothing

    function NotesSearchByTagRequest(reply, renote, withFiles, poll, sinceId, untilId, limit, tag, query, )
        OpenAPI.validate_property(NotesSearchByTagRequest, Symbol("reply"), reply)
        OpenAPI.validate_property(NotesSearchByTagRequest, Symbol("renote"), renote)
        OpenAPI.validate_property(NotesSearchByTagRequest, Symbol("withFiles"), withFiles)
        OpenAPI.validate_property(NotesSearchByTagRequest, Symbol("poll"), poll)
        OpenAPI.validate_property(NotesSearchByTagRequest, Symbol("sinceId"), sinceId)
        OpenAPI.validate_property(NotesSearchByTagRequest, Symbol("untilId"), untilId)
        OpenAPI.validate_property(NotesSearchByTagRequest, Symbol("limit"), limit)
        OpenAPI.validate_property(NotesSearchByTagRequest, Symbol("tag"), tag)
        OpenAPI.validate_property(NotesSearchByTagRequest, Symbol("query"), query)
        return new(reply, renote, withFiles, poll, sinceId, untilId, limit, tag, query, )
    end
end # type NotesSearchByTagRequest

const _property_types_NotesSearchByTagRequest = Dict{Symbol,String}(Symbol("reply")=>"Bool", Symbol("renote")=>"Bool", Symbol("withFiles")=>"Bool", Symbol("poll")=>"Bool", Symbol("sinceId")=>"String", Symbol("untilId")=>"String", Symbol("limit")=>"Int64", Symbol("tag")=>"String", Symbol("query")=>"Vector{Vector{String}}", )
OpenAPI.property_type(::Type{ NotesSearchByTagRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_NotesSearchByTagRequest[name]))}

function check_required(o::NotesSearchByTagRequest)
    true
end

function OpenAPI.validate_property(::Type{ NotesSearchByTagRequest }, name::Symbol, val)
    if name === Symbol("sinceId")
        OpenAPI.validate_param(name, "NotesSearchByTagRequest", :format, val, "misskey:id")
    end
    if name === Symbol("untilId")
        OpenAPI.validate_param(name, "NotesSearchByTagRequest", :format, val, "misskey:id")
    end
    if name === Symbol("limit")
        OpenAPI.validate_param(name, "NotesSearchByTagRequest", :maximum, val, 100, false)
        OpenAPI.validate_param(name, "NotesSearchByTagRequest", :minimum, val, 1, false)
    end
    if name === Symbol("tag")
        OpenAPI.validate_param(name, "NotesSearchByTagRequest", :minLength, val, 1)
    end
    if name === Symbol("query")
        OpenAPI.validate_param(name, "NotesSearchByTagRequest", :minItems, val, 1)
    end
end
