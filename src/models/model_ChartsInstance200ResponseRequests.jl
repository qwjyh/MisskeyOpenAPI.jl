# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""charts___instance_200_response_requests

    ChartsInstance200ResponseRequests(;
        failed=nothing,
        succeeded=nothing,
        received=nothing,
    )

    - failed::Vector{Float64}
    - succeeded::Vector{Float64}
    - received::Vector{Float64}
"""
Base.@kwdef mutable struct ChartsInstance200ResponseRequests <: OpenAPI.APIModel
    failed::Union{Nothing, Vector{Float64}} = nothing
    succeeded::Union{Nothing, Vector{Float64}} = nothing
    received::Union{Nothing, Vector{Float64}} = nothing

    function ChartsInstance200ResponseRequests(failed, succeeded, received, )
        OpenAPI.validate_property(ChartsInstance200ResponseRequests, Symbol("failed"), failed)
        OpenAPI.validate_property(ChartsInstance200ResponseRequests, Symbol("succeeded"), succeeded)
        OpenAPI.validate_property(ChartsInstance200ResponseRequests, Symbol("received"), received)
        return new(failed, succeeded, received, )
    end
end # type ChartsInstance200ResponseRequests

const _property_types_ChartsInstance200ResponseRequests = Dict{Symbol,String}(Symbol("failed")=>"Vector{Float64}", Symbol("succeeded")=>"Vector{Float64}", Symbol("received")=>"Vector{Float64}", )
OpenAPI.property_type(::Type{ ChartsInstance200ResponseRequests }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ChartsInstance200ResponseRequests[name]))}

function check_required(o::ChartsInstance200ResponseRequests)
    o.failed === nothing && (return false)
    o.succeeded === nothing && (return false)
    o.received === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ ChartsInstance200ResponseRequests }, name::Symbol, val)
end
