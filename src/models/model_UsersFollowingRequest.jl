# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""users___following_request

    UsersFollowingRequest(;
        sinceId=nothing,
        untilId=nothing,
        limit=10,
        userId=nothing,
        username=nothing,
        host=nothing,
        birthday=nothing,
    )

    - sinceId::String
    - untilId::String
    - limit::Int64
    - userId::String
    - username::String
    - host::String : The local host is represented with &#x60;null&#x60;.
    - birthday::String
"""
Base.@kwdef mutable struct UsersFollowingRequest <: OpenAPI.APIModel
    sinceId::Union{Nothing, String} = nothing
    untilId::Union{Nothing, String} = nothing
    limit::Union{Nothing, Int64} = 10
    userId::Union{Nothing, String} = nothing
    username::Union{Nothing, String} = nothing
    host::Union{Nothing, String} = nothing
    birthday::Union{Nothing, String} = nothing

    function UsersFollowingRequest(sinceId, untilId, limit, userId, username, host, birthday, )
        OpenAPI.validate_property(UsersFollowingRequest, Symbol("sinceId"), sinceId)
        OpenAPI.validate_property(UsersFollowingRequest, Symbol("untilId"), untilId)
        OpenAPI.validate_property(UsersFollowingRequest, Symbol("limit"), limit)
        OpenAPI.validate_property(UsersFollowingRequest, Symbol("userId"), userId)
        OpenAPI.validate_property(UsersFollowingRequest, Symbol("username"), username)
        OpenAPI.validate_property(UsersFollowingRequest, Symbol("host"), host)
        OpenAPI.validate_property(UsersFollowingRequest, Symbol("birthday"), birthday)
        return new(sinceId, untilId, limit, userId, username, host, birthday, )
    end
end # type UsersFollowingRequest

const _property_types_UsersFollowingRequest = Dict{Symbol,String}(Symbol("sinceId")=>"String", Symbol("untilId")=>"String", Symbol("limit")=>"Int64", Symbol("userId")=>"String", Symbol("username")=>"String", Symbol("host")=>"String", Symbol("birthday")=>"String", )
OpenAPI.property_type(::Type{ UsersFollowingRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_UsersFollowingRequest[name]))}

function check_required(o::UsersFollowingRequest)
    true
end

function OpenAPI.validate_property(::Type{ UsersFollowingRequest }, name::Symbol, val)
    if name === Symbol("sinceId")
        OpenAPI.validate_param(name, "UsersFollowingRequest", :format, val, "misskey:id")
    end
    if name === Symbol("untilId")
        OpenAPI.validate_param(name, "UsersFollowingRequest", :format, val, "misskey:id")
    end
    if name === Symbol("limit")
        OpenAPI.validate_param(name, "UsersFollowingRequest", :maximum, val, 100, false)
        OpenAPI.validate_param(name, "UsersFollowingRequest", :minimum, val, 1, false)
    end
    if name === Symbol("userId")
        OpenAPI.validate_param(name, "UsersFollowingRequest", :format, val, "misskey:id")
    end
    if name === Symbol("birthday")
        OpenAPI.validate_param(name, "UsersFollowingRequest", :pattern, val, r"^([0-9]{4})-([0-9]{2})-([0-9]{2})$")
    end
end
