# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Blocking

    Blocking(;
        id=nothing,
        createdAt=nothing,
        blockeeId=nothing,
        blockee=nothing,
    )

    - id::String
    - createdAt::ZonedDateTime
    - blockeeId::String
    - blockee::UserDetailedNotMe
"""
Base.@kwdef mutable struct Blocking <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    createdAt::Union{Nothing, ZonedDateTime} = nothing
    blockeeId::Union{Nothing, String} = nothing
    blockee = nothing # spec type: Union{ Nothing, UserDetailedNotMe }

    function Blocking(id, createdAt, blockeeId, blockee, )
        OpenAPI.validate_property(Blocking, Symbol("id"), id)
        OpenAPI.validate_property(Blocking, Symbol("createdAt"), createdAt)
        OpenAPI.validate_property(Blocking, Symbol("blockeeId"), blockeeId)
        OpenAPI.validate_property(Blocking, Symbol("blockee"), blockee)
        return new(id, createdAt, blockeeId, blockee, )
    end
end # type Blocking

const _property_types_Blocking = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("createdAt")=>"ZonedDateTime", Symbol("blockeeId")=>"String", Symbol("blockee")=>"UserDetailedNotMe", )
OpenAPI.property_type(::Type{ Blocking }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Blocking[name]))}

function check_required(o::Blocking)
    o.id === nothing && (return false)
    o.createdAt === nothing && (return false)
    o.blockeeId === nothing && (return false)
    o.blockee === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ Blocking }, name::Symbol, val)
    if name === Symbol("id")
        OpenAPI.validate_param(name, "Blocking", :format, val, "id")
    end
    if name === Symbol("createdAt")
        OpenAPI.validate_param(name, "Blocking", :format, val, "date-time")
    end
    if name === Symbol("blockeeId")
        OpenAPI.validate_param(name, "Blocking", :format, val, "id")
    end
end
