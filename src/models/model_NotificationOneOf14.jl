# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Notification_oneOf_14

    NotificationOneOf14(;
        id=nothing,
        createdAt=nothing,
        type=nothing,
        note=nothing,
        users=nothing,
    )

    - id::String
    - createdAt::ZonedDateTime
    - type::String
    - note::Note
    - users::Vector{UserLite}
"""
Base.@kwdef mutable struct NotificationOneOf14 <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    createdAt::Union{Nothing, ZonedDateTime} = nothing
    type::Union{Nothing, String} = nothing
    note = nothing # spec type: Union{ Nothing, Note }
    users::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{UserLite} }

    function NotificationOneOf14(id, createdAt, type, note, users, )
        OpenAPI.validate_property(NotificationOneOf14, Symbol("id"), id)
        OpenAPI.validate_property(NotificationOneOf14, Symbol("createdAt"), createdAt)
        OpenAPI.validate_property(NotificationOneOf14, Symbol("type"), type)
        OpenAPI.validate_property(NotificationOneOf14, Symbol("note"), note)
        OpenAPI.validate_property(NotificationOneOf14, Symbol("users"), users)
        return new(id, createdAt, type, note, users, )
    end
end # type NotificationOneOf14

const _property_types_NotificationOneOf14 = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("createdAt")=>"ZonedDateTime", Symbol("type")=>"String", Symbol("note")=>"Note", Symbol("users")=>"Vector{UserLite}", )
OpenAPI.property_type(::Type{ NotificationOneOf14 }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_NotificationOneOf14[name]))}

function check_required(o::NotificationOneOf14)
    o.id === nothing && (return false)
    o.createdAt === nothing && (return false)
    o.type === nothing && (return false)
    o.note === nothing && (return false)
    o.users === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ NotificationOneOf14 }, name::Symbol, val)
    if name === Symbol("id")
        OpenAPI.validate_param(name, "NotificationOneOf14", :format, val, "id")
    end
    if name === Symbol("createdAt")
        OpenAPI.validate_param(name, "NotificationOneOf14", :format, val, "date-time")
    end
    if name === Symbol("type")
        OpenAPI.validate_param(name, "NotificationOneOf14", :enum, val, ["renote:grouped"])
    end
end
