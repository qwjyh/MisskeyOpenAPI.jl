# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""charts___drive_200_response_local

    ChartsDrive200ResponseLocal(;
        incCount=nothing,
        incSize=nothing,
        decCount=nothing,
        decSize=nothing,
    )

    - incCount::Vector{Float64}
    - incSize::Vector{Float64}
    - decCount::Vector{Float64}
    - decSize::Vector{Float64}
"""
Base.@kwdef mutable struct ChartsDrive200ResponseLocal <: OpenAPI.APIModel
    incCount::Union{Nothing, Vector{Float64}} = nothing
    incSize::Union{Nothing, Vector{Float64}} = nothing
    decCount::Union{Nothing, Vector{Float64}} = nothing
    decSize::Union{Nothing, Vector{Float64}} = nothing

    function ChartsDrive200ResponseLocal(incCount, incSize, decCount, decSize, )
        OpenAPI.validate_property(ChartsDrive200ResponseLocal, Symbol("incCount"), incCount)
        OpenAPI.validate_property(ChartsDrive200ResponseLocal, Symbol("incSize"), incSize)
        OpenAPI.validate_property(ChartsDrive200ResponseLocal, Symbol("decCount"), decCount)
        OpenAPI.validate_property(ChartsDrive200ResponseLocal, Symbol("decSize"), decSize)
        return new(incCount, incSize, decCount, decSize, )
    end
end # type ChartsDrive200ResponseLocal

const _property_types_ChartsDrive200ResponseLocal = Dict{Symbol,String}(Symbol("incCount")=>"Vector{Float64}", Symbol("incSize")=>"Vector{Float64}", Symbol("decCount")=>"Vector{Float64}", Symbol("decSize")=>"Vector{Float64}", )
OpenAPI.property_type(::Type{ ChartsDrive200ResponseLocal }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ChartsDrive200ResponseLocal[name]))}

function check_required(o::ChartsDrive200ResponseLocal)
    o.incCount === nothing && (return false)
    o.incSize === nothing && (return false)
    o.decCount === nothing && (return false)
    o.decSize === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ ChartsDrive200ResponseLocal }, name::Symbol, val)
end
