# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""notes___mentions_request

    NotesMentionsRequest(;
        following=false,
        limit=10,
        sinceId=nothing,
        untilId=nothing,
        visibility=nothing,
    )

    - following::Bool
    - limit::Int64
    - sinceId::String
    - untilId::String
    - visibility::String
"""
Base.@kwdef mutable struct NotesMentionsRequest <: OpenAPI.APIModel
    following::Union{Nothing, Bool} = false
    limit::Union{Nothing, Int64} = 10
    sinceId::Union{Nothing, String} = nothing
    untilId::Union{Nothing, String} = nothing
    visibility::Union{Nothing, String} = nothing

    function NotesMentionsRequest(following, limit, sinceId, untilId, visibility, )
        OpenAPI.validate_property(NotesMentionsRequest, Symbol("following"), following)
        OpenAPI.validate_property(NotesMentionsRequest, Symbol("limit"), limit)
        OpenAPI.validate_property(NotesMentionsRequest, Symbol("sinceId"), sinceId)
        OpenAPI.validate_property(NotesMentionsRequest, Symbol("untilId"), untilId)
        OpenAPI.validate_property(NotesMentionsRequest, Symbol("visibility"), visibility)
        return new(following, limit, sinceId, untilId, visibility, )
    end
end # type NotesMentionsRequest

const _property_types_NotesMentionsRequest = Dict{Symbol,String}(Symbol("following")=>"Bool", Symbol("limit")=>"Int64", Symbol("sinceId")=>"String", Symbol("untilId")=>"String", Symbol("visibility")=>"String", )
OpenAPI.property_type(::Type{ NotesMentionsRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_NotesMentionsRequest[name]))}

function check_required(o::NotesMentionsRequest)
    true
end

function OpenAPI.validate_property(::Type{ NotesMentionsRequest }, name::Symbol, val)
    if name === Symbol("limit")
        OpenAPI.validate_param(name, "NotesMentionsRequest", :maximum, val, 100, false)
        OpenAPI.validate_param(name, "NotesMentionsRequest", :minimum, val, 1, false)
    end
    if name === Symbol("sinceId")
        OpenAPI.validate_param(name, "NotesMentionsRequest", :format, val, "misskey:id")
    end
    if name === Symbol("untilId")
        OpenAPI.validate_param(name, "NotesMentionsRequest", :format, val, "misskey:id")
    end
end
