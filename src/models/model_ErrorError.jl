# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Error_error
An error object.

    ErrorError(;
        code=nothing,
        message=nothing,
        id=nothing,
    )

    - code::String : An error code. Unique within the endpoint.
    - message::String : An error message.
    - id::String : An error ID. This ID is static.
"""
Base.@kwdef mutable struct ErrorError <: OpenAPI.APIModel
    code::Union{Nothing, String} = nothing
    message::Union{Nothing, String} = nothing
    id::Union{Nothing, String} = nothing

    function ErrorError(code, message, id, )
        OpenAPI.validate_property(ErrorError, Symbol("code"), code)
        OpenAPI.validate_property(ErrorError, Symbol("message"), message)
        OpenAPI.validate_property(ErrorError, Symbol("id"), id)
        return new(code, message, id, )
    end
end # type ErrorError

const _property_types_ErrorError = Dict{Symbol,String}(Symbol("code")=>"String", Symbol("message")=>"String", Symbol("id")=>"String", )
OpenAPI.property_type(::Type{ ErrorError }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ErrorError[name]))}

function check_required(o::ErrorError)
    o.code === nothing && (return false)
    o.message === nothing && (return false)
    o.id === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ ErrorError }, name::Symbol, val)
    if name === Symbol("id")
        OpenAPI.validate_param(name, "ErrorError", :format, val, "uuid")
    end
end
