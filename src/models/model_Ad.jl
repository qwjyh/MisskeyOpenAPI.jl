# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Ad

    Ad(;
        id=nothing,
        expiresAt=nothing,
        startsAt=nothing,
        place=nothing,
        priority=nothing,
        ratio=nothing,
        url=nothing,
        imageUrl=nothing,
        memo=nothing,
        dayOfWeek=nothing,
    )

    - id::String
    - expiresAt::ZonedDateTime
    - startsAt::ZonedDateTime
    - place::String
    - priority::String
    - ratio::Float64
    - url::String
    - imageUrl::String
    - memo::String
    - dayOfWeek::Int64
"""
Base.@kwdef mutable struct Ad <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    expiresAt::Union{Nothing, ZonedDateTime} = nothing
    startsAt::Union{Nothing, ZonedDateTime} = nothing
    place::Union{Nothing, String} = nothing
    priority::Union{Nothing, String} = nothing
    ratio::Union{Nothing, Float64} = nothing
    url::Union{Nothing, String} = nothing
    imageUrl::Union{Nothing, String} = nothing
    memo::Union{Nothing, String} = nothing
    dayOfWeek::Union{Nothing, Int64} = nothing

    function Ad(id, expiresAt, startsAt, place, priority, ratio, url, imageUrl, memo, dayOfWeek, )
        OpenAPI.validate_property(Ad, Symbol("id"), id)
        OpenAPI.validate_property(Ad, Symbol("expiresAt"), expiresAt)
        OpenAPI.validate_property(Ad, Symbol("startsAt"), startsAt)
        OpenAPI.validate_property(Ad, Symbol("place"), place)
        OpenAPI.validate_property(Ad, Symbol("priority"), priority)
        OpenAPI.validate_property(Ad, Symbol("ratio"), ratio)
        OpenAPI.validate_property(Ad, Symbol("url"), url)
        OpenAPI.validate_property(Ad, Symbol("imageUrl"), imageUrl)
        OpenAPI.validate_property(Ad, Symbol("memo"), memo)
        OpenAPI.validate_property(Ad, Symbol("dayOfWeek"), dayOfWeek)
        return new(id, expiresAt, startsAt, place, priority, ratio, url, imageUrl, memo, dayOfWeek, )
    end
end # type Ad

const _property_types_Ad = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("expiresAt")=>"ZonedDateTime", Symbol("startsAt")=>"ZonedDateTime", Symbol("place")=>"String", Symbol("priority")=>"String", Symbol("ratio")=>"Float64", Symbol("url")=>"String", Symbol("imageUrl")=>"String", Symbol("memo")=>"String", Symbol("dayOfWeek")=>"Int64", )
OpenAPI.property_type(::Type{ Ad }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Ad[name]))}

function check_required(o::Ad)
    o.id === nothing && (return false)
    o.expiresAt === nothing && (return false)
    o.startsAt === nothing && (return false)
    o.place === nothing && (return false)
    o.priority === nothing && (return false)
    o.ratio === nothing && (return false)
    o.url === nothing && (return false)
    o.imageUrl === nothing && (return false)
    o.memo === nothing && (return false)
    o.dayOfWeek === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ Ad }, name::Symbol, val)
    if name === Symbol("id")
        OpenAPI.validate_param(name, "Ad", :format, val, "id")
    end
    if name === Symbol("expiresAt")
        OpenAPI.validate_param(name, "Ad", :format, val, "date-time")
    end
    if name === Symbol("startsAt")
        OpenAPI.validate_param(name, "Ad", :format, val, "date-time")
    end
end
