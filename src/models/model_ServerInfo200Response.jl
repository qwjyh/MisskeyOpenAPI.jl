# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""server_info_200_response

    ServerInfo200Response(;
        machine=nothing,
        cpu=nothing,
        mem=nothing,
        fs=nothing,
    )

    - machine::String
    - cpu::AdminServerInfo200ResponseCpu
    - mem::ServerInfo200ResponseMem
    - fs::ServerInfo200ResponseFs
"""
Base.@kwdef mutable struct ServerInfo200Response <: OpenAPI.APIModel
    machine::Union{Nothing, String} = nothing
    cpu = nothing # spec type: Union{ Nothing, AdminServerInfo200ResponseCpu }
    mem = nothing # spec type: Union{ Nothing, ServerInfo200ResponseMem }
    fs = nothing # spec type: Union{ Nothing, ServerInfo200ResponseFs }

    function ServerInfo200Response(machine, cpu, mem, fs, )
        OpenAPI.validate_property(ServerInfo200Response, Symbol("machine"), machine)
        OpenAPI.validate_property(ServerInfo200Response, Symbol("cpu"), cpu)
        OpenAPI.validate_property(ServerInfo200Response, Symbol("mem"), mem)
        OpenAPI.validate_property(ServerInfo200Response, Symbol("fs"), fs)
        return new(machine, cpu, mem, fs, )
    end
end # type ServerInfo200Response

const _property_types_ServerInfo200Response = Dict{Symbol,String}(Symbol("machine")=>"String", Symbol("cpu")=>"AdminServerInfo200ResponseCpu", Symbol("mem")=>"ServerInfo200ResponseMem", Symbol("fs")=>"ServerInfo200ResponseFs", )
OpenAPI.property_type(::Type{ ServerInfo200Response }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ServerInfo200Response[name]))}

function check_required(o::ServerInfo200Response)
    o.machine === nothing && (return false)
    o.cpu === nothing && (return false)
    o.mem === nothing && (return false)
    o.fs === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ ServerInfo200Response }, name::Symbol, val)
end
