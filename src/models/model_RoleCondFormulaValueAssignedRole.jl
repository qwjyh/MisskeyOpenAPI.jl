# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""RoleCondFormulaValueAssignedRole

    RoleCondFormulaValueAssignedRole(;
        id=nothing,
        type=nothing,
        roleId=nothing,
    )

    - id::String
    - type::String
    - roleId::String
"""
Base.@kwdef mutable struct RoleCondFormulaValueAssignedRole <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    type::Union{Nothing, String} = nothing
    roleId::Union{Nothing, String} = nothing

    function RoleCondFormulaValueAssignedRole(id, type, roleId, )
        OpenAPI.validate_property(RoleCondFormulaValueAssignedRole, Symbol("id"), id)
        OpenAPI.validate_property(RoleCondFormulaValueAssignedRole, Symbol("type"), type)
        OpenAPI.validate_property(RoleCondFormulaValueAssignedRole, Symbol("roleId"), roleId)
        return new(id, type, roleId, )
    end
end # type RoleCondFormulaValueAssignedRole

const _property_types_RoleCondFormulaValueAssignedRole = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("type")=>"String", Symbol("roleId")=>"String", )
OpenAPI.property_type(::Type{ RoleCondFormulaValueAssignedRole }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_RoleCondFormulaValueAssignedRole[name]))}

function check_required(o::RoleCondFormulaValueAssignedRole)
    o.id === nothing && (return false)
    o.type === nothing && (return false)
    o.roleId === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ RoleCondFormulaValueAssignedRole }, name::Symbol, val)
    if name === Symbol("type")
        OpenAPI.validate_param(name, "RoleCondFormulaValueAssignedRole", :enum, val, ["roleAssignedTo"])
    end
    if name === Symbol("roleId")
        OpenAPI.validate_param(name, "RoleCondFormulaValueAssignedRole", :format, val, "id")
    end
end
