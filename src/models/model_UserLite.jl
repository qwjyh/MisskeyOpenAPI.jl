# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""UserLite

    UserLite(;
        id=nothing,
        name=nothing,
        username=nothing,
        host=nothing,
        avatarUrl=nothing,
        avatarBlurhash=nothing,
        avatarDecorations=nothing,
        isBot=nothing,
        isCat=nothing,
        instance=nothing,
        emojis=nothing,
        onlineStatus=nothing,
        badgeRoles=nothing,
    )

    - id::String
    - name::String
    - username::String
    - host::String : The local host is represented with &#x60;null&#x60;.
    - avatarUrl::String
    - avatarBlurhash::String
    - avatarDecorations::Vector{UserLiteAvatarDecorationsInner}
    - isBot::Bool
    - isCat::Bool
    - instance::UserLiteInstance
    - emojis::Dict{String, String}
    - onlineStatus::String
    - badgeRoles::Vector{UserLiteBadgeRolesInner}
"""
Base.@kwdef mutable struct UserLite <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    username::Union{Nothing, String} = nothing
    host::Union{Nothing, String} = nothing
    avatarUrl::Union{Nothing, String} = nothing
    avatarBlurhash::Union{Nothing, String} = nothing
    avatarDecorations::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{UserLiteAvatarDecorationsInner} }
    isBot::Union{Nothing, Bool} = nothing
    isCat::Union{Nothing, Bool} = nothing
    instance = nothing # spec type: Union{ Nothing, UserLiteInstance }
    emojis::Union{Nothing, Dict{String, String}} = nothing
    onlineStatus::Union{Nothing, String} = nothing
    badgeRoles::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{UserLiteBadgeRolesInner} }

    function UserLite(id, name, username, host, avatarUrl, avatarBlurhash, avatarDecorations, isBot, isCat, instance, emojis, onlineStatus, badgeRoles, )
        OpenAPI.validate_property(UserLite, Symbol("id"), id)
        OpenAPI.validate_property(UserLite, Symbol("name"), name)
        OpenAPI.validate_property(UserLite, Symbol("username"), username)
        OpenAPI.validate_property(UserLite, Symbol("host"), host)
        OpenAPI.validate_property(UserLite, Symbol("avatarUrl"), avatarUrl)
        OpenAPI.validate_property(UserLite, Symbol("avatarBlurhash"), avatarBlurhash)
        OpenAPI.validate_property(UserLite, Symbol("avatarDecorations"), avatarDecorations)
        OpenAPI.validate_property(UserLite, Symbol("isBot"), isBot)
        OpenAPI.validate_property(UserLite, Symbol("isCat"), isCat)
        OpenAPI.validate_property(UserLite, Symbol("instance"), instance)
        OpenAPI.validate_property(UserLite, Symbol("emojis"), emojis)
        OpenAPI.validate_property(UserLite, Symbol("onlineStatus"), onlineStatus)
        OpenAPI.validate_property(UserLite, Symbol("badgeRoles"), badgeRoles)
        return new(id, name, username, host, avatarUrl, avatarBlurhash, avatarDecorations, isBot, isCat, instance, emojis, onlineStatus, badgeRoles, )
    end
end # type UserLite

const _property_types_UserLite = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("name")=>"String", Symbol("username")=>"String", Symbol("host")=>"String", Symbol("avatarUrl")=>"String", Symbol("avatarBlurhash")=>"String", Symbol("avatarDecorations")=>"Vector{UserLiteAvatarDecorationsInner}", Symbol("isBot")=>"Bool", Symbol("isCat")=>"Bool", Symbol("instance")=>"UserLiteInstance", Symbol("emojis")=>"Dict{String, String}", Symbol("onlineStatus")=>"String", Symbol("badgeRoles")=>"Vector{UserLiteBadgeRolesInner}", )
OpenAPI.property_type(::Type{ UserLite }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_UserLite[name]))}

function check_required(o::UserLite)
    o.id === nothing && (return false)
    o.name === nothing && (return false)
    o.username === nothing && (return false)
    o.host === nothing && (return false)
    o.avatarUrl === nothing && (return false)
    o.avatarBlurhash === nothing && (return false)
    o.avatarDecorations === nothing && (return false)
    o.isBot === nothing && (return false)
    o.isCat === nothing && (return false)
    o.instance === nothing && (return false)
    o.emojis === nothing && (return false)
    o.onlineStatus === nothing && (return false)
    o.badgeRoles === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ UserLite }, name::Symbol, val)
    if name === Symbol("id")
        OpenAPI.validate_param(name, "UserLite", :format, val, "id")
    end
    if name === Symbol("avatarUrl")
        OpenAPI.validate_param(name, "UserLite", :format, val, "url")
    end
    if name === Symbol("onlineStatus")
        OpenAPI.validate_param(name, "UserLite", :enum, val, ["unknown", "online", "active", "offline"])
    end
end
