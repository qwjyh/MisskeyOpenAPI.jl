# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""i___authorized_apps_request

    IAuthorizedAppsRequest(;
        limit=10,
        offset=0,
        sort="desc",
    )

    - limit::Int64
    - offset::Int64
    - sort::String
"""
Base.@kwdef mutable struct IAuthorizedAppsRequest <: OpenAPI.APIModel
    limit::Union{Nothing, Int64} = 10
    offset::Union{Nothing, Int64} = 0
    sort::Union{Nothing, String} = "desc"

    function IAuthorizedAppsRequest(limit, offset, sort, )
        OpenAPI.validate_property(IAuthorizedAppsRequest, Symbol("limit"), limit)
        OpenAPI.validate_property(IAuthorizedAppsRequest, Symbol("offset"), offset)
        OpenAPI.validate_property(IAuthorizedAppsRequest, Symbol("sort"), sort)
        return new(limit, offset, sort, )
    end
end # type IAuthorizedAppsRequest

const _property_types_IAuthorizedAppsRequest = Dict{Symbol,String}(Symbol("limit")=>"Int64", Symbol("offset")=>"Int64", Symbol("sort")=>"String", )
OpenAPI.property_type(::Type{ IAuthorizedAppsRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IAuthorizedAppsRequest[name]))}

function check_required(o::IAuthorizedAppsRequest)
    true
end

function OpenAPI.validate_property(::Type{ IAuthorizedAppsRequest }, name::Symbol, val)
    if name === Symbol("limit")
        OpenAPI.validate_param(name, "IAuthorizedAppsRequest", :maximum, val, 100, false)
        OpenAPI.validate_param(name, "IAuthorizedAppsRequest", :minimum, val, 1, false)
    end
    if name === Symbol("sort")
        OpenAPI.validate_param(name, "IAuthorizedAppsRequest", :enum, val, ["desc", "asc"])
    end
end
