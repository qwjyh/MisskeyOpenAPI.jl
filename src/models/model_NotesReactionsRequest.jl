# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""notes___reactions_request

    NotesReactionsRequest(;
        noteId=nothing,
        type=nothing,
        limit=10,
        sinceId=nothing,
        untilId=nothing,
    )

    - noteId::String
    - type::String
    - limit::Int64
    - sinceId::String
    - untilId::String
"""
Base.@kwdef mutable struct NotesReactionsRequest <: OpenAPI.APIModel
    noteId::Union{Nothing, String} = nothing
    type::Union{Nothing, String} = nothing
    limit::Union{Nothing, Int64} = 10
    sinceId::Union{Nothing, String} = nothing
    untilId::Union{Nothing, String} = nothing

    function NotesReactionsRequest(noteId, type, limit, sinceId, untilId, )
        OpenAPI.validate_property(NotesReactionsRequest, Symbol("noteId"), noteId)
        OpenAPI.validate_property(NotesReactionsRequest, Symbol("type"), type)
        OpenAPI.validate_property(NotesReactionsRequest, Symbol("limit"), limit)
        OpenAPI.validate_property(NotesReactionsRequest, Symbol("sinceId"), sinceId)
        OpenAPI.validate_property(NotesReactionsRequest, Symbol("untilId"), untilId)
        return new(noteId, type, limit, sinceId, untilId, )
    end
end # type NotesReactionsRequest

const _property_types_NotesReactionsRequest = Dict{Symbol,String}(Symbol("noteId")=>"String", Symbol("type")=>"String", Symbol("limit")=>"Int64", Symbol("sinceId")=>"String", Symbol("untilId")=>"String", )
OpenAPI.property_type(::Type{ NotesReactionsRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_NotesReactionsRequest[name]))}

function check_required(o::NotesReactionsRequest)
    o.noteId === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ NotesReactionsRequest }, name::Symbol, val)
    if name === Symbol("noteId")
        OpenAPI.validate_param(name, "NotesReactionsRequest", :format, val, "misskey:id")
    end
    if name === Symbol("limit")
        OpenAPI.validate_param(name, "NotesReactionsRequest", :maximum, val, 100, false)
        OpenAPI.validate_param(name, "NotesReactionsRequest", :minimum, val, 1, false)
    end
    if name === Symbol("sinceId")
        OpenAPI.validate_param(name, "NotesReactionsRequest", :format, val, "misskey:id")
    end
    if name === Symbol("untilId")
        OpenAPI.validate_param(name, "NotesReactionsRequest", :format, val, "misskey:id")
    end
end
