# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""reversi___match_request

    ReversiMatchRequest(;
        userId=nothing,
        noIrregularRules=false,
        multiple=false,
    )

    - userId::String
    - noIrregularRules::Bool
    - multiple::Bool
"""
Base.@kwdef mutable struct ReversiMatchRequest <: OpenAPI.APIModel
    userId::Union{Nothing, String} = nothing
    noIrregularRules::Union{Nothing, Bool} = false
    multiple::Union{Nothing, Bool} = false

    function ReversiMatchRequest(userId, noIrregularRules, multiple, )
        OpenAPI.validate_property(ReversiMatchRequest, Symbol("userId"), userId)
        OpenAPI.validate_property(ReversiMatchRequest, Symbol("noIrregularRules"), noIrregularRules)
        OpenAPI.validate_property(ReversiMatchRequest, Symbol("multiple"), multiple)
        return new(userId, noIrregularRules, multiple, )
    end
end # type ReversiMatchRequest

const _property_types_ReversiMatchRequest = Dict{Symbol,String}(Symbol("userId")=>"String", Symbol("noIrregularRules")=>"Bool", Symbol("multiple")=>"Bool", )
OpenAPI.property_type(::Type{ ReversiMatchRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ReversiMatchRequest[name]))}

function check_required(o::ReversiMatchRequest)
    true
end

function OpenAPI.validate_property(::Type{ ReversiMatchRequest }, name::Symbol, val)
    if name === Symbol("userId")
        OpenAPI.validate_param(name, "ReversiMatchRequest", :format, val, "misskey:id")
    end
end
