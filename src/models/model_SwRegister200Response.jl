# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""sw___register_200_response

    SwRegister200Response(;
        state=nothing,
        key=nothing,
        userId=nothing,
        endpoint=nothing,
        sendReadMessage=nothing,
    )

    - state::String
    - key::String
    - userId::String
    - endpoint::String
    - sendReadMessage::Bool
"""
Base.@kwdef mutable struct SwRegister200Response <: OpenAPI.APIModel
    state::Union{Nothing, String} = nothing
    key::Union{Nothing, String} = nothing
    userId::Union{Nothing, String} = nothing
    endpoint::Union{Nothing, String} = nothing
    sendReadMessage::Union{Nothing, Bool} = nothing

    function SwRegister200Response(state, key, userId, endpoint, sendReadMessage, )
        OpenAPI.validate_property(SwRegister200Response, Symbol("state"), state)
        OpenAPI.validate_property(SwRegister200Response, Symbol("key"), key)
        OpenAPI.validate_property(SwRegister200Response, Symbol("userId"), userId)
        OpenAPI.validate_property(SwRegister200Response, Symbol("endpoint"), endpoint)
        OpenAPI.validate_property(SwRegister200Response, Symbol("sendReadMessage"), sendReadMessage)
        return new(state, key, userId, endpoint, sendReadMessage, )
    end
end # type SwRegister200Response

const _property_types_SwRegister200Response = Dict{Symbol,String}(Symbol("state")=>"String", Symbol("key")=>"String", Symbol("userId")=>"String", Symbol("endpoint")=>"String", Symbol("sendReadMessage")=>"Bool", )
OpenAPI.property_type(::Type{ SwRegister200Response }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_SwRegister200Response[name]))}

function check_required(o::SwRegister200Response)
    o.key === nothing && (return false)
    o.userId === nothing && (return false)
    o.endpoint === nothing && (return false)
    o.sendReadMessage === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ SwRegister200Response }, name::Symbol, val)
    if name === Symbol("state")
        OpenAPI.validate_param(name, "SwRegister200Response", :enum, val, ["already-subscribed", "subscribed"])
    end
end
