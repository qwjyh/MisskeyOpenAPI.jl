# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""users___get_frequently_replied_users_request

    UsersGetFrequentlyRepliedUsersRequest(;
        userId=nothing,
        limit=10,
    )

    - userId::String
    - limit::Int64
"""
Base.@kwdef mutable struct UsersGetFrequentlyRepliedUsersRequest <: OpenAPI.APIModel
    userId::Union{Nothing, String} = nothing
    limit::Union{Nothing, Int64} = 10

    function UsersGetFrequentlyRepliedUsersRequest(userId, limit, )
        OpenAPI.validate_property(UsersGetFrequentlyRepliedUsersRequest, Symbol("userId"), userId)
        OpenAPI.validate_property(UsersGetFrequentlyRepliedUsersRequest, Symbol("limit"), limit)
        return new(userId, limit, )
    end
end # type UsersGetFrequentlyRepliedUsersRequest

const _property_types_UsersGetFrequentlyRepliedUsersRequest = Dict{Symbol,String}(Symbol("userId")=>"String", Symbol("limit")=>"Int64", )
OpenAPI.property_type(::Type{ UsersGetFrequentlyRepliedUsersRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_UsersGetFrequentlyRepliedUsersRequest[name]))}

function check_required(o::UsersGetFrequentlyRepliedUsersRequest)
    o.userId === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ UsersGetFrequentlyRepliedUsersRequest }, name::Symbol, val)
    if name === Symbol("userId")
        OpenAPI.validate_param(name, "UsersGetFrequentlyRepliedUsersRequest", :format, val, "misskey:id")
    end
    if name === Symbol("limit")
        OpenAPI.validate_param(name, "UsersGetFrequentlyRepliedUsersRequest", :maximum, val, 100, false)
        OpenAPI.validate_param(name, "UsersGetFrequentlyRepliedUsersRequest", :minimum, val, 1, false)
    end
end
