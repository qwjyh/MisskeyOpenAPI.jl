# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""RoleCondFormulaValueCreated

    RoleCondFormulaValueCreated(;
        id=nothing,
        type=nothing,
        sec=nothing,
    )

    - id::String
    - type::String
    - sec::Float64
"""
Base.@kwdef mutable struct RoleCondFormulaValueCreated <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    type::Union{Nothing, String} = nothing
    sec::Union{Nothing, Float64} = nothing

    function RoleCondFormulaValueCreated(id, type, sec, )
        OpenAPI.validate_property(RoleCondFormulaValueCreated, Symbol("id"), id)
        OpenAPI.validate_property(RoleCondFormulaValueCreated, Symbol("type"), type)
        OpenAPI.validate_property(RoleCondFormulaValueCreated, Symbol("sec"), sec)
        return new(id, type, sec, )
    end
end # type RoleCondFormulaValueCreated

const _property_types_RoleCondFormulaValueCreated = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("type")=>"String", Symbol("sec")=>"Float64", )
OpenAPI.property_type(::Type{ RoleCondFormulaValueCreated }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_RoleCondFormulaValueCreated[name]))}

function check_required(o::RoleCondFormulaValueCreated)
    o.id === nothing && (return false)
    o.type === nothing && (return false)
    o.sec === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ RoleCondFormulaValueCreated }, name::Symbol, val)
    if name === Symbol("type")
        OpenAPI.validate_param(name, "RoleCondFormulaValueCreated", :enum, val, ["createdLessThan", "createdMoreThan"])
    end
end
