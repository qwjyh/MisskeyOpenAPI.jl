# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""users___update_memo_request

    UsersUpdateMemoRequest(;
        userId=nothing,
        memo=nothing,
    )

    - userId::String
    - memo::String : A personal memo for the target user. If null or empty, delete the memo.
"""
Base.@kwdef mutable struct UsersUpdateMemoRequest <: OpenAPI.APIModel
    userId::Union{Nothing, String} = nothing
    memo::Union{Nothing, String} = nothing

    function UsersUpdateMemoRequest(userId, memo, )
        OpenAPI.validate_property(UsersUpdateMemoRequest, Symbol("userId"), userId)
        OpenAPI.validate_property(UsersUpdateMemoRequest, Symbol("memo"), memo)
        return new(userId, memo, )
    end
end # type UsersUpdateMemoRequest

const _property_types_UsersUpdateMemoRequest = Dict{Symbol,String}(Symbol("userId")=>"String", Symbol("memo")=>"String", )
OpenAPI.property_type(::Type{ UsersUpdateMemoRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_UsersUpdateMemoRequest[name]))}

function check_required(o::UsersUpdateMemoRequest)
    o.userId === nothing && (return false)
    o.memo === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ UsersUpdateMemoRequest }, name::Symbol, val)
    if name === Symbol("userId")
        OpenAPI.validate_param(name, "UsersUpdateMemoRequest", :format, val, "misskey:id")
    end
end
