# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""i___notifications_request

    INotificationsRequest(;
        limit=10,
        sinceId=nothing,
        untilId=nothing,
        markAsRead=true,
        includeTypes=nothing,
        excludeTypes=nothing,
    )

    - limit::Int64
    - sinceId::String
    - untilId::String
    - markAsRead::Bool
    - includeTypes::Vector{String}
    - excludeTypes::Vector{String}
"""
Base.@kwdef mutable struct INotificationsRequest <: OpenAPI.APIModel
    limit::Union{Nothing, Int64} = 10
    sinceId::Union{Nothing, String} = nothing
    untilId::Union{Nothing, String} = nothing
    markAsRead::Union{Nothing, Bool} = true
    includeTypes::Union{Nothing, Vector{String}} = nothing
    excludeTypes::Union{Nothing, Vector{String}} = nothing

    function INotificationsRequest(limit, sinceId, untilId, markAsRead, includeTypes, excludeTypes, )
        OpenAPI.validate_property(INotificationsRequest, Symbol("limit"), limit)
        OpenAPI.validate_property(INotificationsRequest, Symbol("sinceId"), sinceId)
        OpenAPI.validate_property(INotificationsRequest, Symbol("untilId"), untilId)
        OpenAPI.validate_property(INotificationsRequest, Symbol("markAsRead"), markAsRead)
        OpenAPI.validate_property(INotificationsRequest, Symbol("includeTypes"), includeTypes)
        OpenAPI.validate_property(INotificationsRequest, Symbol("excludeTypes"), excludeTypes)
        return new(limit, sinceId, untilId, markAsRead, includeTypes, excludeTypes, )
    end
end # type INotificationsRequest

const _property_types_INotificationsRequest = Dict{Symbol,String}(Symbol("limit")=>"Int64", Symbol("sinceId")=>"String", Symbol("untilId")=>"String", Symbol("markAsRead")=>"Bool", Symbol("includeTypes")=>"Vector{String}", Symbol("excludeTypes")=>"Vector{String}", )
OpenAPI.property_type(::Type{ INotificationsRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_INotificationsRequest[name]))}

function check_required(o::INotificationsRequest)
    true
end

function OpenAPI.validate_property(::Type{ INotificationsRequest }, name::Symbol, val)
    if name === Symbol("limit")
        OpenAPI.validate_param(name, "INotificationsRequest", :maximum, val, 100, false)
        OpenAPI.validate_param(name, "INotificationsRequest", :minimum, val, 1, false)
    end
    if name === Symbol("sinceId")
        OpenAPI.validate_param(name, "INotificationsRequest", :format, val, "misskey:id")
    end
    if name === Symbol("untilId")
        OpenAPI.validate_param(name, "INotificationsRequest", :format, val, "misskey:id")
    end
    if name === Symbol("includeTypes")
        OpenAPI.validate_param(name, "INotificationsRequest", :enum, val, [])
    end
    if name === Symbol("excludeTypes")
        OpenAPI.validate_param(name, "INotificationsRequest", :enum, val, [])
    end
end
