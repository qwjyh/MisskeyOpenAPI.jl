# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""test_request

    TestRequest(;
        required=nothing,
        string=nothing,
        default="hello",
        nullableDefault="hello",
        id=nothing,
    )

    - required::Bool
    - string::String
    - default::String
    - nullableDefault::String
    - id::String
"""
Base.@kwdef mutable struct TestRequest <: OpenAPI.APIModel
    required::Union{Nothing, Bool} = nothing
    string::Union{Nothing, String} = nothing
    default::Union{Nothing, String} = "hello"
    nullableDefault::Union{Nothing, String} = "hello"
    id::Union{Nothing, String} = nothing

    function TestRequest(required, string, default, nullableDefault, id, )
        OpenAPI.validate_property(TestRequest, Symbol("required"), required)
        OpenAPI.validate_property(TestRequest, Symbol("string"), string)
        OpenAPI.validate_property(TestRequest, Symbol("default"), default)
        OpenAPI.validate_property(TestRequest, Symbol("nullableDefault"), nullableDefault)
        OpenAPI.validate_property(TestRequest, Symbol("id"), id)
        return new(required, string, default, nullableDefault, id, )
    end
end # type TestRequest

const _property_types_TestRequest = Dict{Symbol,String}(Symbol("required")=>"Bool", Symbol("string")=>"String", Symbol("default")=>"String", Symbol("nullableDefault")=>"String", Symbol("id")=>"String", )
OpenAPI.property_type(::Type{ TestRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_TestRequest[name]))}

function check_required(o::TestRequest)
    o.required === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ TestRequest }, name::Symbol, val)
    if name === Symbol("id")
        OpenAPI.validate_param(name, "TestRequest", :format, val, "misskey:id")
    end
end
