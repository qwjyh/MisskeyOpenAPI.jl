# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""users___lists___update_request

    UsersListsUpdateRequest(;
        listId=nothing,
        name=nothing,
        isPublic=nothing,
    )

    - listId::String
    - name::String
    - isPublic::Bool
"""
Base.@kwdef mutable struct UsersListsUpdateRequest <: OpenAPI.APIModel
    listId::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    isPublic::Union{Nothing, Bool} = nothing

    function UsersListsUpdateRequest(listId, name, isPublic, )
        OpenAPI.validate_property(UsersListsUpdateRequest, Symbol("listId"), listId)
        OpenAPI.validate_property(UsersListsUpdateRequest, Symbol("name"), name)
        OpenAPI.validate_property(UsersListsUpdateRequest, Symbol("isPublic"), isPublic)
        return new(listId, name, isPublic, )
    end
end # type UsersListsUpdateRequest

const _property_types_UsersListsUpdateRequest = Dict{Symbol,String}(Symbol("listId")=>"String", Symbol("name")=>"String", Symbol("isPublic")=>"Bool", )
OpenAPI.property_type(::Type{ UsersListsUpdateRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_UsersListsUpdateRequest[name]))}

function check_required(o::UsersListsUpdateRequest)
    o.listId === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ UsersListsUpdateRequest }, name::Symbol, val)
    if name === Symbol("listId")
        OpenAPI.validate_param(name, "UsersListsUpdateRequest", :format, val, "misskey:id")
    end
    if name === Symbol("name")
        OpenAPI.validate_param(name, "UsersListsUpdateRequest", :maxLength, val, 100)
        OpenAPI.validate_param(name, "UsersListsUpdateRequest", :minLength, val, 1)
    end
end
