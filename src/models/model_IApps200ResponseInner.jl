# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""i___apps_200_response_inner

    IApps200ResponseInner(;
        id=nothing,
        name=nothing,
        createdAt=nothing,
        lastUsedAt=nothing,
        permission=nothing,
    )

    - id::String
    - name::String
    - createdAt::ZonedDateTime
    - lastUsedAt::ZonedDateTime
    - permission::Vector{String}
"""
Base.@kwdef mutable struct IApps200ResponseInner <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    createdAt::Union{Nothing, ZonedDateTime} = nothing
    lastUsedAt::Union{Nothing, ZonedDateTime} = nothing
    permission::Union{Nothing, Vector{String}} = nothing

    function IApps200ResponseInner(id, name, createdAt, lastUsedAt, permission, )
        OpenAPI.validate_property(IApps200ResponseInner, Symbol("id"), id)
        OpenAPI.validate_property(IApps200ResponseInner, Symbol("name"), name)
        OpenAPI.validate_property(IApps200ResponseInner, Symbol("createdAt"), createdAt)
        OpenAPI.validate_property(IApps200ResponseInner, Symbol("lastUsedAt"), lastUsedAt)
        OpenAPI.validate_property(IApps200ResponseInner, Symbol("permission"), permission)
        return new(id, name, createdAt, lastUsedAt, permission, )
    end
end # type IApps200ResponseInner

const _property_types_IApps200ResponseInner = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("name")=>"String", Symbol("createdAt")=>"ZonedDateTime", Symbol("lastUsedAt")=>"ZonedDateTime", Symbol("permission")=>"Vector{String}", )
OpenAPI.property_type(::Type{ IApps200ResponseInner }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IApps200ResponseInner[name]))}

function check_required(o::IApps200ResponseInner)
    o.id === nothing && (return false)
    o.createdAt === nothing && (return false)
    o.permission === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ IApps200ResponseInner }, name::Symbol, val)
    if name === Symbol("id")
        OpenAPI.validate_param(name, "IApps200ResponseInner", :format, val, "misskey:id")
    end
    if name === Symbol("createdAt")
        OpenAPI.validate_param(name, "IApps200ResponseInner", :format, val, "date-time")
    end
    if name === Symbol("lastUsedAt")
        OpenAPI.validate_param(name, "IApps200ResponseInner", :format, val, "date-time")
    end
    if name === Symbol("permission")
        OpenAPI.validate_param(name, "IApps200ResponseInner", :uniqueItems, val, true)
    end
end
