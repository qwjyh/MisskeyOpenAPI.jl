# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""notes___create_request

    NotesCreateRequest(;
        visibility="public",
        visibleUserIds=nothing,
        cw=nothing,
        localOnly=false,
        reactionAcceptance="null",
        noExtractMentions=false,
        noExtractHashtags=false,
        noExtractEmojis=false,
        replyId=nothing,
        renoteId=nothing,
        channelId=nothing,
        text=nothing,
        fileIds=nothing,
        mediaIds=nothing,
        poll=nothing,
    )

    - visibility::String
    - visibleUserIds::Vector{String}
    - cw::String
    - localOnly::Bool
    - reactionAcceptance::String
    - noExtractMentions::Bool
    - noExtractHashtags::Bool
    - noExtractEmojis::Bool
    - replyId::String
    - renoteId::String
    - channelId::String
    - text::String
    - fileIds::Vector{String}
    - mediaIds::Vector{String}
    - poll::NotesCreateRequestPoll
"""
Base.@kwdef mutable struct NotesCreateRequest <: OpenAPI.APIModel
    visibility::Union{Nothing, String} = "public"
    visibleUserIds::Union{Nothing, Vector{String}} = nothing
    cw::Union{Nothing, String} = nothing
    localOnly::Union{Nothing, Bool} = false
    reactionAcceptance::Union{Nothing, String} = "null"
    noExtractMentions::Union{Nothing, Bool} = false
    noExtractHashtags::Union{Nothing, Bool} = false
    noExtractEmojis::Union{Nothing, Bool} = false
    replyId::Union{Nothing, String} = nothing
    renoteId::Union{Nothing, String} = nothing
    channelId::Union{Nothing, String} = nothing
    text::Union{Nothing, String} = nothing
    fileIds::Union{Nothing, Vector{String}} = nothing
    mediaIds::Union{Nothing, Vector{String}} = nothing
    poll = nothing # spec type: Union{ Nothing, NotesCreateRequestPoll }

    function NotesCreateRequest(visibility, visibleUserIds, cw, localOnly, reactionAcceptance, noExtractMentions, noExtractHashtags, noExtractEmojis, replyId, renoteId, channelId, text, fileIds, mediaIds, poll, )
        OpenAPI.validate_property(NotesCreateRequest, Symbol("visibility"), visibility)
        OpenAPI.validate_property(NotesCreateRequest, Symbol("visibleUserIds"), visibleUserIds)
        OpenAPI.validate_property(NotesCreateRequest, Symbol("cw"), cw)
        OpenAPI.validate_property(NotesCreateRequest, Symbol("localOnly"), localOnly)
        OpenAPI.validate_property(NotesCreateRequest, Symbol("reactionAcceptance"), reactionAcceptance)
        OpenAPI.validate_property(NotesCreateRequest, Symbol("noExtractMentions"), noExtractMentions)
        OpenAPI.validate_property(NotesCreateRequest, Symbol("noExtractHashtags"), noExtractHashtags)
        OpenAPI.validate_property(NotesCreateRequest, Symbol("noExtractEmojis"), noExtractEmojis)
        OpenAPI.validate_property(NotesCreateRequest, Symbol("replyId"), replyId)
        OpenAPI.validate_property(NotesCreateRequest, Symbol("renoteId"), renoteId)
        OpenAPI.validate_property(NotesCreateRequest, Symbol("channelId"), channelId)
        OpenAPI.validate_property(NotesCreateRequest, Symbol("text"), text)
        OpenAPI.validate_property(NotesCreateRequest, Symbol("fileIds"), fileIds)
        OpenAPI.validate_property(NotesCreateRequest, Symbol("mediaIds"), mediaIds)
        OpenAPI.validate_property(NotesCreateRequest, Symbol("poll"), poll)
        return new(visibility, visibleUserIds, cw, localOnly, reactionAcceptance, noExtractMentions, noExtractHashtags, noExtractEmojis, replyId, renoteId, channelId, text, fileIds, mediaIds, poll, )
    end
end # type NotesCreateRequest

const _property_types_NotesCreateRequest = Dict{Symbol,String}(Symbol("visibility")=>"String", Symbol("visibleUserIds")=>"Vector{String}", Symbol("cw")=>"String", Symbol("localOnly")=>"Bool", Symbol("reactionAcceptance")=>"String", Symbol("noExtractMentions")=>"Bool", Symbol("noExtractHashtags")=>"Bool", Symbol("noExtractEmojis")=>"Bool", Symbol("replyId")=>"String", Symbol("renoteId")=>"String", Symbol("channelId")=>"String", Symbol("text")=>"String", Symbol("fileIds")=>"Vector{String}", Symbol("mediaIds")=>"Vector{String}", Symbol("poll")=>"NotesCreateRequestPoll", )
OpenAPI.property_type(::Type{ NotesCreateRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_NotesCreateRequest[name]))}

function check_required(o::NotesCreateRequest)
    true
end

function OpenAPI.validate_property(::Type{ NotesCreateRequest }, name::Symbol, val)
    if name === Symbol("visibility")
        OpenAPI.validate_param(name, "NotesCreateRequest", :enum, val, ["public", "home", "followers", "specified"])
    end
    if name === Symbol("visibleUserIds")
        OpenAPI.validate_param(name, "NotesCreateRequest", :uniqueItems, val, true)
    end
    if name === Symbol("cw")
        OpenAPI.validate_param(name, "NotesCreateRequest", :maxLength, val, 100)
        OpenAPI.validate_param(name, "NotesCreateRequest", :minLength, val, 1)
    end
    if name === Symbol("reactionAcceptance")
        OpenAPI.validate_param(name, "NotesCreateRequest", :enum, val, ["null", "likeOnly", "likeOnlyForRemote", "nonSensitiveOnly", "nonSensitiveOnlyForLocalLikeOnlyForRemote"])
    end
    if name === Symbol("replyId")
        OpenAPI.validate_param(name, "NotesCreateRequest", :format, val, "misskey:id")
    end
    if name === Symbol("renoteId")
        OpenAPI.validate_param(name, "NotesCreateRequest", :format, val, "misskey:id")
    end
    if name === Symbol("channelId")
        OpenAPI.validate_param(name, "NotesCreateRequest", :format, val, "misskey:id")
    end
    if name === Symbol("text")
        OpenAPI.validate_param(name, "NotesCreateRequest", :maxLength, val, 3000)
        OpenAPI.validate_param(name, "NotesCreateRequest", :minLength, val, 1)
    end
    if name === Symbol("fileIds")
        OpenAPI.validate_param(name, "NotesCreateRequest", :maxItems, val, 16)
        OpenAPI.validate_param(name, "NotesCreateRequest", :minItems, val, 1)
        OpenAPI.validate_param(name, "NotesCreateRequest", :uniqueItems, val, true)
    end
    if name === Symbol("mediaIds")
        OpenAPI.validate_param(name, "NotesCreateRequest", :maxItems, val, 16)
        OpenAPI.validate_param(name, "NotesCreateRequest", :minItems, val, 1)
        OpenAPI.validate_param(name, "NotesCreateRequest", :uniqueItems, val, true)
    end
end
