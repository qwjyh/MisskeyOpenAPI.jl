# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""channels___timeline_request

    ChannelsTimelineRequest(;
        channelId=nothing,
        limit=10,
        sinceId=nothing,
        untilId=nothing,
        sinceDate=nothing,
        untilDate=nothing,
        allowPartial=false,
    )

    - channelId::String
    - limit::Int64
    - sinceId::String
    - untilId::String
    - sinceDate::Int64
    - untilDate::Int64
    - allowPartial::Bool
"""
Base.@kwdef mutable struct ChannelsTimelineRequest <: OpenAPI.APIModel
    channelId::Union{Nothing, String} = nothing
    limit::Union{Nothing, Int64} = 10
    sinceId::Union{Nothing, String} = nothing
    untilId::Union{Nothing, String} = nothing
    sinceDate::Union{Nothing, Int64} = nothing
    untilDate::Union{Nothing, Int64} = nothing
    allowPartial::Union{Nothing, Bool} = false

    function ChannelsTimelineRequest(channelId, limit, sinceId, untilId, sinceDate, untilDate, allowPartial, )
        OpenAPI.validate_property(ChannelsTimelineRequest, Symbol("channelId"), channelId)
        OpenAPI.validate_property(ChannelsTimelineRequest, Symbol("limit"), limit)
        OpenAPI.validate_property(ChannelsTimelineRequest, Symbol("sinceId"), sinceId)
        OpenAPI.validate_property(ChannelsTimelineRequest, Symbol("untilId"), untilId)
        OpenAPI.validate_property(ChannelsTimelineRequest, Symbol("sinceDate"), sinceDate)
        OpenAPI.validate_property(ChannelsTimelineRequest, Symbol("untilDate"), untilDate)
        OpenAPI.validate_property(ChannelsTimelineRequest, Symbol("allowPartial"), allowPartial)
        return new(channelId, limit, sinceId, untilId, sinceDate, untilDate, allowPartial, )
    end
end # type ChannelsTimelineRequest

const _property_types_ChannelsTimelineRequest = Dict{Symbol,String}(Symbol("channelId")=>"String", Symbol("limit")=>"Int64", Symbol("sinceId")=>"String", Symbol("untilId")=>"String", Symbol("sinceDate")=>"Int64", Symbol("untilDate")=>"Int64", Symbol("allowPartial")=>"Bool", )
OpenAPI.property_type(::Type{ ChannelsTimelineRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ChannelsTimelineRequest[name]))}

function check_required(o::ChannelsTimelineRequest)
    o.channelId === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ ChannelsTimelineRequest }, name::Symbol, val)
    if name === Symbol("channelId")
        OpenAPI.validate_param(name, "ChannelsTimelineRequest", :format, val, "misskey:id")
    end
    if name === Symbol("limit")
        OpenAPI.validate_param(name, "ChannelsTimelineRequest", :maximum, val, 100, false)
        OpenAPI.validate_param(name, "ChannelsTimelineRequest", :minimum, val, 1, false)
    end
    if name === Symbol("sinceId")
        OpenAPI.validate_param(name, "ChannelsTimelineRequest", :format, val, "misskey:id")
    end
    if name === Symbol("untilId")
        OpenAPI.validate_param(name, "ChannelsTimelineRequest", :format, val, "misskey:id")
    end
end
