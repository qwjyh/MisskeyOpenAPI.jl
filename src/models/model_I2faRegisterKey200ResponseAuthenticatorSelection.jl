# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""i___2fa___register_key_200_response_authenticatorSelection

    I2faRegisterKey200ResponseAuthenticatorSelection(;
        authenticatorAttachment=nothing,
        requireResidentKey=nothing,
        userVerification=nothing,
    )

    - authenticatorAttachment::String
    - requireResidentKey::Bool
    - userVerification::String
"""
Base.@kwdef mutable struct I2faRegisterKey200ResponseAuthenticatorSelection <: OpenAPI.APIModel
    authenticatorAttachment::Union{Nothing, String} = nothing
    requireResidentKey::Union{Nothing, Bool} = nothing
    userVerification::Union{Nothing, String} = nothing

    function I2faRegisterKey200ResponseAuthenticatorSelection(authenticatorAttachment, requireResidentKey, userVerification, )
        OpenAPI.validate_property(I2faRegisterKey200ResponseAuthenticatorSelection, Symbol("authenticatorAttachment"), authenticatorAttachment)
        OpenAPI.validate_property(I2faRegisterKey200ResponseAuthenticatorSelection, Symbol("requireResidentKey"), requireResidentKey)
        OpenAPI.validate_property(I2faRegisterKey200ResponseAuthenticatorSelection, Symbol("userVerification"), userVerification)
        return new(authenticatorAttachment, requireResidentKey, userVerification, )
    end
end # type I2faRegisterKey200ResponseAuthenticatorSelection

const _property_types_I2faRegisterKey200ResponseAuthenticatorSelection = Dict{Symbol,String}(Symbol("authenticatorAttachment")=>"String", Symbol("requireResidentKey")=>"Bool", Symbol("userVerification")=>"String", )
OpenAPI.property_type(::Type{ I2faRegisterKey200ResponseAuthenticatorSelection }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_I2faRegisterKey200ResponseAuthenticatorSelection[name]))}

function check_required(o::I2faRegisterKey200ResponseAuthenticatorSelection)
    o.authenticatorAttachment === nothing && (return false)
    o.requireResidentKey === nothing && (return false)
    o.userVerification === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ I2faRegisterKey200ResponseAuthenticatorSelection }, name::Symbol, val)
    if name === Symbol("authenticatorAttachment")
        OpenAPI.validate_param(name, "I2faRegisterKey200ResponseAuthenticatorSelection", :enum, val, ["cross-platform", "platform"])
    end
    if name === Symbol("userVerification")
        OpenAPI.validate_param(name, "I2faRegisterKey200ResponseAuthenticatorSelection", :enum, val, ["discouraged", "preferred", "required"])
    end
end
