# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""charts___instance_200_response_notes

    ChartsInstance200ResponseNotes(;
        total=nothing,
        inc=nothing,
        dec=nothing,
        diffs=nothing,
    )

    - total::Vector{Float64}
    - inc::Vector{Float64}
    - dec::Vector{Float64}
    - diffs::ChartsInstance200ResponseNotesDiffs
"""
Base.@kwdef mutable struct ChartsInstance200ResponseNotes <: OpenAPI.APIModel
    total::Union{Nothing, Vector{Float64}} = nothing
    inc::Union{Nothing, Vector{Float64}} = nothing
    dec::Union{Nothing, Vector{Float64}} = nothing
    diffs = nothing # spec type: Union{ Nothing, ChartsInstance200ResponseNotesDiffs }

    function ChartsInstance200ResponseNotes(total, inc, dec, diffs, )
        OpenAPI.validate_property(ChartsInstance200ResponseNotes, Symbol("total"), total)
        OpenAPI.validate_property(ChartsInstance200ResponseNotes, Symbol("inc"), inc)
        OpenAPI.validate_property(ChartsInstance200ResponseNotes, Symbol("dec"), dec)
        OpenAPI.validate_property(ChartsInstance200ResponseNotes, Symbol("diffs"), diffs)
        return new(total, inc, dec, diffs, )
    end
end # type ChartsInstance200ResponseNotes

const _property_types_ChartsInstance200ResponseNotes = Dict{Symbol,String}(Symbol("total")=>"Vector{Float64}", Symbol("inc")=>"Vector{Float64}", Symbol("dec")=>"Vector{Float64}", Symbol("diffs")=>"ChartsInstance200ResponseNotesDiffs", )
OpenAPI.property_type(::Type{ ChartsInstance200ResponseNotes }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ChartsInstance200ResponseNotes[name]))}

function check_required(o::ChartsInstance200ResponseNotes)
    o.total === nothing && (return false)
    o.inc === nothing && (return false)
    o.dec === nothing && (return false)
    o.diffs === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ ChartsInstance200ResponseNotes }, name::Symbol, val)
end
