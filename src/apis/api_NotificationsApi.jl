# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct NotificationsApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `NotificationsApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ NotificationsApi }) = "https://misskey.qwjyh.net/api"

const _returntypes_notifications_create_NotificationsApi = Dict{Regex,Type}(
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("429", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_notifications_create(_api::NotificationsApi, notifications_create_request::NotificationsCreateRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_notifications_create_NotificationsApi, "/notifications/create", ["bearerAuth", ], notifications_create_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""notifications/create

No description provided.  **Credential required**: *Yes* / **Permission**: *write:notifications*

Params:
- notifications_create_request::NotificationsCreateRequest (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function notifications_create(_api::NotificationsApi, notifications_create_request::NotificationsCreateRequest; _mediaType=nothing)
    _ctx = _oacinternal_notifications_create(_api, notifications_create_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function notifications_create(_api::NotificationsApi, response_stream::Channel, notifications_create_request::NotificationsCreateRequest; _mediaType=nothing)
    _ctx = _oacinternal_notifications_create(_api, notifications_create_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_notifications_flush_NotificationsApi = Dict{Regex,Type}(
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_notifications_flush(_api::NotificationsApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_notifications_flush_NotificationsApi, "/notifications/flush", ["bearerAuth", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""notifications/flush

No description provided.  **Credential required**: *Yes* / **Permission**: *write:notifications*

Params:

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function notifications_flush(_api::NotificationsApi; _mediaType=nothing)
    _ctx = _oacinternal_notifications_flush(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function notifications_flush(_api::NotificationsApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_notifications_flush(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_notifications_mark_all_as_read_NotificationsApi = Dict{Regex,Type}(
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_notifications_mark_all_as_read(_api::NotificationsApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_notifications_mark_all_as_read_NotificationsApi, "/notifications/mark-all-as-read", ["bearerAuth", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""notifications/mark-all-as-read

No description provided.  **Credential required**: *Yes* / **Permission**: *write:notifications*

Params:

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function notifications_mark_all_as_read(_api::NotificationsApi; _mediaType=nothing)
    _ctx = _oacinternal_notifications_mark_all_as_read(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function notifications_mark_all_as_read(_api::NotificationsApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_notifications_mark_all_as_read(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_notifications_test_notification_NotificationsApi = Dict{Regex,Type}(
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("429", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_notifications_test_notification(_api::NotificationsApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_notifications_test_notification_NotificationsApi, "/notifications/test-notification", ["bearerAuth", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""notifications/test-notification

No description provided.  **Credential required**: *Yes* / **Permission**: *write:notifications*

Params:

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function notifications_test_notification(_api::NotificationsApi; _mediaType=nothing)
    _ctx = _oacinternal_notifications_test_notification(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function notifications_test_notification(_api::NotificationsApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_notifications_test_notification(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export notifications_create
export notifications_flush
export notifications_mark_all_as_read
export notifications_test_notification
