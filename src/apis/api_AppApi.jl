# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct AppApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `AppApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ AppApi }) = "https://misskey.qwjyh.net/api"

const _returntypes_app_create_AppApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => App,
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_app_create(_api::AppApi, app_create_request::AppCreateRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_app_create_AppApi, "/app/create", [], app_create_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""app/create

No description provided.  **Credential required**: *No*

Params:
- app_create_request::AppCreateRequest (required)

Return: App, OpenAPI.Clients.ApiResponse
"""
function app_create(_api::AppApi, app_create_request::AppCreateRequest; _mediaType=nothing)
    _ctx = _oacinternal_app_create(_api, app_create_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function app_create(_api::AppApi, response_stream::Channel, app_create_request::AppCreateRequest; _mediaType=nothing)
    _ctx = _oacinternal_app_create(_api, app_create_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_app_show_AppApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => App,
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_app_show(_api::AppApi, app_show_request::AppShowRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_app_show_AppApi, "/app/show", [], app_show_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""app/show

No description provided.  **Credential required**: *No*

Params:
- app_show_request::AppShowRequest (required)

Return: App, OpenAPI.Clients.ApiResponse
"""
function app_show(_api::AppApi, app_show_request::AppShowRequest; _mediaType=nothing)
    _ctx = _oacinternal_app_show(_api, app_show_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function app_show(_api::AppApi, response_stream::Channel, app_show_request::AppShowRequest; _mediaType=nothing)
    _ctx = _oacinternal_app_show(_api, app_show_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export app_create
export app_show
