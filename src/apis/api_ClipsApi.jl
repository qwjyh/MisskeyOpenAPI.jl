# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct ClipsApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `ClipsApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ ClipsApi }) = "https://misskey.qwjyh.net/api"

const _returntypes_clips_create_ClipsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Clip,
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_clips_create(_api::ClipsApi, clips_create_request::ClipsCreateRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_clips_create_ClipsApi, "/clips/create", ["bearerAuth", ], clips_create_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""clips/create

No description provided.  **Credential required**: *Yes* / **Permission**: *write:account*

Params:
- clips_create_request::ClipsCreateRequest (required)

Return: Clip, OpenAPI.Clients.ApiResponse
"""
function clips_create(_api::ClipsApi, clips_create_request::ClipsCreateRequest; _mediaType=nothing)
    _ctx = _oacinternal_clips_create(_api, clips_create_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function clips_create(_api::ClipsApi, response_stream::Channel, clips_create_request::ClipsCreateRequest; _mediaType=nothing)
    _ctx = _oacinternal_clips_create(_api, clips_create_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_clips_delete_ClipsApi = Dict{Regex,Type}(
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_clips_delete(_api::ClipsApi, clips_delete_request::ClipsDeleteRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_clips_delete_ClipsApi, "/clips/delete", ["bearerAuth", ], clips_delete_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""clips/delete

No description provided.  **Credential required**: *Yes* / **Permission**: *write:account*

Params:
- clips_delete_request::ClipsDeleteRequest (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function clips_delete(_api::ClipsApi, clips_delete_request::ClipsDeleteRequest; _mediaType=nothing)
    _ctx = _oacinternal_clips_delete(_api, clips_delete_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function clips_delete(_api::ClipsApi, response_stream::Channel, clips_delete_request::ClipsDeleteRequest; _mediaType=nothing)
    _ctx = _oacinternal_clips_delete(_api, clips_delete_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_clips_list_ClipsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Clip},
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_clips_list(_api::ClipsApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_clips_list_ClipsApi, "/clips/list", ["bearerAuth", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""clips/list

No description provided.  **Credential required**: *Yes* / **Permission**: *read:account*

Params:

Return: Vector{Clip}, OpenAPI.Clients.ApiResponse
"""
function clips_list(_api::ClipsApi; _mediaType=nothing)
    _ctx = _oacinternal_clips_list(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function clips_list(_api::ClipsApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_clips_list(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_clips_show_ClipsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Clip,
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_clips_show(_api::ClipsApi, clips_delete_request::ClipsDeleteRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_clips_show_ClipsApi, "/clips/show", [], clips_delete_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""clips/show

No description provided.  **Credential required**: *No* / **Permission**: *read:account*

Params:
- clips_delete_request::ClipsDeleteRequest (required)

Return: Clip, OpenAPI.Clients.ApiResponse
"""
function clips_show(_api::ClipsApi, clips_delete_request::ClipsDeleteRequest; _mediaType=nothing)
    _ctx = _oacinternal_clips_show(_api, clips_delete_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function clips_show(_api::ClipsApi, response_stream::Channel, clips_delete_request::ClipsDeleteRequest; _mediaType=nothing)
    _ctx = _oacinternal_clips_show(_api, clips_delete_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_clips_update_ClipsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Clip,
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_clips_update(_api::ClipsApi, clips_update_request::ClipsUpdateRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_clips_update_ClipsApi, "/clips/update", ["bearerAuth", ], clips_update_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""clips/update

No description provided.  **Credential required**: *Yes* / **Permission**: *write:account*

Params:
- clips_update_request::ClipsUpdateRequest (required)

Return: Clip, OpenAPI.Clients.ApiResponse
"""
function clips_update(_api::ClipsApi, clips_update_request::ClipsUpdateRequest; _mediaType=nothing)
    _ctx = _oacinternal_clips_update(_api, clips_update_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function clips_update(_api::ClipsApi, response_stream::Channel, clips_update_request::ClipsUpdateRequest; _mediaType=nothing)
    _ctx = _oacinternal_clips_update(_api, clips_update_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_notes_clips_ClipsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Clip},
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_notes_clips(_api::ClipsApi, i_pin_request::IPinRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_notes_clips_ClipsApi, "/notes/clips", [], i_pin_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""notes/clips

No description provided.  **Credential required**: *No*

Params:
- i_pin_request::IPinRequest (required)

Return: Vector{Clip}, OpenAPI.Clients.ApiResponse
"""
function notes_clips(_api::ClipsApi, i_pin_request::IPinRequest; _mediaType=nothing)
    _ctx = _oacinternal_notes_clips(_api, i_pin_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function notes_clips(_api::ClipsApi, response_stream::Channel, i_pin_request::IPinRequest; _mediaType=nothing)
    _ctx = _oacinternal_notes_clips(_api, i_pin_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export clips_create
export clips_delete
export clips_list
export clips_show
export clips_update
export notes_clips
