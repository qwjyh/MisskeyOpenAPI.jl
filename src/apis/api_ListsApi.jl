# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct ListsApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `ListsApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ ListsApi }) = "https://misskey.qwjyh.net/api"

const _returntypes_users_lists_create_ListsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => UserList,
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_users_lists_create(_api::ListsApi, users_lists_create_request::UsersListsCreateRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_users_lists_create_ListsApi, "/users/lists/create", ["bearerAuth", ], users_lists_create_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""users/lists/create

Create a new list of users.  **Credential required**: *Yes* / **Permission**: *write:account*

Params:
- users_lists_create_request::UsersListsCreateRequest (required)

Return: UserList, OpenAPI.Clients.ApiResponse
"""
function users_lists_create(_api::ListsApi, users_lists_create_request::UsersListsCreateRequest; _mediaType=nothing)
    _ctx = _oacinternal_users_lists_create(_api, users_lists_create_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function users_lists_create(_api::ListsApi, response_stream::Channel, users_lists_create_request::UsersListsCreateRequest; _mediaType=nothing)
    _ctx = _oacinternal_users_lists_create(_api, users_lists_create_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_users_lists_delete_ListsApi = Dict{Regex,Type}(
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_users_lists_delete(_api::ListsApi, users_lists_delete_request::UsersListsDeleteRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_users_lists_delete_ListsApi, "/users/lists/delete", ["bearerAuth", ], users_lists_delete_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""users/lists/delete

Delete an existing list of users.  **Credential required**: *Yes* / **Permission**: *write:account*

Params:
- users_lists_delete_request::UsersListsDeleteRequest (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function users_lists_delete(_api::ListsApi, users_lists_delete_request::UsersListsDeleteRequest; _mediaType=nothing)
    _ctx = _oacinternal_users_lists_delete(_api, users_lists_delete_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function users_lists_delete(_api::ListsApi, response_stream::Channel, users_lists_delete_request::UsersListsDeleteRequest; _mediaType=nothing)
    _ctx = _oacinternal_users_lists_delete(_api, users_lists_delete_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_users_lists_get_memberships_ListsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{UsersListsGetMemberships200ResponseInner},
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_users_lists_get_memberships(_api::ListsApi, users_lists_get_memberships_request::UsersListsGetMembershipsRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_users_lists_get_memberships_ListsApi, "/users/lists/get-memberships", [], users_lists_get_memberships_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""users/lists/get-memberships

No description provided.  **Credential required**: *No* / **Permission**: *read:account*

Params:
- users_lists_get_memberships_request::UsersListsGetMembershipsRequest (required)

Return: Vector{UsersListsGetMemberships200ResponseInner}, OpenAPI.Clients.ApiResponse
"""
function users_lists_get_memberships(_api::ListsApi, users_lists_get_memberships_request::UsersListsGetMembershipsRequest; _mediaType=nothing)
    _ctx = _oacinternal_users_lists_get_memberships(_api, users_lists_get_memberships_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function users_lists_get_memberships(_api::ListsApi, response_stream::Channel, users_lists_get_memberships_request::UsersListsGetMembershipsRequest; _mediaType=nothing)
    _ctx = _oacinternal_users_lists_get_memberships(_api, users_lists_get_memberships_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_users_lists_list_ListsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{UserList},
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_users_lists_list(_api::ListsApi, users_lists_list_request::UsersListsListRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_users_lists_list_ListsApi, "/users/lists/list", [], users_lists_list_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""users/lists/list

Show all lists that the authenticated user has created.  **Credential required**: *No* / **Permission**: *read:account*

Params:
- users_lists_list_request::UsersListsListRequest (required)

Return: Vector{UserList}, OpenAPI.Clients.ApiResponse
"""
function users_lists_list(_api::ListsApi, users_lists_list_request::UsersListsListRequest; _mediaType=nothing)
    _ctx = _oacinternal_users_lists_list(_api, users_lists_list_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function users_lists_list(_api::ListsApi, response_stream::Channel, users_lists_list_request::UsersListsListRequest; _mediaType=nothing)
    _ctx = _oacinternal_users_lists_list(_api, users_lists_list_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_users_lists_pull_ListsApi = Dict{Regex,Type}(
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_users_lists_pull(_api::ListsApi, users_lists_pull_request::UsersListsPullRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_users_lists_pull_ListsApi, "/users/lists/pull", ["bearerAuth", ], users_lists_pull_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""users/lists/pull

Remove a user from a list.  **Credential required**: *Yes* / **Permission**: *write:account*

Params:
- users_lists_pull_request::UsersListsPullRequest (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function users_lists_pull(_api::ListsApi, users_lists_pull_request::UsersListsPullRequest; _mediaType=nothing)
    _ctx = _oacinternal_users_lists_pull(_api, users_lists_pull_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function users_lists_pull(_api::ListsApi, response_stream::Channel, users_lists_pull_request::UsersListsPullRequest; _mediaType=nothing)
    _ctx = _oacinternal_users_lists_pull(_api, users_lists_pull_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_users_lists_push_ListsApi = Dict{Regex,Type}(
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("429", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_users_lists_push(_api::ListsApi, users_lists_pull_request::UsersListsPullRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_users_lists_push_ListsApi, "/users/lists/push", ["bearerAuth", ], users_lists_pull_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""users/lists/push

Add a user to an existing list.  **Credential required**: *Yes* / **Permission**: *write:account*

Params:
- users_lists_pull_request::UsersListsPullRequest (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function users_lists_push(_api::ListsApi, users_lists_pull_request::UsersListsPullRequest; _mediaType=nothing)
    _ctx = _oacinternal_users_lists_push(_api, users_lists_pull_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function users_lists_push(_api::ListsApi, response_stream::Channel, users_lists_pull_request::UsersListsPullRequest; _mediaType=nothing)
    _ctx = _oacinternal_users_lists_push(_api, users_lists_pull_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_users_lists_show_ListsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => UserList,
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_users_lists_show(_api::ListsApi, users_lists_show_request::UsersListsShowRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_users_lists_show_ListsApi, "/users/lists/show", [], users_lists_show_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""users/lists/show

Show the properties of a list.  **Credential required**: *No* / **Permission**: *read:account*

Params:
- users_lists_show_request::UsersListsShowRequest (required)

Return: UserList, OpenAPI.Clients.ApiResponse
"""
function users_lists_show(_api::ListsApi, users_lists_show_request::UsersListsShowRequest; _mediaType=nothing)
    _ctx = _oacinternal_users_lists_show(_api, users_lists_show_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function users_lists_show(_api::ListsApi, response_stream::Channel, users_lists_show_request::UsersListsShowRequest; _mediaType=nothing)
    _ctx = _oacinternal_users_lists_show(_api, users_lists_show_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_users_lists_update_ListsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => UserList,
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_users_lists_update(_api::ListsApi, users_lists_update_request::UsersListsUpdateRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_users_lists_update_ListsApi, "/users/lists/update", ["bearerAuth", ], users_lists_update_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""users/lists/update

Update the properties of a list.  **Credential required**: *Yes* / **Permission**: *write:account*

Params:
- users_lists_update_request::UsersListsUpdateRequest (required)

Return: UserList, OpenAPI.Clients.ApiResponse
"""
function users_lists_update(_api::ListsApi, users_lists_update_request::UsersListsUpdateRequest; _mediaType=nothing)
    _ctx = _oacinternal_users_lists_update(_api, users_lists_update_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function users_lists_update(_api::ListsApi, response_stream::Channel, users_lists_update_request::UsersListsUpdateRequest; _mediaType=nothing)
    _ctx = _oacinternal_users_lists_update(_api, users_lists_update_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_users_lists_update_membership_ListsApi = Dict{Regex,Type}(
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_users_lists_update_membership(_api::ListsApi, users_lists_update_membership_request::UsersListsUpdateMembershipRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_users_lists_update_membership_ListsApi, "/users/lists/update-membership", ["bearerAuth", ], users_lists_update_membership_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""users/lists/update-membership

No description provided.  **Credential required**: *Yes* / **Permission**: *write:account*

Params:
- users_lists_update_membership_request::UsersListsUpdateMembershipRequest (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function users_lists_update_membership(_api::ListsApi, users_lists_update_membership_request::UsersListsUpdateMembershipRequest; _mediaType=nothing)
    _ctx = _oacinternal_users_lists_update_membership(_api, users_lists_update_membership_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function users_lists_update_membership(_api::ListsApi, response_stream::Channel, users_lists_update_membership_request::UsersListsUpdateMembershipRequest; _mediaType=nothing)
    _ctx = _oacinternal_users_lists_update_membership(_api, users_lists_update_membership_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export users_lists_create
export users_lists_delete
export users_lists_get_memberships
export users_lists_list
export users_lists_pull
export users_lists_push
export users_lists_show
export users_lists_update
export users_lists_update_membership
