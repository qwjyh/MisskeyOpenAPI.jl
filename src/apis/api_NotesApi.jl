# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct NotesApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `NotesApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ NotesApi }) = "https://misskey.qwjyh.net/api"

const _returntypes_channels_timeline_NotesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Note},
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_channels_timeline(_api::NotesApi, channels_timeline_request::ChannelsTimelineRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_channels_timeline_NotesApi, "/channels/timeline", [], channels_timeline_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""channels/timeline

No description provided.  **Credential required**: *No*

Params:
- channels_timeline_request::ChannelsTimelineRequest (required)

Return: Vector{Note}, OpenAPI.Clients.ApiResponse
"""
function channels_timeline(_api::NotesApi, channels_timeline_request::ChannelsTimelineRequest; _mediaType=nothing)
    _ctx = _oacinternal_channels_timeline(_api, channels_timeline_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function channels_timeline(_api::NotesApi, response_stream::Channel, channels_timeline_request::ChannelsTimelineRequest; _mediaType=nothing)
    _ctx = _oacinternal_channels_timeline(_api, channels_timeline_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_notes_NotesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Note},
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_notes(_api::NotesApi, notes_request::NotesRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_notes_NotesApi, "/notes", [], notes_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""notes

No description provided.  **Credential required**: *No*

Params:
- notes_request::NotesRequest (required)

Return: Vector{Note}, OpenAPI.Clients.ApiResponse
"""
function notes(_api::NotesApi, notes_request::NotesRequest; _mediaType=nothing)
    _ctx = _oacinternal_notes(_api, notes_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function notes(_api::NotesApi, response_stream::Channel, notes_request::NotesRequest; _mediaType=nothing)
    _ctx = _oacinternal_notes(_api, notes_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_notes_children_NotesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Note},
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_notes_children(_api::NotesApi, notes_children_request::NotesChildrenRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_notes_children_NotesApi, "/notes/children", [], notes_children_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""notes/children

No description provided.  **Credential required**: *No*

Params:
- notes_children_request::NotesChildrenRequest (required)

Return: Vector{Note}, OpenAPI.Clients.ApiResponse
"""
function notes_children(_api::NotesApi, notes_children_request::NotesChildrenRequest; _mediaType=nothing)
    _ctx = _oacinternal_notes_children(_api, notes_children_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function notes_children(_api::NotesApi, response_stream::Channel, notes_children_request::NotesChildrenRequest; _mediaType=nothing)
    _ctx = _oacinternal_notes_children(_api, notes_children_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_notes_conversation_NotesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Note},
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_notes_conversation(_api::NotesApi, notes_conversation_request::NotesConversationRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_notes_conversation_NotesApi, "/notes/conversation", [], notes_conversation_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""notes/conversation

No description provided.  **Credential required**: *No*

Params:
- notes_conversation_request::NotesConversationRequest (required)

Return: Vector{Note}, OpenAPI.Clients.ApiResponse
"""
function notes_conversation(_api::NotesApi, notes_conversation_request::NotesConversationRequest; _mediaType=nothing)
    _ctx = _oacinternal_notes_conversation(_api, notes_conversation_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function notes_conversation(_api::NotesApi, response_stream::Channel, notes_conversation_request::NotesConversationRequest; _mediaType=nothing)
    _ctx = _oacinternal_notes_conversation(_api, notes_conversation_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_notes_create_NotesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => NotesCreate200Response,
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("429", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_notes_create(_api::NotesApi, notes_create_request::NotesCreateRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_notes_create_NotesApi, "/notes/create", ["bearerAuth", ], notes_create_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""notes/create

No description provided.  **Credential required**: *Yes* / **Permission**: *write:notes*

Params:
- notes_create_request::NotesCreateRequest (required)

Return: NotesCreate200Response, OpenAPI.Clients.ApiResponse
"""
function notes_create(_api::NotesApi, notes_create_request::NotesCreateRequest; _mediaType=nothing)
    _ctx = _oacinternal_notes_create(_api, notes_create_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function notes_create(_api::NotesApi, response_stream::Channel, notes_create_request::NotesCreateRequest; _mediaType=nothing)
    _ctx = _oacinternal_notes_create(_api, notes_create_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_notes_delete_NotesApi = Dict{Regex,Type}(
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("429", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_notes_delete(_api::NotesApi, i_pin_request::IPinRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_notes_delete_NotesApi, "/notes/delete", ["bearerAuth", ], i_pin_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""notes/delete

No description provided.  **Credential required**: *Yes* / **Permission**: *write:notes*

Params:
- i_pin_request::IPinRequest (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function notes_delete(_api::NotesApi, i_pin_request::IPinRequest; _mediaType=nothing)
    _ctx = _oacinternal_notes_delete(_api, i_pin_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function notes_delete(_api::NotesApi, response_stream::Channel, i_pin_request::IPinRequest; _mediaType=nothing)
    _ctx = _oacinternal_notes_delete(_api, i_pin_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_notes_favorites_create_NotesApi = Dict{Regex,Type}(
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("429", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_notes_favorites_create(_api::NotesApi, i_pin_request::IPinRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_notes_favorites_create_NotesApi, "/notes/favorites/create", ["bearerAuth", ], i_pin_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""notes/favorites/create

No description provided.  **Credential required**: *Yes* / **Permission**: *write:favorites*

Params:
- i_pin_request::IPinRequest (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function notes_favorites_create(_api::NotesApi, i_pin_request::IPinRequest; _mediaType=nothing)
    _ctx = _oacinternal_notes_favorites_create(_api, i_pin_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function notes_favorites_create(_api::NotesApi, response_stream::Channel, i_pin_request::IPinRequest; _mediaType=nothing)
    _ctx = _oacinternal_notes_favorites_create(_api, i_pin_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_notes_favorites_delete_NotesApi = Dict{Regex,Type}(
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_notes_favorites_delete(_api::NotesApi, i_pin_request::IPinRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_notes_favorites_delete_NotesApi, "/notes/favorites/delete", ["bearerAuth", ], i_pin_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""notes/favorites/delete

No description provided.  **Credential required**: *Yes* / **Permission**: *write:favorites*

Params:
- i_pin_request::IPinRequest (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function notes_favorites_delete(_api::NotesApi, i_pin_request::IPinRequest; _mediaType=nothing)
    _ctx = _oacinternal_notes_favorites_delete(_api, i_pin_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function notes_favorites_delete(_api::NotesApi, response_stream::Channel, i_pin_request::IPinRequest; _mediaType=nothing)
    _ctx = _oacinternal_notes_favorites_delete(_api, i_pin_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_notes_featured_NotesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Note},
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_notes_featured(_api::NotesApi, notes_featured_request::NotesFeaturedRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_notes_featured_NotesApi, "/notes/featured", [], notes_featured_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""notes/featured

No description provided.  **Credential required**: *No*

Params:
- notes_featured_request::NotesFeaturedRequest (required)

Return: Vector{Note}, OpenAPI.Clients.ApiResponse
"""
function notes_featured(_api::NotesApi, notes_featured_request::NotesFeaturedRequest; _mediaType=nothing)
    _ctx = _oacinternal_notes_featured(_api, notes_featured_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function notes_featured(_api::NotesApi, response_stream::Channel, notes_featured_request::NotesFeaturedRequest; _mediaType=nothing)
    _ctx = _oacinternal_notes_featured(_api, notes_featured_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_notes_featured_0_NotesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Note},
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_notes_featured_0(_api::NotesApi, notes_featured_request::NotesFeaturedRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_notes_featured_0_NotesApi, "/notes/featured", [], notes_featured_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""notes/featured

No description provided.  **Credential required**: *No*

Params:
- notes_featured_request::NotesFeaturedRequest (required)

Return: Vector{Note}, OpenAPI.Clients.ApiResponse
"""
function notes_featured_0(_api::NotesApi, notes_featured_request::NotesFeaturedRequest; _mediaType=nothing)
    _ctx = _oacinternal_notes_featured_0(_api, notes_featured_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function notes_featured_0(_api::NotesApi, response_stream::Channel, notes_featured_request::NotesFeaturedRequest; _mediaType=nothing)
    _ctx = _oacinternal_notes_featured_0(_api, notes_featured_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_notes_global_timeline_NotesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Note},
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_notes_global_timeline(_api::NotesApi, notes_global_timeline_request::NotesGlobalTimelineRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_notes_global_timeline_NotesApi, "/notes/global-timeline", [], notes_global_timeline_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""notes/global-timeline

No description provided.  **Credential required**: *No*

Params:
- notes_global_timeline_request::NotesGlobalTimelineRequest (required)

Return: Vector{Note}, OpenAPI.Clients.ApiResponse
"""
function notes_global_timeline(_api::NotesApi, notes_global_timeline_request::NotesGlobalTimelineRequest; _mediaType=nothing)
    _ctx = _oacinternal_notes_global_timeline(_api, notes_global_timeline_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function notes_global_timeline(_api::NotesApi, response_stream::Channel, notes_global_timeline_request::NotesGlobalTimelineRequest; _mediaType=nothing)
    _ctx = _oacinternal_notes_global_timeline(_api, notes_global_timeline_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_notes_hybrid_timeline_NotesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Note},
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_notes_hybrid_timeline(_api::NotesApi, notes_hybrid_timeline_request::NotesHybridTimelineRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_notes_hybrid_timeline_NotesApi, "/notes/hybrid-timeline", ["bearerAuth", ], notes_hybrid_timeline_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""notes/hybrid-timeline

No description provided.  **Credential required**: *Yes* / **Permission**: *read:account*

Params:
- notes_hybrid_timeline_request::NotesHybridTimelineRequest (required)

Return: Vector{Note}, OpenAPI.Clients.ApiResponse
"""
function notes_hybrid_timeline(_api::NotesApi, notes_hybrid_timeline_request::NotesHybridTimelineRequest; _mediaType=nothing)
    _ctx = _oacinternal_notes_hybrid_timeline(_api, notes_hybrid_timeline_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function notes_hybrid_timeline(_api::NotesApi, response_stream::Channel, notes_hybrid_timeline_request::NotesHybridTimelineRequest; _mediaType=nothing)
    _ctx = _oacinternal_notes_hybrid_timeline(_api, notes_hybrid_timeline_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_notes_local_timeline_NotesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Note},
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_notes_local_timeline(_api::NotesApi, notes_local_timeline_request::NotesLocalTimelineRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_notes_local_timeline_NotesApi, "/notes/local-timeline", [], notes_local_timeline_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""notes/local-timeline

No description provided.  **Credential required**: *No*

Params:
- notes_local_timeline_request::NotesLocalTimelineRequest (required)

Return: Vector{Note}, OpenAPI.Clients.ApiResponse
"""
function notes_local_timeline(_api::NotesApi, notes_local_timeline_request::NotesLocalTimelineRequest; _mediaType=nothing)
    _ctx = _oacinternal_notes_local_timeline(_api, notes_local_timeline_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function notes_local_timeline(_api::NotesApi, response_stream::Channel, notes_local_timeline_request::NotesLocalTimelineRequest; _mediaType=nothing)
    _ctx = _oacinternal_notes_local_timeline(_api, notes_local_timeline_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_notes_mentions_NotesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Note},
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_notes_mentions(_api::NotesApi, notes_mentions_request::NotesMentionsRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_notes_mentions_NotesApi, "/notes/mentions", ["bearerAuth", ], notes_mentions_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""notes/mentions

No description provided.  **Credential required**: *Yes* / **Permission**: *read:account*

Params:
- notes_mentions_request::NotesMentionsRequest (required)

Return: Vector{Note}, OpenAPI.Clients.ApiResponse
"""
function notes_mentions(_api::NotesApi, notes_mentions_request::NotesMentionsRequest; _mediaType=nothing)
    _ctx = _oacinternal_notes_mentions(_api, notes_mentions_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function notes_mentions(_api::NotesApi, response_stream::Channel, notes_mentions_request::NotesMentionsRequest; _mediaType=nothing)
    _ctx = _oacinternal_notes_mentions(_api, notes_mentions_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_notes_polls_recommendation_NotesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Note},
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_notes_polls_recommendation(_api::NotesApi, notes_polls_recommendation_request::NotesPollsRecommendationRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_notes_polls_recommendation_NotesApi, "/notes/polls/recommendation", ["bearerAuth", ], notes_polls_recommendation_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""notes/polls/recommendation

No description provided.  **Credential required**: *Yes* / **Permission**: *read:account*

Params:
- notes_polls_recommendation_request::NotesPollsRecommendationRequest (required)

Return: Vector{Note}, OpenAPI.Clients.ApiResponse
"""
function notes_polls_recommendation(_api::NotesApi, notes_polls_recommendation_request::NotesPollsRecommendationRequest; _mediaType=nothing)
    _ctx = _oacinternal_notes_polls_recommendation(_api, notes_polls_recommendation_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function notes_polls_recommendation(_api::NotesApi, response_stream::Channel, notes_polls_recommendation_request::NotesPollsRecommendationRequest; _mediaType=nothing)
    _ctx = _oacinternal_notes_polls_recommendation(_api, notes_polls_recommendation_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_notes_polls_vote_NotesApi = Dict{Regex,Type}(
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_notes_polls_vote(_api::NotesApi, notes_polls_vote_request::NotesPollsVoteRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_notes_polls_vote_NotesApi, "/notes/polls/vote", ["bearerAuth", ], notes_polls_vote_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""notes/polls/vote

No description provided.  **Credential required**: *Yes* / **Permission**: *write:votes*

Params:
- notes_polls_vote_request::NotesPollsVoteRequest (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function notes_polls_vote(_api::NotesApi, notes_polls_vote_request::NotesPollsVoteRequest; _mediaType=nothing)
    _ctx = _oacinternal_notes_polls_vote(_api, notes_polls_vote_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function notes_polls_vote(_api::NotesApi, response_stream::Channel, notes_polls_vote_request::NotesPollsVoteRequest; _mediaType=nothing)
    _ctx = _oacinternal_notes_polls_vote(_api, notes_polls_vote_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_notes_reactions_NotesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{NoteReaction},
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_notes_reactions(_api::NotesApi, notes_reactions_request::NotesReactionsRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_notes_reactions_NotesApi, "/notes/reactions", [], notes_reactions_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""notes/reactions

No description provided.  **Credential required**: *No*

Params:
- notes_reactions_request::NotesReactionsRequest (required)

Return: Vector{NoteReaction}, OpenAPI.Clients.ApiResponse
"""
function notes_reactions(_api::NotesApi, notes_reactions_request::NotesReactionsRequest; _mediaType=nothing)
    _ctx = _oacinternal_notes_reactions(_api, notes_reactions_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function notes_reactions(_api::NotesApi, response_stream::Channel, notes_reactions_request::NotesReactionsRequest; _mediaType=nothing)
    _ctx = _oacinternal_notes_reactions(_api, notes_reactions_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_notes_reactions_0_NotesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{NoteReaction},
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_notes_reactions_0(_api::NotesApi, notes_reactions_request::NotesReactionsRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_notes_reactions_0_NotesApi, "/notes/reactions", [], notes_reactions_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""notes/reactions

No description provided.  **Credential required**: *No*

Params:
- notes_reactions_request::NotesReactionsRequest (required)

Return: Vector{NoteReaction}, OpenAPI.Clients.ApiResponse
"""
function notes_reactions_0(_api::NotesApi, notes_reactions_request::NotesReactionsRequest; _mediaType=nothing)
    _ctx = _oacinternal_notes_reactions_0(_api, notes_reactions_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function notes_reactions_0(_api::NotesApi, response_stream::Channel, notes_reactions_request::NotesReactionsRequest; _mediaType=nothing)
    _ctx = _oacinternal_notes_reactions_0(_api, notes_reactions_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_notes_renotes_NotesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Note},
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_notes_renotes(_api::NotesApi, notes_children_request::NotesChildrenRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_notes_renotes_NotesApi, "/notes/renotes", [], notes_children_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""notes/renotes

No description provided.  **Credential required**: *No*

Params:
- notes_children_request::NotesChildrenRequest (required)

Return: Vector{Note}, OpenAPI.Clients.ApiResponse
"""
function notes_renotes(_api::NotesApi, notes_children_request::NotesChildrenRequest; _mediaType=nothing)
    _ctx = _oacinternal_notes_renotes(_api, notes_children_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function notes_renotes(_api::NotesApi, response_stream::Channel, notes_children_request::NotesChildrenRequest; _mediaType=nothing)
    _ctx = _oacinternal_notes_renotes(_api, notes_children_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_notes_replies_NotesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Note},
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_notes_replies(_api::NotesApi, notes_children_request::NotesChildrenRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_notes_replies_NotesApi, "/notes/replies", [], notes_children_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""notes/replies

No description provided.  **Credential required**: *No*

Params:
- notes_children_request::NotesChildrenRequest (required)

Return: Vector{Note}, OpenAPI.Clients.ApiResponse
"""
function notes_replies(_api::NotesApi, notes_children_request::NotesChildrenRequest; _mediaType=nothing)
    _ctx = _oacinternal_notes_replies(_api, notes_children_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function notes_replies(_api::NotesApi, response_stream::Channel, notes_children_request::NotesChildrenRequest; _mediaType=nothing)
    _ctx = _oacinternal_notes_replies(_api, notes_children_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_notes_search_NotesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Note},
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_notes_search(_api::NotesApi, notes_search_request::NotesSearchRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_notes_search_NotesApi, "/notes/search", [], notes_search_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""notes/search

No description provided.  **Credential required**: *No*

Params:
- notes_search_request::NotesSearchRequest (required)

Return: Vector{Note}, OpenAPI.Clients.ApiResponse
"""
function notes_search(_api::NotesApi, notes_search_request::NotesSearchRequest; _mediaType=nothing)
    _ctx = _oacinternal_notes_search(_api, notes_search_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function notes_search(_api::NotesApi, response_stream::Channel, notes_search_request::NotesSearchRequest; _mediaType=nothing)
    _ctx = _oacinternal_notes_search(_api, notes_search_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_notes_search_by_tag_NotesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Note},
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_notes_search_by_tag(_api::NotesApi, notes_search_by_tag_request::NotesSearchByTagRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_notes_search_by_tag_NotesApi, "/notes/search-by-tag", [], notes_search_by_tag_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""notes/search-by-tag

No description provided.  **Credential required**: *No*

Params:
- notes_search_by_tag_request::NotesSearchByTagRequest (required)

Return: Vector{Note}, OpenAPI.Clients.ApiResponse
"""
function notes_search_by_tag(_api::NotesApi, notes_search_by_tag_request::NotesSearchByTagRequest; _mediaType=nothing)
    _ctx = _oacinternal_notes_search_by_tag(_api, notes_search_by_tag_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function notes_search_by_tag(_api::NotesApi, response_stream::Channel, notes_search_by_tag_request::NotesSearchByTagRequest; _mediaType=nothing)
    _ctx = _oacinternal_notes_search_by_tag(_api, notes_search_by_tag_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_notes_show_NotesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Note,
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_notes_show(_api::NotesApi, i_pin_request::IPinRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_notes_show_NotesApi, "/notes/show", [], i_pin_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""notes/show

No description provided.  **Credential required**: *No*

Params:
- i_pin_request::IPinRequest (required)

Return: Note, OpenAPI.Clients.ApiResponse
"""
function notes_show(_api::NotesApi, i_pin_request::IPinRequest; _mediaType=nothing)
    _ctx = _oacinternal_notes_show(_api, i_pin_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function notes_show(_api::NotesApi, response_stream::Channel, i_pin_request::IPinRequest; _mediaType=nothing)
    _ctx = _oacinternal_notes_show(_api, i_pin_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_notes_state_NotesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => NotesState200Response,
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_notes_state(_api::NotesApi, i_pin_request::IPinRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_notes_state_NotesApi, "/notes/state", ["bearerAuth", ], i_pin_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""notes/state

No description provided.  **Credential required**: *Yes* / **Permission**: *read:account*

Params:
- i_pin_request::IPinRequest (required)

Return: NotesState200Response, OpenAPI.Clients.ApiResponse
"""
function notes_state(_api::NotesApi, i_pin_request::IPinRequest; _mediaType=nothing)
    _ctx = _oacinternal_notes_state(_api, i_pin_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function notes_state(_api::NotesApi, response_stream::Channel, i_pin_request::IPinRequest; _mediaType=nothing)
    _ctx = _oacinternal_notes_state(_api, i_pin_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_notes_thread_muting_create_NotesApi = Dict{Regex,Type}(
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("429", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_notes_thread_muting_create(_api::NotesApi, i_pin_request::IPinRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_notes_thread_muting_create_NotesApi, "/notes/thread-muting/create", ["bearerAuth", ], i_pin_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""notes/thread-muting/create

No description provided.  **Credential required**: *Yes* / **Permission**: *write:account*

Params:
- i_pin_request::IPinRequest (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function notes_thread_muting_create(_api::NotesApi, i_pin_request::IPinRequest; _mediaType=nothing)
    _ctx = _oacinternal_notes_thread_muting_create(_api, i_pin_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function notes_thread_muting_create(_api::NotesApi, response_stream::Channel, i_pin_request::IPinRequest; _mediaType=nothing)
    _ctx = _oacinternal_notes_thread_muting_create(_api, i_pin_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_notes_thread_muting_delete_NotesApi = Dict{Regex,Type}(
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_notes_thread_muting_delete(_api::NotesApi, i_pin_request::IPinRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_notes_thread_muting_delete_NotesApi, "/notes/thread-muting/delete", ["bearerAuth", ], i_pin_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""notes/thread-muting/delete

No description provided.  **Credential required**: *Yes* / **Permission**: *write:account*

Params:
- i_pin_request::IPinRequest (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function notes_thread_muting_delete(_api::NotesApi, i_pin_request::IPinRequest; _mediaType=nothing)
    _ctx = _oacinternal_notes_thread_muting_delete(_api, i_pin_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function notes_thread_muting_delete(_api::NotesApi, response_stream::Channel, i_pin_request::IPinRequest; _mediaType=nothing)
    _ctx = _oacinternal_notes_thread_muting_delete(_api, i_pin_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_notes_timeline_NotesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Note},
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_notes_timeline(_api::NotesApi, notes_timeline_request::NotesTimelineRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_notes_timeline_NotesApi, "/notes/timeline", ["bearerAuth", ], notes_timeline_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""notes/timeline

No description provided.  **Credential required**: *Yes* / **Permission**: *read:account*

Params:
- notes_timeline_request::NotesTimelineRequest (required)

Return: Vector{Note}, OpenAPI.Clients.ApiResponse
"""
function notes_timeline(_api::NotesApi, notes_timeline_request::NotesTimelineRequest; _mediaType=nothing)
    _ctx = _oacinternal_notes_timeline(_api, notes_timeline_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function notes_timeline(_api::NotesApi, response_stream::Channel, notes_timeline_request::NotesTimelineRequest; _mediaType=nothing)
    _ctx = _oacinternal_notes_timeline(_api, notes_timeline_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_notes_translate_NotesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => NotesTranslate200Response,
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_notes_translate(_api::NotesApi, notes_translate_request::NotesTranslateRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_notes_translate_NotesApi, "/notes/translate", ["bearerAuth", ], notes_translate_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""notes/translate

No description provided.  **Credential required**: *Yes* / **Permission**: *read:account*

Params:
- notes_translate_request::NotesTranslateRequest (required)

Return: NotesTranslate200Response, OpenAPI.Clients.ApiResponse
"""
function notes_translate(_api::NotesApi, notes_translate_request::NotesTranslateRequest; _mediaType=nothing)
    _ctx = _oacinternal_notes_translate(_api, notes_translate_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function notes_translate(_api::NotesApi, response_stream::Channel, notes_translate_request::NotesTranslateRequest; _mediaType=nothing)
    _ctx = _oacinternal_notes_translate(_api, notes_translate_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_notes_unrenote_NotesApi = Dict{Regex,Type}(
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("429", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_notes_unrenote(_api::NotesApi, i_pin_request::IPinRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_notes_unrenote_NotesApi, "/notes/unrenote", ["bearerAuth", ], i_pin_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""notes/unrenote

No description provided.  **Credential required**: *Yes* / **Permission**: *write:notes*

Params:
- i_pin_request::IPinRequest (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function notes_unrenote(_api::NotesApi, i_pin_request::IPinRequest; _mediaType=nothing)
    _ctx = _oacinternal_notes_unrenote(_api, i_pin_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function notes_unrenote(_api::NotesApi, response_stream::Channel, i_pin_request::IPinRequest; _mediaType=nothing)
    _ctx = _oacinternal_notes_unrenote(_api, i_pin_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_notes_user_list_timeline_NotesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Note},
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_notes_user_list_timeline(_api::NotesApi, notes_user_list_timeline_request::NotesUserListTimelineRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_notes_user_list_timeline_NotesApi, "/notes/user-list-timeline", ["bearerAuth", ], notes_user_list_timeline_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""notes/user-list-timeline

No description provided.  **Credential required**: *Yes* / **Permission**: *read:account*

Params:
- notes_user_list_timeline_request::NotesUserListTimelineRequest (required)

Return: Vector{Note}, OpenAPI.Clients.ApiResponse
"""
function notes_user_list_timeline(_api::NotesApi, notes_user_list_timeline_request::NotesUserListTimelineRequest; _mediaType=nothing)
    _ctx = _oacinternal_notes_user_list_timeline(_api, notes_user_list_timeline_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function notes_user_list_timeline(_api::NotesApi, response_stream::Channel, notes_user_list_timeline_request::NotesUserListTimelineRequest; _mediaType=nothing)
    _ctx = _oacinternal_notes_user_list_timeline(_api, notes_user_list_timeline_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_promo_read_NotesApi = Dict{Regex,Type}(
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_promo_read(_api::NotesApi, i_pin_request::IPinRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_promo_read_NotesApi, "/promo/read", ["bearerAuth", ], i_pin_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""promo/read

No description provided.  **Credential required**: *Yes* / **Permission**: *write:account*

Params:
- i_pin_request::IPinRequest (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function promo_read(_api::NotesApi, i_pin_request::IPinRequest; _mediaType=nothing)
    _ctx = _oacinternal_promo_read(_api, i_pin_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function promo_read(_api::NotesApi, response_stream::Channel, i_pin_request::IPinRequest; _mediaType=nothing)
    _ctx = _oacinternal_promo_read(_api, i_pin_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_users_featured_notes_NotesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Note},
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_users_featured_notes(_api::NotesApi, users_featured_notes_request::UsersFeaturedNotesRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_users_featured_notes_NotesApi, "/users/featured-notes", [], users_featured_notes_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""users/featured-notes

No description provided.  **Credential required**: *No*

Params:
- users_featured_notes_request::UsersFeaturedNotesRequest (required)

Return: Vector{Note}, OpenAPI.Clients.ApiResponse
"""
function users_featured_notes(_api::NotesApi, users_featured_notes_request::UsersFeaturedNotesRequest; _mediaType=nothing)
    _ctx = _oacinternal_users_featured_notes(_api, users_featured_notes_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function users_featured_notes(_api::NotesApi, response_stream::Channel, users_featured_notes_request::UsersFeaturedNotesRequest; _mediaType=nothing)
    _ctx = _oacinternal_users_featured_notes(_api, users_featured_notes_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_users_featured_notes_0_NotesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Note},
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_users_featured_notes_0(_api::NotesApi, users_featured_notes_request::UsersFeaturedNotesRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_users_featured_notes_0_NotesApi, "/users/featured-notes", [], users_featured_notes_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""users/featured-notes

No description provided.  **Credential required**: *No*

Params:
- users_featured_notes_request::UsersFeaturedNotesRequest (required)

Return: Vector{Note}, OpenAPI.Clients.ApiResponse
"""
function users_featured_notes_0(_api::NotesApi, users_featured_notes_request::UsersFeaturedNotesRequest; _mediaType=nothing)
    _ctx = _oacinternal_users_featured_notes_0(_api, users_featured_notes_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function users_featured_notes_0(_api::NotesApi, response_stream::Channel, users_featured_notes_request::UsersFeaturedNotesRequest; _mediaType=nothing)
    _ctx = _oacinternal_users_featured_notes_0(_api, users_featured_notes_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export channels_timeline
export notes
export notes_children
export notes_conversation
export notes_create
export notes_delete
export notes_favorites_create
export notes_favorites_delete
export notes_featured
export notes_featured_0
export notes_global_timeline
export notes_hybrid_timeline
export notes_local_timeline
export notes_mentions
export notes_polls_recommendation
export notes_polls_vote
export notes_reactions
export notes_reactions_0
export notes_renotes
export notes_replies
export notes_search
export notes_search_by_tag
export notes_show
export notes_state
export notes_thread_muting_create
export notes_thread_muting_delete
export notes_timeline
export notes_translate
export notes_unrenote
export notes_user_list_timeline
export promo_read
export users_featured_notes
export users_featured_notes_0
