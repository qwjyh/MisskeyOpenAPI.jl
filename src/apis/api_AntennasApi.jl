# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct AntennasApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `AntennasApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ AntennasApi }) = "https://misskey.qwjyh.net/api"

const _returntypes_antennas_create_AntennasApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Antenna,
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_antennas_create(_api::AntennasApi, antennas_create_request::AntennasCreateRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_antennas_create_AntennasApi, "/antennas/create", ["bearerAuth", ], antennas_create_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""antennas/create

No description provided.  **Credential required**: *Yes* / **Permission**: *write:account*

Params:
- antennas_create_request::AntennasCreateRequest (required)

Return: Antenna, OpenAPI.Clients.ApiResponse
"""
function antennas_create(_api::AntennasApi, antennas_create_request::AntennasCreateRequest; _mediaType=nothing)
    _ctx = _oacinternal_antennas_create(_api, antennas_create_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function antennas_create(_api::AntennasApi, response_stream::Channel, antennas_create_request::AntennasCreateRequest; _mediaType=nothing)
    _ctx = _oacinternal_antennas_create(_api, antennas_create_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_antennas_delete_AntennasApi = Dict{Regex,Type}(
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_antennas_delete(_api::AntennasApi, antennas_delete_request::AntennasDeleteRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_antennas_delete_AntennasApi, "/antennas/delete", ["bearerAuth", ], antennas_delete_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""antennas/delete

No description provided.  **Credential required**: *Yes* / **Permission**: *write:account*

Params:
- antennas_delete_request::AntennasDeleteRequest (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function antennas_delete(_api::AntennasApi, antennas_delete_request::AntennasDeleteRequest; _mediaType=nothing)
    _ctx = _oacinternal_antennas_delete(_api, antennas_delete_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function antennas_delete(_api::AntennasApi, response_stream::Channel, antennas_delete_request::AntennasDeleteRequest; _mediaType=nothing)
    _ctx = _oacinternal_antennas_delete(_api, antennas_delete_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_antennas_list_AntennasApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Antenna},
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_antennas_list(_api::AntennasApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_antennas_list_AntennasApi, "/antennas/list", ["bearerAuth", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""antennas/list

No description provided.  **Credential required**: *Yes* / **Permission**: *read:account*

Params:

Return: Vector{Antenna}, OpenAPI.Clients.ApiResponse
"""
function antennas_list(_api::AntennasApi; _mediaType=nothing)
    _ctx = _oacinternal_antennas_list(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function antennas_list(_api::AntennasApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_antennas_list(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_antennas_notes_AntennasApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Note},
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_antennas_notes(_api::AntennasApi, antennas_notes_request::AntennasNotesRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_antennas_notes_AntennasApi, "/antennas/notes", ["bearerAuth", ], antennas_notes_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""antennas/notes

No description provided.  **Credential required**: *Yes* / **Permission**: *read:account*

Params:
- antennas_notes_request::AntennasNotesRequest (required)

Return: Vector{Note}, OpenAPI.Clients.ApiResponse
"""
function antennas_notes(_api::AntennasApi, antennas_notes_request::AntennasNotesRequest; _mediaType=nothing)
    _ctx = _oacinternal_antennas_notes(_api, antennas_notes_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function antennas_notes(_api::AntennasApi, response_stream::Channel, antennas_notes_request::AntennasNotesRequest; _mediaType=nothing)
    _ctx = _oacinternal_antennas_notes(_api, antennas_notes_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_antennas_show_AntennasApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Antenna,
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_antennas_show(_api::AntennasApi, antennas_delete_request::AntennasDeleteRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_antennas_show_AntennasApi, "/antennas/show", ["bearerAuth", ], antennas_delete_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""antennas/show

No description provided.  **Credential required**: *Yes* / **Permission**: *read:account*

Params:
- antennas_delete_request::AntennasDeleteRequest (required)

Return: Antenna, OpenAPI.Clients.ApiResponse
"""
function antennas_show(_api::AntennasApi, antennas_delete_request::AntennasDeleteRequest; _mediaType=nothing)
    _ctx = _oacinternal_antennas_show(_api, antennas_delete_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function antennas_show(_api::AntennasApi, response_stream::Channel, antennas_delete_request::AntennasDeleteRequest; _mediaType=nothing)
    _ctx = _oacinternal_antennas_show(_api, antennas_delete_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_antennas_update_AntennasApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Antenna,
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_antennas_update(_api::AntennasApi, antennas_update_request::AntennasUpdateRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_antennas_update_AntennasApi, "/antennas/update", ["bearerAuth", ], antennas_update_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""antennas/update

No description provided.  **Credential required**: *Yes* / **Permission**: *write:account*

Params:
- antennas_update_request::AntennasUpdateRequest (required)

Return: Antenna, OpenAPI.Clients.ApiResponse
"""
function antennas_update(_api::AntennasApi, antennas_update_request::AntennasUpdateRequest; _mediaType=nothing)
    _ctx = _oacinternal_antennas_update(_api, antennas_update_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function antennas_update(_api::AntennasApi, response_stream::Channel, antennas_update_request::AntennasUpdateRequest; _mediaType=nothing)
    _ctx = _oacinternal_antennas_update(_api, antennas_update_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export antennas_create
export antennas_delete
export antennas_list
export antennas_notes
export antennas_show
export antennas_update
