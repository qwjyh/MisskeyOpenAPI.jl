# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct UsersApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `UsersApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ UsersApi }) = "https://misskey.qwjyh.net/api"

const _returntypes_email_address_available_UsersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => EmailAddressAvailable200Response,
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_email_address_available(_api::UsersApi, email_address_available_request::EmailAddressAvailableRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_email_address_available_UsersApi, "/email-address/available", [], email_address_available_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""email-address/available

No description provided.  **Credential required**: *No*

Params:
- email_address_available_request::EmailAddressAvailableRequest (required)

Return: EmailAddressAvailable200Response, OpenAPI.Clients.ApiResponse
"""
function email_address_available(_api::UsersApi, email_address_available_request::EmailAddressAvailableRequest; _mediaType=nothing)
    _ctx = _oacinternal_email_address_available(_api, email_address_available_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function email_address_available(_api::UsersApi, response_stream::Channel, email_address_available_request::EmailAddressAvailableRequest; _mediaType=nothing)
    _ctx = _oacinternal_email_address_available(_api, email_address_available_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_avatar_decorations_UsersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{GetAvatarDecorations200ResponseInner},
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_get_avatar_decorations(_api::UsersApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_get_avatar_decorations_UsersApi, "/get-avatar-decorations", [])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""get-avatar-decorations

No description provided.  **Credential required**: *No*

Params:

Return: Vector{GetAvatarDecorations200ResponseInner}, OpenAPI.Clients.ApiResponse
"""
function get_avatar_decorations(_api::UsersApi; _mediaType=nothing)
    _ctx = _oacinternal_get_avatar_decorations(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_avatar_decorations(_api::UsersApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_get_avatar_decorations(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_i_move_UsersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("429", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_i_move(_api::UsersApi, i_move_request::IMoveRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_i_move_UsersApi, "/i/move", ["bearerAuth", ], i_move_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""i/move

No description provided.  **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties. **Credential required**: *Yes*

Params:
- i_move_request::IMoveRequest (required)

Return: Any, OpenAPI.Clients.ApiResponse
"""
function i_move(_api::UsersApi, i_move_request::IMoveRequest; _mediaType=nothing)
    _ctx = _oacinternal_i_move(_api, i_move_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function i_move(_api::UsersApi, response_stream::Channel, i_move_request::IMoveRequest; _mediaType=nothing)
    _ctx = _oacinternal_i_move(_api, i_move_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_pinned_users_UsersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{UserDetailed},
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_pinned_users(_api::UsersApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_pinned_users_UsersApi, "/pinned-users", [])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""pinned-users

No description provided.  **Credential required**: *No*

Params:

Return: Vector{UserDetailed}, OpenAPI.Clients.ApiResponse
"""
function pinned_users(_api::UsersApi; _mediaType=nothing)
    _ctx = _oacinternal_pinned_users(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function pinned_users(_api::UsersApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_pinned_users(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_retention_UsersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Retention200ResponseInner},
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_retention(_api::UsersApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_retention_UsersApi, "/retention", [])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""retention

No description provided.  **Credential required**: *No*

Params:

Return: Vector{Retention200ResponseInner}, OpenAPI.Clients.ApiResponse
"""
function retention(_api::UsersApi; _mediaType=nothing)
    _ctx = _oacinternal_retention(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function retention(_api::UsersApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_retention(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_retention_0_UsersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Retention200ResponseInner},
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_retention_0(_api::UsersApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_retention_0_UsersApi, "/retention", [])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""retention

No description provided.  **Credential required**: *No*

Params:

Return: Vector{Retention200ResponseInner}, OpenAPI.Clients.ApiResponse
"""
function retention_0(_api::UsersApi; _mediaType=nothing)
    _ctx = _oacinternal_retention_0(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function retention_0(_api::UsersApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_retention_0(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_username_available_UsersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => UsernameAvailable200Response,
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_username_available(_api::UsersApi, username_available_request::UsernameAvailableRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_username_available_UsersApi, "/username/available", [], username_available_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""username/available

No description provided.  **Credential required**: *No*

Params:
- username_available_request::UsernameAvailableRequest (required)

Return: UsernameAvailable200Response, OpenAPI.Clients.ApiResponse
"""
function username_available(_api::UsersApi, username_available_request::UsernameAvailableRequest; _mediaType=nothing)
    _ctx = _oacinternal_username_available(_api, username_available_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function username_available(_api::UsersApi, response_stream::Channel, username_available_request::UsernameAvailableRequest; _mediaType=nothing)
    _ctx = _oacinternal_username_available(_api, username_available_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_users_UsersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{UserDetailed},
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_users(_api::UsersApi, users_request::UsersRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_users_UsersApi, "/users", [], users_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""users

No description provided.  **Credential required**: *No*

Params:
- users_request::UsersRequest (required)

Return: Vector{UserDetailed}, OpenAPI.Clients.ApiResponse
"""
function users(_api::UsersApi, users_request::UsersRequest; _mediaType=nothing)
    _ctx = _oacinternal_users(_api, users_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function users(_api::UsersApi, response_stream::Channel, users_request::UsersRequest; _mediaType=nothing)
    _ctx = _oacinternal_users(_api, users_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_users_clips_UsersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Clip},
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_users_clips(_api::UsersApi, users_clips_request::UsersClipsRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_users_clips_UsersApi, "/users/clips", [], users_clips_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""users/clips

Show all clips this user owns.  **Credential required**: *No*

Params:
- users_clips_request::UsersClipsRequest (required)

Return: Vector{Clip}, OpenAPI.Clients.ApiResponse
"""
function users_clips(_api::UsersApi, users_clips_request::UsersClipsRequest; _mediaType=nothing)
    _ctx = _oacinternal_users_clips(_api, users_clips_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function users_clips(_api::UsersApi, response_stream::Channel, users_clips_request::UsersClipsRequest; _mediaType=nothing)
    _ctx = _oacinternal_users_clips(_api, users_clips_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_users_flashs_UsersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Flash},
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_users_flashs(_api::UsersApi, users_clips_request::UsersClipsRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_users_flashs_UsersApi, "/users/flashs", [], users_clips_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""users/flashs

Show all flashs this user created.  **Credential required**: *No*

Params:
- users_clips_request::UsersClipsRequest (required)

Return: Vector{Flash}, OpenAPI.Clients.ApiResponse
"""
function users_flashs(_api::UsersApi, users_clips_request::UsersClipsRequest; _mediaType=nothing)
    _ctx = _oacinternal_users_flashs(_api, users_clips_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function users_flashs(_api::UsersApi, response_stream::Channel, users_clips_request::UsersClipsRequest; _mediaType=nothing)
    _ctx = _oacinternal_users_flashs(_api, users_clips_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_users_followers_UsersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Following},
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_users_followers(_api::UsersApi, users_followers_request::UsersFollowersRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_users_followers_UsersApi, "/users/followers", [], users_followers_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""users/followers

Show everyone that follows this user.  **Credential required**: *No*

Params:
- users_followers_request::UsersFollowersRequest (required)

Return: Vector{Following}, OpenAPI.Clients.ApiResponse
"""
function users_followers(_api::UsersApi, users_followers_request::UsersFollowersRequest; _mediaType=nothing)
    _ctx = _oacinternal_users_followers(_api, users_followers_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function users_followers(_api::UsersApi, response_stream::Channel, users_followers_request::UsersFollowersRequest; _mediaType=nothing)
    _ctx = _oacinternal_users_followers(_api, users_followers_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_users_following_UsersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Following},
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_users_following(_api::UsersApi, users_following_request::UsersFollowingRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_users_following_UsersApi, "/users/following", [], users_following_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""users/following

Show everyone that this user is following.  **Credential required**: *No*

Params:
- users_following_request::UsersFollowingRequest (required)

Return: Vector{Following}, OpenAPI.Clients.ApiResponse
"""
function users_following(_api::UsersApi, users_following_request::UsersFollowingRequest; _mediaType=nothing)
    _ctx = _oacinternal_users_following(_api, users_following_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function users_following(_api::UsersApi, response_stream::Channel, users_following_request::UsersFollowingRequest; _mediaType=nothing)
    _ctx = _oacinternal_users_following(_api, users_following_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_users_gallery_posts_UsersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{GalleryPost},
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_users_gallery_posts(_api::UsersApi, users_clips_request::UsersClipsRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_users_gallery_posts_UsersApi, "/users/gallery/posts", [], users_clips_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""users/gallery/posts

Show all gallery posts by the given user.  **Credential required**: *No*

Params:
- users_clips_request::UsersClipsRequest (required)

Return: Vector{GalleryPost}, OpenAPI.Clients.ApiResponse
"""
function users_gallery_posts(_api::UsersApi, users_clips_request::UsersClipsRequest; _mediaType=nothing)
    _ctx = _oacinternal_users_gallery_posts(_api, users_clips_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function users_gallery_posts(_api::UsersApi, response_stream::Channel, users_clips_request::UsersClipsRequest; _mediaType=nothing)
    _ctx = _oacinternal_users_gallery_posts(_api, users_clips_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_users_get_frequently_replied_users_UsersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{UsersGetFrequentlyRepliedUsers200ResponseInner},
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_users_get_frequently_replied_users(_api::UsersApi, users_get_frequently_replied_users_request::UsersGetFrequentlyRepliedUsersRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_users_get_frequently_replied_users_UsersApi, "/users/get-frequently-replied-users", [], users_get_frequently_replied_users_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""users/get-frequently-replied-users

Get a list of other users that the specified user frequently replies to.  **Credential required**: *No*

Params:
- users_get_frequently_replied_users_request::UsersGetFrequentlyRepliedUsersRequest (required)

Return: Vector{UsersGetFrequentlyRepliedUsers200ResponseInner}, OpenAPI.Clients.ApiResponse
"""
function users_get_frequently_replied_users(_api::UsersApi, users_get_frequently_replied_users_request::UsersGetFrequentlyRepliedUsersRequest; _mediaType=nothing)
    _ctx = _oacinternal_users_get_frequently_replied_users(_api, users_get_frequently_replied_users_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function users_get_frequently_replied_users(_api::UsersApi, response_stream::Channel, users_get_frequently_replied_users_request::UsersGetFrequentlyRepliedUsersRequest; _mediaType=nothing)
    _ctx = _oacinternal_users_get_frequently_replied_users(_api, users_get_frequently_replied_users_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_users_notes_UsersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Note},
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_users_notes(_api::UsersApi, users_notes_request::UsersNotesRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_users_notes_UsersApi, "/users/notes", [], users_notes_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""users/notes

No description provided.  **Credential required**: *No*

Params:
- users_notes_request::UsersNotesRequest (required)

Return: Vector{Note}, OpenAPI.Clients.ApiResponse
"""
function users_notes(_api::UsersApi, users_notes_request::UsersNotesRequest; _mediaType=nothing)
    _ctx = _oacinternal_users_notes(_api, users_notes_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function users_notes(_api::UsersApi, response_stream::Channel, users_notes_request::UsersNotesRequest; _mediaType=nothing)
    _ctx = _oacinternal_users_notes(_api, users_notes_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_users_pages_UsersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Page},
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_users_pages(_api::UsersApi, users_clips_request::UsersClipsRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_users_pages_UsersApi, "/users/pages", [], users_clips_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""users/pages

Show all pages this user created.  **Credential required**: *No*

Params:
- users_clips_request::UsersClipsRequest (required)

Return: Vector{Page}, OpenAPI.Clients.ApiResponse
"""
function users_pages(_api::UsersApi, users_clips_request::UsersClipsRequest; _mediaType=nothing)
    _ctx = _oacinternal_users_pages(_api, users_clips_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function users_pages(_api::UsersApi, response_stream::Channel, users_clips_request::UsersClipsRequest; _mediaType=nothing)
    _ctx = _oacinternal_users_pages(_api, users_clips_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_users_reactions_UsersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{NoteReaction},
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_users_reactions(_api::UsersApi, users_reactions_request::UsersReactionsRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_users_reactions_UsersApi, "/users/reactions", [], users_reactions_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""users/reactions

Show all reactions this user made.  **Credential required**: *No*

Params:
- users_reactions_request::UsersReactionsRequest (required)

Return: Vector{NoteReaction}, OpenAPI.Clients.ApiResponse
"""
function users_reactions(_api::UsersApi, users_reactions_request::UsersReactionsRequest; _mediaType=nothing)
    _ctx = _oacinternal_users_reactions(_api, users_reactions_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function users_reactions(_api::UsersApi, response_stream::Channel, users_reactions_request::UsersReactionsRequest; _mediaType=nothing)
    _ctx = _oacinternal_users_reactions(_api, users_reactions_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_users_recommendation_UsersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{UserDetailed},
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_users_recommendation(_api::UsersApi, my_apps_request::MyAppsRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_users_recommendation_UsersApi, "/users/recommendation", ["bearerAuth", ], my_apps_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""users/recommendation

Show users that the authenticated user might be interested to follow.  **Credential required**: *Yes* / **Permission**: *read:account*

Params:
- my_apps_request::MyAppsRequest (required)

Return: Vector{UserDetailed}, OpenAPI.Clients.ApiResponse
"""
function users_recommendation(_api::UsersApi, my_apps_request::MyAppsRequest; _mediaType=nothing)
    _ctx = _oacinternal_users_recommendation(_api, my_apps_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function users_recommendation(_api::UsersApi, response_stream::Channel, my_apps_request::MyAppsRequest; _mediaType=nothing)
    _ctx = _oacinternal_users_recommendation(_api, my_apps_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_users_relation_UsersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => UsersRelation200Response,
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_users_relation(_api::UsersApi, users_relation_request::UsersRelationRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_users_relation_UsersApi, "/users/relation", ["bearerAuth", ], users_relation_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""users/relation

Show the different kinds of relations between the authenticated user and the specified user(s).  **Credential required**: *Yes* / **Permission**: *read:account*

Params:
- users_relation_request::UsersRelationRequest (required)

Return: UsersRelation200Response, OpenAPI.Clients.ApiResponse
"""
function users_relation(_api::UsersApi, users_relation_request::UsersRelationRequest; _mediaType=nothing)
    _ctx = _oacinternal_users_relation(_api, users_relation_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function users_relation(_api::UsersApi, response_stream::Channel, users_relation_request::UsersRelationRequest; _mediaType=nothing)
    _ctx = _oacinternal_users_relation(_api, users_relation_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_users_report_abuse_UsersApi = Dict{Regex,Type}(
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_users_report_abuse(_api::UsersApi, users_report_abuse_request::UsersReportAbuseRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_users_report_abuse_UsersApi, "/users/report-abuse", ["bearerAuth", ], users_report_abuse_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""users/report-abuse

File a report.  **Credential required**: *Yes* / **Permission**: *write:report-abuse*

Params:
- users_report_abuse_request::UsersReportAbuseRequest (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function users_report_abuse(_api::UsersApi, users_report_abuse_request::UsersReportAbuseRequest; _mediaType=nothing)
    _ctx = _oacinternal_users_report_abuse(_api, users_report_abuse_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function users_report_abuse(_api::UsersApi, response_stream::Channel, users_report_abuse_request::UsersReportAbuseRequest; _mediaType=nothing)
    _ctx = _oacinternal_users_report_abuse(_api, users_report_abuse_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_users_search_UsersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{User},
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_users_search(_api::UsersApi, users_search_request::UsersSearchRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_users_search_UsersApi, "/users/search", [], users_search_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""users/search

Search for users.  **Credential required**: *No*

Params:
- users_search_request::UsersSearchRequest (required)

Return: Vector{User}, OpenAPI.Clients.ApiResponse
"""
function users_search(_api::UsersApi, users_search_request::UsersSearchRequest; _mediaType=nothing)
    _ctx = _oacinternal_users_search(_api, users_search_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function users_search(_api::UsersApi, response_stream::Channel, users_search_request::UsersSearchRequest; _mediaType=nothing)
    _ctx = _oacinternal_users_search(_api, users_search_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_users_search_by_username_and_host_UsersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{User},
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_users_search_by_username_and_host(_api::UsersApi, users_search_by_username_and_host_request::UsersSearchByUsernameAndHostRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_users_search_by_username_and_host_UsersApi, "/users/search-by-username-and-host", [], users_search_by_username_and_host_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""users/search-by-username-and-host

Search for a user by username and/or host.  **Credential required**: *No*

Params:
- users_search_by_username_and_host_request::UsersSearchByUsernameAndHostRequest (required)

Return: Vector{User}, OpenAPI.Clients.ApiResponse
"""
function users_search_by_username_and_host(_api::UsersApi, users_search_by_username_and_host_request::UsersSearchByUsernameAndHostRequest; _mediaType=nothing)
    _ctx = _oacinternal_users_search_by_username_and_host(_api, users_search_by_username_and_host_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function users_search_by_username_and_host(_api::UsersApi, response_stream::Channel, users_search_by_username_and_host_request::UsersSearchByUsernameAndHostRequest; _mediaType=nothing)
    _ctx = _oacinternal_users_search_by_username_and_host(_api, users_search_by_username_and_host_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_users_show_UsersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => UsersShow200Response,
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_users_show(_api::UsersApi, users_show_request::UsersShowRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_users_show_UsersApi, "/users/show", [], users_show_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""users/show

Show the properties of a user.  **Credential required**: *No*

Params:
- users_show_request::UsersShowRequest (required)

Return: UsersShow200Response, OpenAPI.Clients.ApiResponse
"""
function users_show(_api::UsersApi, users_show_request::UsersShowRequest; _mediaType=nothing)
    _ctx = _oacinternal_users_show(_api, users_show_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function users_show(_api::UsersApi, response_stream::Channel, users_show_request::UsersShowRequest; _mediaType=nothing)
    _ctx = _oacinternal_users_show(_api, users_show_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export email_address_available
export get_avatar_decorations
export i_move
export pinned_users
export retention
export retention_0
export username_available
export users
export users_clips
export users_flashs
export users_followers
export users_following
export users_gallery_posts
export users_get_frequently_replied_users
export users_notes
export users_pages
export users_reactions
export users_recommendation
export users_relation
export users_report_abuse
export users_search
export users_search_by_username_and_host
export users_show
