# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct FlashApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `FlashApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ FlashApi }) = "https://misskey.qwjyh.net/api"

const _returntypes_flash_create_FlashApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Flash,
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("429", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_flash_create(_api::FlashApi, flash_create_request::FlashCreateRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_flash_create_FlashApi, "/flash/create", ["bearerAuth", ], flash_create_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""flash/create

No description provided.  **Credential required**: *Yes* / **Permission**: *write:flash*

Params:
- flash_create_request::FlashCreateRequest (required)

Return: Flash, OpenAPI.Clients.ApiResponse
"""
function flash_create(_api::FlashApi, flash_create_request::FlashCreateRequest; _mediaType=nothing)
    _ctx = _oacinternal_flash_create(_api, flash_create_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function flash_create(_api::FlashApi, response_stream::Channel, flash_create_request::FlashCreateRequest; _mediaType=nothing)
    _ctx = _oacinternal_flash_create(_api, flash_create_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_flash_featured_FlashApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Flash},
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_flash_featured(_api::FlashApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_flash_featured_FlashApi, "/flash/featured", [])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""flash/featured

No description provided.  **Credential required**: *No*

Params:

Return: Vector{Flash}, OpenAPI.Clients.ApiResponse
"""
function flash_featured(_api::FlashApi; _mediaType=nothing)
    _ctx = _oacinternal_flash_featured(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function flash_featured(_api::FlashApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_flash_featured(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_flash_like_FlashApi = Dict{Regex,Type}(
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_flash_like(_api::FlashApi, flash_delete_request::FlashDeleteRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_flash_like_FlashApi, "/flash/like", ["bearerAuth", ], flash_delete_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""flash/like

No description provided.  **Credential required**: *Yes* / **Permission**: *write:flash-likes*

Params:
- flash_delete_request::FlashDeleteRequest (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function flash_like(_api::FlashApi, flash_delete_request::FlashDeleteRequest; _mediaType=nothing)
    _ctx = _oacinternal_flash_like(_api, flash_delete_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function flash_like(_api::FlashApi, response_stream::Channel, flash_delete_request::FlashDeleteRequest; _mediaType=nothing)
    _ctx = _oacinternal_flash_like(_api, flash_delete_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_flash_unlike_FlashApi = Dict{Regex,Type}(
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_flash_unlike(_api::FlashApi, flash_delete_request::FlashDeleteRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_flash_unlike_FlashApi, "/flash/unlike", ["bearerAuth", ], flash_delete_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""flash/unlike

No description provided.  **Credential required**: *Yes* / **Permission**: *write:flash-likes*

Params:
- flash_delete_request::FlashDeleteRequest (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function flash_unlike(_api::FlashApi, flash_delete_request::FlashDeleteRequest; _mediaType=nothing)
    _ctx = _oacinternal_flash_unlike(_api, flash_delete_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function flash_unlike(_api::FlashApi, response_stream::Channel, flash_delete_request::FlashDeleteRequest; _mediaType=nothing)
    _ctx = _oacinternal_flash_unlike(_api, flash_delete_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_flash_update_FlashApi = Dict{Regex,Type}(
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("429", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_flash_update(_api::FlashApi, flash_update_request::FlashUpdateRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_flash_update_FlashApi, "/flash/update", ["bearerAuth", ], flash_update_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""flash/update

No description provided.  **Credential required**: *Yes* / **Permission**: *write:flash*

Params:
- flash_update_request::FlashUpdateRequest (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function flash_update(_api::FlashApi, flash_update_request::FlashUpdateRequest; _mediaType=nothing)
    _ctx = _oacinternal_flash_update(_api, flash_update_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function flash_update(_api::FlashApi, response_stream::Channel, flash_update_request::FlashUpdateRequest; _mediaType=nothing)
    _ctx = _oacinternal_flash_update(_api, flash_update_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export flash_create
export flash_featured
export flash_like
export flash_unlike
export flash_update
