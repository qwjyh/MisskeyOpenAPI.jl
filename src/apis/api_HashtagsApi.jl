# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct HashtagsApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `HashtagsApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ HashtagsApi }) = "https://misskey.qwjyh.net/api"

const _returntypes_hashtags_list_HashtagsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Hashtag},
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_hashtags_list(_api::HashtagsApi, hashtags_list_request::HashtagsListRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_hashtags_list_HashtagsApi, "/hashtags/list", [], hashtags_list_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""hashtags/list

No description provided.  **Credential required**: *No*

Params:
- hashtags_list_request::HashtagsListRequest (required)

Return: Vector{Hashtag}, OpenAPI.Clients.ApiResponse
"""
function hashtags_list(_api::HashtagsApi, hashtags_list_request::HashtagsListRequest; _mediaType=nothing)
    _ctx = _oacinternal_hashtags_list(_api, hashtags_list_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function hashtags_list(_api::HashtagsApi, response_stream::Channel, hashtags_list_request::HashtagsListRequest; _mediaType=nothing)
    _ctx = _oacinternal_hashtags_list(_api, hashtags_list_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_hashtags_search_HashtagsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{String},
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_hashtags_search(_api::HashtagsApi, hashtags_search_request::HashtagsSearchRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_hashtags_search_HashtagsApi, "/hashtags/search", [], hashtags_search_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""hashtags/search

No description provided.  **Credential required**: *No*

Params:
- hashtags_search_request::HashtagsSearchRequest (required)

Return: Vector{String}, OpenAPI.Clients.ApiResponse
"""
function hashtags_search(_api::HashtagsApi, hashtags_search_request::HashtagsSearchRequest; _mediaType=nothing)
    _ctx = _oacinternal_hashtags_search(_api, hashtags_search_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function hashtags_search(_api::HashtagsApi, response_stream::Channel, hashtags_search_request::HashtagsSearchRequest; _mediaType=nothing)
    _ctx = _oacinternal_hashtags_search(_api, hashtags_search_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_hashtags_show_HashtagsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Hashtag,
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_hashtags_show(_api::HashtagsApi, hashtags_show_request::HashtagsShowRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_hashtags_show_HashtagsApi, "/hashtags/show", [], hashtags_show_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""hashtags/show

No description provided.  **Credential required**: *No*

Params:
- hashtags_show_request::HashtagsShowRequest (required)

Return: Hashtag, OpenAPI.Clients.ApiResponse
"""
function hashtags_show(_api::HashtagsApi, hashtags_show_request::HashtagsShowRequest; _mediaType=nothing)
    _ctx = _oacinternal_hashtags_show(_api, hashtags_show_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function hashtags_show(_api::HashtagsApi, response_stream::Channel, hashtags_show_request::HashtagsShowRequest; _mediaType=nothing)
    _ctx = _oacinternal_hashtags_show(_api, hashtags_show_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_hashtags_trend_HashtagsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{HashtagsTrend200ResponseInner},
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_hashtags_trend(_api::HashtagsApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_hashtags_trend_HashtagsApi, "/hashtags/trend", [])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""hashtags/trend

No description provided.  **Credential required**: *No*

Params:

Return: Vector{HashtagsTrend200ResponseInner}, OpenAPI.Clients.ApiResponse
"""
function hashtags_trend(_api::HashtagsApi; _mediaType=nothing)
    _ctx = _oacinternal_hashtags_trend(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function hashtags_trend(_api::HashtagsApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_hashtags_trend(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_hashtags_trend_0_HashtagsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{HashtagsTrend200ResponseInner},
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_hashtags_trend_0(_api::HashtagsApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_hashtags_trend_0_HashtagsApi, "/hashtags/trend", [])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""hashtags/trend

No description provided.  **Credential required**: *No*

Params:

Return: Vector{HashtagsTrend200ResponseInner}, OpenAPI.Clients.ApiResponse
"""
function hashtags_trend_0(_api::HashtagsApi; _mediaType=nothing)
    _ctx = _oacinternal_hashtags_trend_0(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function hashtags_trend_0(_api::HashtagsApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_hashtags_trend_0(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_hashtags_users_HashtagsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{UserDetailed},
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_hashtags_users(_api::HashtagsApi, hashtags_users_request::HashtagsUsersRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_hashtags_users_HashtagsApi, "/hashtags/users", [], hashtags_users_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""hashtags/users

No description provided.  **Credential required**: *No*

Params:
- hashtags_users_request::HashtagsUsersRequest (required)

Return: Vector{UserDetailed}, OpenAPI.Clients.ApiResponse
"""
function hashtags_users(_api::HashtagsApi, hashtags_users_request::HashtagsUsersRequest; _mediaType=nothing)
    _ctx = _oacinternal_hashtags_users(_api, hashtags_users_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function hashtags_users(_api::HashtagsApi, response_stream::Channel, hashtags_users_request::HashtagsUsersRequest; _mediaType=nothing)
    _ctx = _oacinternal_hashtags_users(_api, hashtags_users_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export hashtags_list
export hashtags_search
export hashtags_show
export hashtags_trend
export hashtags_trend_0
export hashtags_users
