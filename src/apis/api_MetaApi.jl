# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct MetaApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `MetaApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ MetaApi }) = "https://misskey.qwjyh.net/api"

const _returntypes_admin_meta_MetaApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => AdminMeta200Response,
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_admin_meta(_api::MetaApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_admin_meta_MetaApi, "/admin/meta", ["bearerAuth", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""admin/meta

No description provided.  **Credential required**: *Yes* / **Permission**: *read:admin:meta*

Params:

Return: AdminMeta200Response, OpenAPI.Clients.ApiResponse
"""
function admin_meta(_api::MetaApi; _mediaType=nothing)
    _ctx = _oacinternal_admin_meta(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function admin_meta(_api::MetaApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_admin_meta(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_announcements_MetaApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Announcement},
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_announcements(_api::MetaApi, announcements_request::AnnouncementsRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_announcements_MetaApi, "/announcements", [], announcements_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""announcements

No description provided.  **Credential required**: *No*

Params:
- announcements_request::AnnouncementsRequest (required)

Return: Vector{Announcement}, OpenAPI.Clients.ApiResponse
"""
function announcements(_api::MetaApi, announcements_request::AnnouncementsRequest; _mediaType=nothing)
    _ctx = _oacinternal_announcements(_api, announcements_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function announcements(_api::MetaApi, response_stream::Channel, announcements_request::AnnouncementsRequest; _mediaType=nothing)
    _ctx = _oacinternal_announcements(_api, announcements_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_announcements_show_MetaApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Announcement,
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_announcements_show(_api::MetaApi, announcements_show_request::AnnouncementsShowRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_announcements_show_MetaApi, "/announcements/show", [], announcements_show_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""announcements/show

No description provided.  **Credential required**: *No*

Params:
- announcements_show_request::AnnouncementsShowRequest (required)

Return: Announcement, OpenAPI.Clients.ApiResponse
"""
function announcements_show(_api::MetaApi, announcements_show_request::AnnouncementsShowRequest; _mediaType=nothing)
    _ctx = _oacinternal_announcements_show(_api, announcements_show_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function announcements_show(_api::MetaApi, response_stream::Channel, announcements_show_request::AnnouncementsShowRequest; _mediaType=nothing)
    _ctx = _oacinternal_announcements_show(_api, announcements_show_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_emoji_MetaApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => EmojiDetailed,
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_emoji(_api::MetaApi, emoji_request::EmojiRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_emoji_MetaApi, "/emoji", [], emoji_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""emoji

No description provided.  **Credential required**: *No*

Params:
- emoji_request::EmojiRequest (required)

Return: EmojiDetailed, OpenAPI.Clients.ApiResponse
"""
function emoji(_api::MetaApi, emoji_request::EmojiRequest; _mediaType=nothing)
    _ctx = _oacinternal_emoji(_api, emoji_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function emoji(_api::MetaApi, response_stream::Channel, emoji_request::EmojiRequest; _mediaType=nothing)
    _ctx = _oacinternal_emoji(_api, emoji_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_emoji_0_MetaApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => EmojiDetailed,
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_emoji_0(_api::MetaApi, emoji_request::EmojiRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_emoji_0_MetaApi, "/emoji", [], emoji_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""emoji

No description provided.  **Credential required**: *No*

Params:
- emoji_request::EmojiRequest (required)

Return: EmojiDetailed, OpenAPI.Clients.ApiResponse
"""
function emoji_0(_api::MetaApi, emoji_request::EmojiRequest; _mediaType=nothing)
    _ctx = _oacinternal_emoji_0(_api, emoji_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function emoji_0(_api::MetaApi, response_stream::Channel, emoji_request::EmojiRequest; _mediaType=nothing)
    _ctx = _oacinternal_emoji_0(_api, emoji_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_emojis_MetaApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Emojis200Response,
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_emojis(_api::MetaApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_emojis_MetaApi, "/emojis", [])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""emojis

No description provided.  **Credential required**: *No*

Params:

Return: Emojis200Response, OpenAPI.Clients.ApiResponse
"""
function emojis(_api::MetaApi; _mediaType=nothing)
    _ctx = _oacinternal_emojis(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function emojis(_api::MetaApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_emojis(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_emojis_0_MetaApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Emojis200Response,
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_emojis_0(_api::MetaApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_emojis_0_MetaApi, "/emojis", [])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""emojis

No description provided.  **Credential required**: *No*

Params:

Return: Emojis200Response, OpenAPI.Clients.ApiResponse
"""
function emojis_0(_api::MetaApi; _mediaType=nothing)
    _ctx = _oacinternal_emojis_0(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function emojis_0(_api::MetaApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_emojis_0(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_endpoint_MetaApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Endpoint200Response,
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_endpoint(_api::MetaApi, endpoint_request::EndpointRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_endpoint_MetaApi, "/endpoint", [], endpoint_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""endpoint

No description provided.  **Credential required**: *No*

Params:
- endpoint_request::EndpointRequest (required)

Return: Endpoint200Response, OpenAPI.Clients.ApiResponse
"""
function endpoint(_api::MetaApi, endpoint_request::EndpointRequest; _mediaType=nothing)
    _ctx = _oacinternal_endpoint(_api, endpoint_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function endpoint(_api::MetaApi, response_stream::Channel, endpoint_request::EndpointRequest; _mediaType=nothing)
    _ctx = _oacinternal_endpoint(_api, endpoint_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_endpoints_MetaApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{String},
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_endpoints(_api::MetaApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_endpoints_MetaApi, "/endpoints", [])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""endpoints

No description provided.  **Credential required**: *No*

Params:

Return: Vector{String}, OpenAPI.Clients.ApiResponse
"""
function endpoints(_api::MetaApi; _mediaType=nothing)
    _ctx = _oacinternal_endpoints(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function endpoints(_api::MetaApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_endpoints(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_fetch_external_resources_MetaApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => FetchExternalResources200Response,
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("429", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_fetch_external_resources(_api::MetaApi, fetch_external_resources_request::FetchExternalResourcesRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_fetch_external_resources_MetaApi, "/fetch-external-resources", ["bearerAuth", ], fetch_external_resources_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""fetch-external-resources

No description provided.  **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties. **Credential required**: *Yes*

Params:
- fetch_external_resources_request::FetchExternalResourcesRequest (required)

Return: FetchExternalResources200Response, OpenAPI.Clients.ApiResponse
"""
function fetch_external_resources(_api::MetaApi, fetch_external_resources_request::FetchExternalResourcesRequest; _mediaType=nothing)
    _ctx = _oacinternal_fetch_external_resources(_api, fetch_external_resources_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function fetch_external_resources(_api::MetaApi, response_stream::Channel, fetch_external_resources_request::FetchExternalResourcesRequest; _mediaType=nothing)
    _ctx = _oacinternal_fetch_external_resources(_api, fetch_external_resources_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_fetch_rss_MetaApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => FetchRss200Response,
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_fetch_rss(_api::MetaApi, fetch_rss_request::FetchRssRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_fetch_rss_MetaApi, "/fetch-rss", [], fetch_rss_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""fetch-rss

No description provided.  **Credential required**: *No*

Params:
- fetch_rss_request::FetchRssRequest (required)

Return: FetchRss200Response, OpenAPI.Clients.ApiResponse
"""
function fetch_rss(_api::MetaApi, fetch_rss_request::FetchRssRequest; _mediaType=nothing)
    _ctx = _oacinternal_fetch_rss(_api, fetch_rss_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function fetch_rss(_api::MetaApi, response_stream::Channel, fetch_rss_request::FetchRssRequest; _mediaType=nothing)
    _ctx = _oacinternal_fetch_rss(_api, fetch_rss_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_fetch_rss_0_MetaApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => FetchRss200Response1,
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_fetch_rss_0(_api::MetaApi, fetch_rss_request::FetchRssRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_fetch_rss_0_MetaApi, "/fetch-rss", [], fetch_rss_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""fetch-rss

No description provided.  **Credential required**: *No*

Params:
- fetch_rss_request::FetchRssRequest (required)

Return: FetchRss200Response1, OpenAPI.Clients.ApiResponse
"""
function fetch_rss_0(_api::MetaApi, fetch_rss_request::FetchRssRequest; _mediaType=nothing)
    _ctx = _oacinternal_fetch_rss_0(_api, fetch_rss_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function fetch_rss_0(_api::MetaApi, response_stream::Channel, fetch_rss_request::FetchRssRequest; _mediaType=nothing)
    _ctx = _oacinternal_fetch_rss_0(_api, fetch_rss_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_online_users_count_MetaApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetOnlineUsersCount200Response,
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_get_online_users_count(_api::MetaApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_online_users_count_MetaApi, "/get-online-users-count", [])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""get-online-users-count

No description provided.  **Credential required**: *No*

Params:

Return: GetOnlineUsersCount200Response, OpenAPI.Clients.ApiResponse
"""
function get_online_users_count(_api::MetaApi; _mediaType=nothing)
    _ctx = _oacinternal_get_online_users_count(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_online_users_count(_api::MetaApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_get_online_users_count(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_online_users_count_0_MetaApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetOnlineUsersCount200Response,
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_get_online_users_count_0(_api::MetaApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_get_online_users_count_0_MetaApi, "/get-online-users-count", [])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""get-online-users-count

No description provided.  **Credential required**: *No*

Params:

Return: GetOnlineUsersCount200Response, OpenAPI.Clients.ApiResponse
"""
function get_online_users_count_0(_api::MetaApi; _mediaType=nothing)
    _ctx = _oacinternal_get_online_users_count_0(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_online_users_count_0(_api::MetaApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_get_online_users_count_0(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_invite_create_MetaApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => InviteCode,
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_invite_create(_api::MetaApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_invite_create_MetaApi, "/invite/create", ["bearerAuth", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""invite/create

No description provided.  **Credential required**: *Yes* / **Permission**: *write:invite-codes*

Params:

Return: InviteCode, OpenAPI.Clients.ApiResponse
"""
function invite_create(_api::MetaApi; _mediaType=nothing)
    _ctx = _oacinternal_invite_create(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function invite_create(_api::MetaApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_invite_create(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_invite_delete_MetaApi = Dict{Regex,Type}(
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_invite_delete(_api::MetaApi, invite_delete_request::InviteDeleteRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_invite_delete_MetaApi, "/invite/delete", ["bearerAuth", ], invite_delete_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""invite/delete

No description provided.  **Credential required**: *Yes* / **Permission**: *write:invite-codes*

Params:
- invite_delete_request::InviteDeleteRequest (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function invite_delete(_api::MetaApi, invite_delete_request::InviteDeleteRequest; _mediaType=nothing)
    _ctx = _oacinternal_invite_delete(_api, invite_delete_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function invite_delete(_api::MetaApi, response_stream::Channel, invite_delete_request::InviteDeleteRequest; _mediaType=nothing)
    _ctx = _oacinternal_invite_delete(_api, invite_delete_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_invite_limit_MetaApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => InviteLimit200Response,
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_invite_limit(_api::MetaApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_invite_limit_MetaApi, "/invite/limit", ["bearerAuth", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""invite/limit

No description provided.  **Credential required**: *Yes* / **Permission**: *read:invite-codes*

Params:

Return: InviteLimit200Response, OpenAPI.Clients.ApiResponse
"""
function invite_limit(_api::MetaApi; _mediaType=nothing)
    _ctx = _oacinternal_invite_limit(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function invite_limit(_api::MetaApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_invite_limit(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_invite_list_MetaApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{InviteCode},
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_invite_list(_api::MetaApi, blocking_list_request::BlockingListRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_invite_list_MetaApi, "/invite/list", ["bearerAuth", ], blocking_list_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""invite/list

No description provided.  **Credential required**: *Yes* / **Permission**: *read:invite-codes*

Params:
- blocking_list_request::BlockingListRequest (required)

Return: Vector{InviteCode}, OpenAPI.Clients.ApiResponse
"""
function invite_list(_api::MetaApi, blocking_list_request::BlockingListRequest; _mediaType=nothing)
    _ctx = _oacinternal_invite_list(_api, blocking_list_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function invite_list(_api::MetaApi, response_stream::Channel, blocking_list_request::BlockingListRequest; _mediaType=nothing)
    _ctx = _oacinternal_invite_list(_api, blocking_list_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_meta_MetaApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Meta200Response,
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_meta(_api::MetaApi, meta_request::MetaRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_meta_MetaApi, "/meta", [], meta_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""meta

No description provided.  **Credential required**: *No*

Params:
- meta_request::MetaRequest (required)

Return: Meta200Response, OpenAPI.Clients.ApiResponse
"""
function meta(_api::MetaApi, meta_request::MetaRequest; _mediaType=nothing)
    _ctx = _oacinternal_meta(_api, meta_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function meta(_api::MetaApi, response_stream::Channel, meta_request::MetaRequest; _mediaType=nothing)
    _ctx = _oacinternal_meta(_api, meta_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_ping_MetaApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Ping200Response,
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_ping(_api::MetaApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_ping_MetaApi, "/ping", [])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""ping

No description provided.  **Credential required**: *No*

Params:

Return: Ping200Response, OpenAPI.Clients.ApiResponse
"""
function ping(_api::MetaApi; _mediaType=nothing)
    _ctx = _oacinternal_ping(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function ping(_api::MetaApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_ping(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_server_info_MetaApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ServerInfo200Response,
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_server_info(_api::MetaApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_server_info_MetaApi, "/server-info", [])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""server-info

No description provided.  **Credential required**: *No*

Params:

Return: ServerInfo200Response, OpenAPI.Clients.ApiResponse
"""
function server_info(_api::MetaApi; _mediaType=nothing)
    _ctx = _oacinternal_server_info(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function server_info(_api::MetaApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_server_info(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_server_info_0_MetaApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ServerInfo200Response,
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_server_info_0(_api::MetaApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_server_info_0_MetaApi, "/server-info", [])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""server-info

No description provided.  **Credential required**: *No*

Params:

Return: ServerInfo200Response, OpenAPI.Clients.ApiResponse
"""
function server_info_0(_api::MetaApi; _mediaType=nothing)
    _ctx = _oacinternal_server_info_0(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function server_info_0(_api::MetaApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_server_info_0(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_stats_MetaApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Stats200Response,
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("401", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("418", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_stats(_api::MetaApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_stats_MetaApi, "/stats", [])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""stats

No description provided.  **Credential required**: *No*

Params:

Return: Stats200Response, OpenAPI.Clients.ApiResponse
"""
function stats(_api::MetaApi; _mediaType=nothing)
    _ctx = _oacinternal_stats(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function stats(_api::MetaApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_stats(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export admin_meta
export announcements
export announcements_show
export emoji
export emoji_0
export emojis
export emojis_0
export endpoint
export endpoints
export fetch_external_resources
export fetch_rss
export fetch_rss_0
export get_online_users_count
export get_online_users_count_0
export invite_create
export invite_delete
export invite_limit
export invite_list
export meta
export ping
export server_info
export server_info_0
export stats
